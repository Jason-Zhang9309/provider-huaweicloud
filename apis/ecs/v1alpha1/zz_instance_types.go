// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type BandwidthInitParameters struct {

	// Specifies the bandwidth billing mode. The value can be traffic or bandwidth.
	// Changing this creates a new instance.
	ChargeMode *string `json:"chargeMode,omitempty" tf:"charge_mode,omitempty"`

	// Specifies the additional EIP information.
	// Changing this creates a new instance.
	// +mapType=granular
	ExtendParam map[string]*string `json:"extendParam,omitempty" tf:"extend_param,omitempty"`

	// Specifies the shared bandwidth id. This parameter is mandatory when
	// share_type is set to WHOLE. Changing this creates a new instance.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Specifies the bandwidth sharing type. Changing this creates a new instance.
	// Possible values are as follows:
	ShareType *string `json:"shareType,omitempty" tf:"share_type,omitempty"`

	// Specifies the bandwidth size. The value ranges from 1 to 300 Mbit/s.
	// This parameter is mandatory when share_type is set to PER. Changing this creates a new instance.
	Size *float64 `json:"size,omitempty" tf:"size,omitempty"`
}

type BandwidthObservation struct {

	// Specifies the bandwidth billing mode. The value can be traffic or bandwidth.
	// Changing this creates a new instance.
	ChargeMode *string `json:"chargeMode,omitempty" tf:"charge_mode,omitempty"`

	// Specifies the additional EIP information.
	// Changing this creates a new instance.
	// +mapType=granular
	ExtendParam map[string]*string `json:"extendParam,omitempty" tf:"extend_param,omitempty"`

	// Specifies the shared bandwidth id. This parameter is mandatory when
	// share_type is set to WHOLE. Changing this creates a new instance.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Specifies the bandwidth sharing type. Changing this creates a new instance.
	// Possible values are as follows:
	ShareType *string `json:"shareType,omitempty" tf:"share_type,omitempty"`

	// Specifies the bandwidth size. The value ranges from 1 to 300 Mbit/s.
	// This parameter is mandatory when share_type is set to PER. Changing this creates a new instance.
	Size *float64 `json:"size,omitempty" tf:"size,omitempty"`
}

type BandwidthParameters struct {

	// Specifies the bandwidth billing mode. The value can be traffic or bandwidth.
	// Changing this creates a new instance.
	// +kubebuilder:validation:Optional
	ChargeMode *string `json:"chargeMode,omitempty" tf:"charge_mode,omitempty"`

	// Specifies the additional EIP information.
	// Changing this creates a new instance.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	ExtendParam map[string]*string `json:"extendParam,omitempty" tf:"extend_param,omitempty"`

	// Specifies the shared bandwidth id. This parameter is mandatory when
	// share_type is set to WHOLE. Changing this creates a new instance.
	// +kubebuilder:validation:Optional
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Specifies the bandwidth sharing type. Changing this creates a new instance.
	// Possible values are as follows:
	// +kubebuilder:validation:Optional
	ShareType *string `json:"shareType" tf:"share_type,omitempty"`

	// Specifies the bandwidth size. The value ranges from 1 to 300 Mbit/s.
	// This parameter is mandatory when share_type is set to PER. Changing this creates a new instance.
	// +kubebuilder:validation:Optional
	Size *float64 `json:"size,omitempty" tf:"size,omitempty"`
}

type DataDisksInitParameters struct {

	// Specifies the data disk DSS pool ID. This field is used
	// only for dedicated storage. Changing this parameter will create a new resource.
	DssPoolID *string `json:"dssPoolId,omitempty" tf:"dss_pool_id,omitempty"`

	// Specifies the IOPS(Input/Output Operations Per Second) for the disk.
	// The field is valid and required when type is set to GPSSD2 or ESSD2.
	Iops *float64 `json:"iops,omitempty" tf:"iops,omitempty"`

	// Specifies the ID of a KMS key. This is used to encrypt the disk.
	// Changing this creates a new instance.
	KMSKeyID *string `json:"kmsKeyId,omitempty" tf:"kms_key_id,omitempty"`

	// Specifies the data disk size, in GB. The value ranges form 10 to 32768.
	// Changing this creates a new instance.
	Size *float64 `json:"size,omitempty" tf:"size,omitempty"`

	// Specifies the EVS snapshot ID or ID of the original data disk contained in
	// the full-ECS image. Changing this creates a new instance.
	SnapshotID *string `json:"snapshotId,omitempty" tf:"snapshot_id,omitempty"`

	// Specifies the throughput for the disk. The Unit is MiB/s.
	// The field is valid and required when type is set to GPSSD2.
	Throughput *float64 `json:"throughput,omitempty" tf:"throughput,omitempty"`

	// Specifies the ECS data disk type. Changing this creates a new instance.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type DataDisksObservation struct {

	// Specifies the data disk DSS pool ID. This field is used
	// only for dedicated storage. Changing this parameter will create a new resource.
	DssPoolID *string `json:"dssPoolId,omitempty" tf:"dss_pool_id,omitempty"`

	// Specifies the IOPS(Input/Output Operations Per Second) for the disk.
	// The field is valid and required when type is set to GPSSD2 or ESSD2.
	Iops *float64 `json:"iops,omitempty" tf:"iops,omitempty"`

	// Specifies the ID of a KMS key. This is used to encrypt the disk.
	// Changing this creates a new instance.
	KMSKeyID *string `json:"kmsKeyId,omitempty" tf:"kms_key_id,omitempty"`

	// Specifies the data disk size, in GB. The value ranges form 10 to 32768.
	// Changing this creates a new instance.
	Size *float64 `json:"size,omitempty" tf:"size,omitempty"`

	// Specifies the EVS snapshot ID or ID of the original data disk contained in
	// the full-ECS image. Changing this creates a new instance.
	SnapshotID *string `json:"snapshotId,omitempty" tf:"snapshot_id,omitempty"`

	// Specifies the throughput for the disk. The Unit is MiB/s.
	// The field is valid and required when type is set to GPSSD2.
	Throughput *float64 `json:"throughput,omitempty" tf:"throughput,omitempty"`

	// Specifies the ECS data disk type. Changing this creates a new instance.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type DataDisksParameters struct {

	// Specifies the data disk DSS pool ID. This field is used
	// only for dedicated storage. Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	DssPoolID *string `json:"dssPoolId,omitempty" tf:"dss_pool_id,omitempty"`

	// Specifies the IOPS(Input/Output Operations Per Second) for the disk.
	// The field is valid and required when type is set to GPSSD2 or ESSD2.
	// +kubebuilder:validation:Optional
	Iops *float64 `json:"iops,omitempty" tf:"iops,omitempty"`

	// Specifies the ID of a KMS key. This is used to encrypt the disk.
	// Changing this creates a new instance.
	// +kubebuilder:validation:Optional
	KMSKeyID *string `json:"kmsKeyId,omitempty" tf:"kms_key_id,omitempty"`

	// Specifies the data disk size, in GB. The value ranges form 10 to 32768.
	// Changing this creates a new instance.
	// +kubebuilder:validation:Optional
	Size *float64 `json:"size" tf:"size,omitempty"`

	// Specifies the EVS snapshot ID or ID of the original data disk contained in
	// the full-ECS image. Changing this creates a new instance.
	// +kubebuilder:validation:Optional
	SnapshotID *string `json:"snapshotId,omitempty" tf:"snapshot_id,omitempty"`

	// Specifies the throughput for the disk. The Unit is MiB/s.
	// The field is valid and required when type is set to GPSSD2.
	// +kubebuilder:validation:Optional
	Throughput *float64 `json:"throughput,omitempty" tf:"throughput,omitempty"`

	// Specifies the ECS data disk type. Changing this creates a new instance.
	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`
}

type InstanceInitParameters struct {

	// Specifies the administrative password to assign to the instance.
	AdminPassSecretRef *v1.SecretKeySelector `json:"adminPassSecretRef,omitempty" tf:"-"`

	// Specifies the IAM agency name which is created on IAM to provide
	// temporary credentials for ECS to access cloud services.
	AgencyName *string `json:"agencyName,omitempty" tf:"agency_name,omitempty"`

	// Specifies the agent list in comma-separated string.
	// Available agents are:
	AgentList *string `json:"agentList,omitempty" tf:"agent_list,omitempty"`

	AutoPay *string `json:"autoPay,omitempty" tf:"auto_pay,omitempty"`

	// Specifies whether auto renew is enabled.
	// Valid values are true and false. Defaults to false.
	AutoRenew *string `json:"autoRenew,omitempty" tf:"auto_renew,omitempty"`

	// Specifies the auto terminate time.
	// The value is in the format of "yyyy-MM-ddTHH:mm:ssZ" in UTC+0 and complies with ISO8601.
	// If the value of second (ss) is not "00", the system automatically sets to the current value of minute (mm).
	// The auto terminate time must be at least half an hour later than the current time.
	// The auto terminate time cannot be three years later than the current time.
	// For example, set the value to "2024-09-25T12:05:00Z".
	AutoTerminateTime *string `json:"autoTerminateTime,omitempty" tf:"auto_terminate_time,omitempty"`

	// Specifies the availability zone in which to create the instance.
	// Please following reference
	// for the values. Changing this creates a new instance.
	AvailabilityZone *string `json:"availabilityZone,omitempty" tf:"availability_zone,omitempty"`

	// Specifies the bandwidth of an EIP that will be automatically assigned to the instance.
	// The object structure is documented below. Changing this creates a new instance.
	Bandwidth []BandwidthInitParameters `json:"bandwidth,omitempty" tf:"bandwidth,omitempty"`

	// Specifies the charging mode of the instance. Valid values are prePaid,
	// postPaid and spot, defaults to postPaid. Changing this creates a new instance.
	ChargingMode *string `json:"chargingMode,omitempty" tf:"charging_mode,omitempty"`

	// Specifies an array of one or more data disks to attach to the instance.
	// The data_disks object structure is documented below. Changing this creates a new instance.
	DataDisks []DataDisksInitParameters `json:"dataDisks,omitempty" tf:"data_disks,omitempty"`

	// Specifies whether to delete the data disks when the instance is terminated.
	// Defaults to false. This parameter is valid if charging_mode is set to postPaid, and all data disks will be deleted
	// in prePaid charging mode.
	DeleteDisksOnTermination *bool `json:"deleteDisksOnTermination,omitempty" tf:"delete_disks_on_termination,omitempty"`

	// Specifies whether the EIP is released when the instance is terminated.
	// Defaults to true.
	DeleteEIPOnTermination *bool `json:"deleteEipOnTermination,omitempty" tf:"delete_eip_on_termination,omitempty"`

	// Specifies the description of the instance. The description consists of 0 to 85
	// characters, and can't contain '<' or '>'.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Specifies the ID of an existing EIP assigned to the instance.
	// This parameter and eip_type, bandwidth are alternative. Changing this creates a new instance.
	EIPID *string `json:"eipId,omitempty" tf:"eip_id,omitempty"`

	// Specifies the type of an EIP that will be automatically assigned to the instance.
	// Available values are 5_bgp (dynamic BGP) and 5_sbgp (static BGP). Changing this creates a new instance.
	EIPType *string `json:"eipType,omitempty" tf:"eip_type,omitempty"`

	// Specifies a unique id in UUID format of enterprise project.
	EnterpriseProjectID *string `json:"enterpriseProjectId,omitempty" tf:"enterprise_project_id,omitempty"`

	// Specifies the flavor ID of the instance to be created.
	// schema: Required
	FlavorID *string `json:"flavorId,omitempty" tf:"flavor_id,omitempty"`

	// The flavor name of the instance.
	// schema: Computed
	FlavorName *string `json:"flavorName,omitempty" tf:"flavor_name,omitempty"`

	// Specifies the hostname of the instance.
	Hostname *string `json:"hostname,omitempty" tf:"hostname,omitempty"`

	// Required if image_name is empty. Specifies the image ID of the desired
	// image for the instance. Changing this creates a new instance.
	ImageID *string `json:"imageId,omitempty" tf:"image_id,omitempty"`

	// Required if image_id is empty. Specifies the name of the desired image
	// for the instance. Changing this creates a new instance.
	ImageName *string `json:"imageName,omitempty" tf:"image_name,omitempty"`

	// Specifies the SSH keypair name used for logging in to the instance.
	KeyPair *string `json:"keyPair,omitempty" tf:"key_pair,omitempty"`

	// Specifies the user-defined metadata key-value pair.
	// +mapType=granular
	Metadata map[string]*string `json:"metadata,omitempty" tf:"metadata,omitempty"`

	// Specifies a unique name for the instance. The name consists of 1 to 64 characters,
	// including letters, digits, underscores (_), hyphens (-), and periods (.).
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Specifies an array of one or more networks to attach to the instance. The
	// network object structure is documented below. Changing this creates a new instance.
	Network []NetworkInitParameters `json:"network,omitempty" tf:"network,omitempty"`

	// Specifies the charging period of the instance.
	// If period_unit is set to month , the value ranges from 1 to 9. If period_unit is set to year, the value
	// ranges from 1 to 3. This parameter is mandatory if charging_mode is set to prePaid. Changing this creates a
	// new resource.
	Period *float64 `json:"period,omitempty" tf:"period,omitempty"`

	// Specifies the charging period unit of the instance.
	// Valid values are month and year. This parameter is mandatory if charging_mode is set to prePaid.
	// Changing this creates a new instance.
	PeriodUnit *string `json:"periodUnit,omitempty" tf:"period_unit,omitempty"`

	// Specifies the power action to be done for the instance.
	// The valid values are ON, OFF, REBOOT, FORCE-OFF and FORCE-REBOOT.
	PowerAction *string `json:"powerAction,omitempty" tf:"power_action,omitempty"`

	// Specifies the the private key of the keypair in use. This parameter is mandatory
	// when replacing or unbinding a keypair and the instance is in Running state.
	PrivateKeySecretRef *v1.SecretKeySelector `json:"privateKeySecretRef,omitempty" tf:"-"`

	// Specifies the region in which to create the instance.
	// If omitted, the provider-level region will be used. Changing this creates a new instance.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Specifies the scheduler with hints on how the instance should be launched. The
	// available hints are described below.
	SchedulerHints []SchedulerHintsInitParameters `json:"schedulerHints,omitempty" tf:"scheduler_hints,omitempty"`

	// Specifies an array of one or more security group IDs to associate with the
	// instance.
	// +listType=set
	SecurityGroupIds []*string `json:"securityGroupIds,omitempty" tf:"security_group_ids,omitempty"`

	// An array of one or more security groups to associate with the instance.
	// schema: Computed
	// +listType=set
	SecurityGroups []*string `json:"securityGroups,omitempty" tf:"security_groups,omitempty"`

	// Specifies the service duration of the spot ECS in hours.
	// The valid value is range from 1 to 6.
	// This parameter takes effect only when charging_mode is set to spot.
	// Changing this creates a new instance.
	SpotDuration *float64 `json:"spotDuration,omitempty" tf:"spot_duration,omitempty"`

	// Specifies the number of time periods in the service duration.
	// This parameter takes effect only when charging_mode is set to spot and the default value is 1.
	// Changing this creates a new instance.
	SpotDurationCount *float64 `json:"spotDurationCount,omitempty" tf:"spot_duration_count,omitempty"`

	// Specifies the highest price per hour you accept for a spot ECS.
	// This parameter takes effect only when charging_mode is set to spot. If the price is not specified,
	// the pay-per-use price is used by default. Changing this creates a new instance.
	SpotMaximumPrice *string `json:"spotMaximumPrice,omitempty" tf:"spot_maximum_price,omitempty"`

	// Specifies whether to try stop instance gracefully before destroying it, thus giving
	// chance for guest OS daemons to stop correctly. If instance doesn't stop within timeout, it will be destroyed anyway.
	StopBeforeDestroy *bool `json:"stopBeforeDestroy,omitempty" tf:"stop_before_destroy,omitempty"`

	// Specifies the system disk DSS pool ID. This field is used
	// only for dedicated storage. Changing this parameter will create a new resource.
	SystemDiskDssPoolID *string `json:"systemDiskDssPoolId,omitempty" tf:"system_disk_dss_pool_id,omitempty"`

	// Specifies the IOPS(Input/Output Operations Per Second) for the disk.
	// The field is valid and required when system_disk_type is set to GPSSD2 or ESSD2.
	SystemDiskIops *float64 `json:"systemDiskIops,omitempty" tf:"system_disk_iops,omitempty"`

	// Specifies the ID of a KMS key used to encrypt the system disk.
	// Changing this creates a new instance.
	SystemDiskKMSKeyID *string `json:"systemDiskKmsKeyId,omitempty" tf:"system_disk_kms_key_id,omitempty"`

	// Specifies the system disk size in GB, The value range is 1 to 1024.
	// Shrinking the disk is not supported.
	SystemDiskSize *float64 `json:"systemDiskSize,omitempty" tf:"system_disk_size,omitempty"`

	// Specifies the throughput for the disk. The Unit is MiB/s.
	// The field is valid and required when system_disk_type is set to GPSSD2.
	SystemDiskThroughput *float64 `json:"systemDiskThroughput,omitempty" tf:"system_disk_throughput,omitempty"`

	// Specifies the system disk type of the instance. Defaults to GPSSD.
	// Changing this creates a new instance.
	SystemDiskType *string `json:"systemDiskType,omitempty" tf:"system_disk_type,omitempty"`

	// Specifies the key/value pairs to associate with the instance.
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// Specifies the user data to be injected to the instance during the creation. Text
	// and text files can be injected. The content of user_data can be plaint text or encoded with base64.
	UserData *string `json:"userData,omitempty" tf:"user_data,omitempty"`

	// Specifies a user ID, required when using key_pair in prePaid charging mode.
	// Changing this creates a new instance.
	UserID *string `json:"userId,omitempty" tf:"user_id,omitempty"`
}

type InstanceObservation struct {

	// The first detected Fixed IPv4 address or the Floating IP.
	AccessIPV4 *string `json:"accessIpV4,omitempty" tf:"access_ip_v4,omitempty"`

	// The first detected Fixed IPv6 address.
	AccessIPV6 *string `json:"accessIpV6,omitempty" tf:"access_ip_v6,omitempty"`

	// Specifies the IAM agency name which is created on IAM to provide
	// temporary credentials for ECS to access cloud services.
	AgencyName *string `json:"agencyName,omitempty" tf:"agency_name,omitempty"`

	// Specifies the agent list in comma-separated string.
	// Available agents are:
	AgentList *string `json:"agentList,omitempty" tf:"agent_list,omitempty"`

	AutoPay *string `json:"autoPay,omitempty" tf:"auto_pay,omitempty"`

	// Specifies whether auto renew is enabled.
	// Valid values are true and false. Defaults to false.
	AutoRenew *string `json:"autoRenew,omitempty" tf:"auto_renew,omitempty"`

	// Specifies the auto terminate time.
	// The value is in the format of "yyyy-MM-ddTHH:mm:ssZ" in UTC+0 and complies with ISO8601.
	// If the value of second (ss) is not "00", the system automatically sets to the current value of minute (mm).
	// The auto terminate time must be at least half an hour later than the current time.
	// The auto terminate time cannot be three years later than the current time.
	// For example, set the value to "2024-09-25T12:05:00Z".
	AutoTerminateTime *string `json:"autoTerminateTime,omitempty" tf:"auto_terminate_time,omitempty"`

	// Specifies the availability zone in which to create the instance.
	// Please following reference
	// for the values. Changing this creates a new instance.
	AvailabilityZone *string `json:"availabilityZone,omitempty" tf:"availability_zone,omitempty"`

	// Specifies the bandwidth of an EIP that will be automatically assigned to the instance.
	// The object structure is documented below. Changing this creates a new instance.
	Bandwidth []BandwidthObservation `json:"bandwidth,omitempty" tf:"bandwidth,omitempty"`

	// Specifies the charging mode of the instance. Valid values are prePaid,
	// postPaid and spot, defaults to postPaid. Changing this creates a new instance.
	ChargingMode *string `json:"chargingMode,omitempty" tf:"charging_mode,omitempty"`

	// The creation time, in UTC format.
	CreatedAt *string `json:"createdAt,omitempty" tf:"created_at,omitempty"`

	// Specifies an array of one or more data disks to attach to the instance.
	// The data_disks object structure is documented below. Changing this creates a new instance.
	DataDisks []DataDisksObservation `json:"dataDisks,omitempty" tf:"data_disks,omitempty"`

	// Specifies whether to delete the data disks when the instance is terminated.
	// Defaults to false. This parameter is valid if charging_mode is set to postPaid, and all data disks will be deleted
	// in prePaid charging mode.
	DeleteDisksOnTermination *bool `json:"deleteDisksOnTermination,omitempty" tf:"delete_disks_on_termination,omitempty"`

	// Specifies whether the EIP is released when the instance is terminated.
	// Defaults to true.
	DeleteEIPOnTermination *bool `json:"deleteEipOnTermination,omitempty" tf:"delete_eip_on_termination,omitempty"`

	// Specifies the description of the instance. The description consists of 0 to 85
	// characters, and can't contain '<' or '>'.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Specifies the ID of an existing EIP assigned to the instance.
	// This parameter and eip_type, bandwidth are alternative. Changing this creates a new instance.
	EIPID *string `json:"eipId,omitempty" tf:"eip_id,omitempty"`

	// Specifies the type of an EIP that will be automatically assigned to the instance.
	// Available values are 5_bgp (dynamic BGP) and 5_sbgp (static BGP). Changing this creates a new instance.
	EIPType *string `json:"eipType,omitempty" tf:"eip_type,omitempty"`

	// Specifies a unique id in UUID format of enterprise project.
	EnterpriseProjectID *string `json:"enterpriseProjectId,omitempty" tf:"enterprise_project_id,omitempty"`

	// The expired time of prePaid instance, in UTC format.
	ExpiredTime *string `json:"expiredTime,omitempty" tf:"expired_time,omitempty"`

	// Specifies the flavor ID of the instance to be created.
	// schema: Required
	FlavorID *string `json:"flavorId,omitempty" tf:"flavor_id,omitempty"`

	// The flavor name of the instance.
	// schema: Computed
	FlavorName *string `json:"flavorName,omitempty" tf:"flavor_name,omitempty"`

	// Specifies the hostname of the instance.
	Hostname *string `json:"hostname,omitempty" tf:"hostname,omitempty"`

	// A resource ID in UUID format.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Required if image_name is empty. Specifies the image ID of the desired
	// image for the instance. Changing this creates a new instance.
	ImageID *string `json:"imageId,omitempty" tf:"image_id,omitempty"`

	// Required if image_id is empty. Specifies the name of the desired image
	// for the instance. Changing this creates a new instance.
	ImageName *string `json:"imageName,omitempty" tf:"image_name,omitempty"`

	// Specifies the SSH keypair name used for logging in to the instance.
	KeyPair *string `json:"keyPair,omitempty" tf:"key_pair,omitempty"`

	// Specifies the user-defined metadata key-value pair.
	// +mapType=granular
	Metadata map[string]*string `json:"metadata,omitempty" tf:"metadata,omitempty"`

	// Specifies a unique name for the instance. The name consists of 1 to 64 characters,
	// including letters, digits, underscores (_), hyphens (-), and periods (.).
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Specifies an array of one or more networks to attach to the instance. The
	// network object structure is documented below. Changing this creates a new instance.
	Network []NetworkObservation `json:"network,omitempty" tf:"network,omitempty"`

	// Specifies the charging period of the instance.
	// If period_unit is set to month , the value ranges from 1 to 9. If period_unit is set to year, the value
	// ranges from 1 to 3. This parameter is mandatory if charging_mode is set to prePaid. Changing this creates a
	// new resource.
	Period *float64 `json:"period,omitempty" tf:"period,omitempty"`

	// Specifies the charging period unit of the instance.
	// Valid values are month and year. This parameter is mandatory if charging_mode is set to prePaid.
	// Changing this creates a new instance.
	PeriodUnit *string `json:"periodUnit,omitempty" tf:"period_unit,omitempty"`

	// Specifies the power action to be done for the instance.
	// The valid values are ON, OFF, REBOOT, FORCE-OFF and FORCE-REBOOT.
	PowerAction *string `json:"powerAction,omitempty" tf:"power_action,omitempty"`

	// The EIP address that is associated to the instance.
	PublicIP *string `json:"publicIp,omitempty" tf:"public_ip,omitempty"`

	// Specifies the region in which to create the instance.
	// If omitted, the provider-level region will be used. Changing this creates a new instance.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Specifies the scheduler with hints on how the instance should be launched. The
	// available hints are described below.
	SchedulerHints []SchedulerHintsObservation `json:"schedulerHints,omitempty" tf:"scheduler_hints,omitempty"`

	// Specifies an array of one or more security group IDs to associate with the
	// instance.
	// +listType=set
	SecurityGroupIds []*string `json:"securityGroupIds,omitempty" tf:"security_group_ids,omitempty"`

	// An array of one or more security groups to associate with the instance.
	// schema: Computed
	// +listType=set
	SecurityGroups []*string `json:"securityGroups,omitempty" tf:"security_groups,omitempty"`

	// Specifies the service duration of the spot ECS in hours.
	// The valid value is range from 1 to 6.
	// This parameter takes effect only when charging_mode is set to spot.
	// Changing this creates a new instance.
	SpotDuration *float64 `json:"spotDuration,omitempty" tf:"spot_duration,omitempty"`

	// Specifies the number of time periods in the service duration.
	// This parameter takes effect only when charging_mode is set to spot and the default value is 1.
	// Changing this creates a new instance.
	SpotDurationCount *float64 `json:"spotDurationCount,omitempty" tf:"spot_duration_count,omitempty"`

	// Specifies the highest price per hour you accept for a spot ECS.
	// This parameter takes effect only when charging_mode is set to spot. If the price is not specified,
	// the pay-per-use price is used by default. Changing this creates a new instance.
	SpotMaximumPrice *string `json:"spotMaximumPrice,omitempty" tf:"spot_maximum_price,omitempty"`

	// The status of the instance.
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// Specifies whether to try stop instance gracefully before destroying it, thus giving
	// chance for guest OS daemons to stop correctly. If instance doesn't stop within timeout, it will be destroyed anyway.
	StopBeforeDestroy *bool `json:"stopBeforeDestroy,omitempty" tf:"stop_before_destroy,omitempty"`

	// Specifies the system disk DSS pool ID. This field is used
	// only for dedicated storage. Changing this parameter will create a new resource.
	SystemDiskDssPoolID *string `json:"systemDiskDssPoolId,omitempty" tf:"system_disk_dss_pool_id,omitempty"`

	// The system disk volume ID.
	SystemDiskID *string `json:"systemDiskId,omitempty" tf:"system_disk_id,omitempty"`

	// Specifies the IOPS(Input/Output Operations Per Second) for the disk.
	// The field is valid and required when system_disk_type is set to GPSSD2 or ESSD2.
	SystemDiskIops *float64 `json:"systemDiskIops,omitempty" tf:"system_disk_iops,omitempty"`

	// Specifies the ID of a KMS key used to encrypt the system disk.
	// Changing this creates a new instance.
	SystemDiskKMSKeyID *string `json:"systemDiskKmsKeyId,omitempty" tf:"system_disk_kms_key_id,omitempty"`

	// Specifies the system disk size in GB, The value range is 1 to 1024.
	// Shrinking the disk is not supported.
	SystemDiskSize *float64 `json:"systemDiskSize,omitempty" tf:"system_disk_size,omitempty"`

	// Specifies the throughput for the disk. The Unit is MiB/s.
	// The field is valid and required when system_disk_type is set to GPSSD2.
	SystemDiskThroughput *float64 `json:"systemDiskThroughput,omitempty" tf:"system_disk_throughput,omitempty"`

	// Specifies the system disk type of the instance. Defaults to GPSSD.
	// Changing this creates a new instance.
	SystemDiskType *string `json:"systemDiskType,omitempty" tf:"system_disk_type,omitempty"`

	// Specifies the key/value pairs to associate with the instance.
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// The last update time, in UTC format.
	UpdatedAt *string `json:"updatedAt,omitempty" tf:"updated_at,omitempty"`

	// Specifies the user data to be injected to the instance during the creation. Text
	// and text files can be injected. The content of user_data can be plaint text or encoded with base64.
	UserData *string `json:"userData,omitempty" tf:"user_data,omitempty"`

	// Specifies a user ID, required when using key_pair in prePaid charging mode.
	// Changing this creates a new instance.
	UserID *string `json:"userId,omitempty" tf:"user_id,omitempty"`

	// An array of one or more disks to attach to the instance.
	// The volume attached object structure is documented below.
	VolumeAttached []VolumeAttachedObservation `json:"volumeAttached,omitempty" tf:"volume_attached,omitempty"`
}

type InstanceParameters struct {

	// Specifies the administrative password to assign to the instance.
	// +kubebuilder:validation:Optional
	AdminPassSecretRef *v1.SecretKeySelector `json:"adminPassSecretRef,omitempty" tf:"-"`

	// Specifies the IAM agency name which is created on IAM to provide
	// temporary credentials for ECS to access cloud services.
	// +kubebuilder:validation:Optional
	AgencyName *string `json:"agencyName,omitempty" tf:"agency_name,omitempty"`

	// Specifies the agent list in comma-separated string.
	// Available agents are:
	// +kubebuilder:validation:Optional
	AgentList *string `json:"agentList,omitempty" tf:"agent_list,omitempty"`

	// +kubebuilder:validation:Optional
	AutoPay *string `json:"autoPay,omitempty" tf:"auto_pay,omitempty"`

	// Specifies whether auto renew is enabled.
	// Valid values are true and false. Defaults to false.
	// +kubebuilder:validation:Optional
	AutoRenew *string `json:"autoRenew,omitempty" tf:"auto_renew,omitempty"`

	// Specifies the auto terminate time.
	// The value is in the format of "yyyy-MM-ddTHH:mm:ssZ" in UTC+0 and complies with ISO8601.
	// If the value of second (ss) is not "00", the system automatically sets to the current value of minute (mm).
	// The auto terminate time must be at least half an hour later than the current time.
	// The auto terminate time cannot be three years later than the current time.
	// For example, set the value to "2024-09-25T12:05:00Z".
	// +kubebuilder:validation:Optional
	AutoTerminateTime *string `json:"autoTerminateTime,omitempty" tf:"auto_terminate_time,omitempty"`

	// Specifies the availability zone in which to create the instance.
	// Please following reference
	// for the values. Changing this creates a new instance.
	// +kubebuilder:validation:Optional
	AvailabilityZone *string `json:"availabilityZone,omitempty" tf:"availability_zone,omitempty"`

	// Specifies the bandwidth of an EIP that will be automatically assigned to the instance.
	// The object structure is documented below. Changing this creates a new instance.
	// +kubebuilder:validation:Optional
	Bandwidth []BandwidthParameters `json:"bandwidth,omitempty" tf:"bandwidth,omitempty"`

	// Specifies the charging mode of the instance. Valid values are prePaid,
	// postPaid and spot, defaults to postPaid. Changing this creates a new instance.
	// +kubebuilder:validation:Optional
	ChargingMode *string `json:"chargingMode,omitempty" tf:"charging_mode,omitempty"`

	// Specifies an array of one or more data disks to attach to the instance.
	// The data_disks object structure is documented below. Changing this creates a new instance.
	// +kubebuilder:validation:Optional
	DataDisks []DataDisksParameters `json:"dataDisks,omitempty" tf:"data_disks,omitempty"`

	// Specifies whether to delete the data disks when the instance is terminated.
	// Defaults to false. This parameter is valid if charging_mode is set to postPaid, and all data disks will be deleted
	// in prePaid charging mode.
	// +kubebuilder:validation:Optional
	DeleteDisksOnTermination *bool `json:"deleteDisksOnTermination,omitempty" tf:"delete_disks_on_termination,omitempty"`

	// Specifies whether the EIP is released when the instance is terminated.
	// Defaults to true.
	// +kubebuilder:validation:Optional
	DeleteEIPOnTermination *bool `json:"deleteEipOnTermination,omitempty" tf:"delete_eip_on_termination,omitempty"`

	// Specifies the description of the instance. The description consists of 0 to 85
	// characters, and can't contain '<' or '>'.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Specifies the ID of an existing EIP assigned to the instance.
	// This parameter and eip_type, bandwidth are alternative. Changing this creates a new instance.
	// +kubebuilder:validation:Optional
	EIPID *string `json:"eipId,omitempty" tf:"eip_id,omitempty"`

	// Specifies the type of an EIP that will be automatically assigned to the instance.
	// Available values are 5_bgp (dynamic BGP) and 5_sbgp (static BGP). Changing this creates a new instance.
	// +kubebuilder:validation:Optional
	EIPType *string `json:"eipType,omitempty" tf:"eip_type,omitempty"`

	// Specifies a unique id in UUID format of enterprise project.
	// +kubebuilder:validation:Optional
	EnterpriseProjectID *string `json:"enterpriseProjectId,omitempty" tf:"enterprise_project_id,omitempty"`

	// Specifies the flavor ID of the instance to be created.
	// schema: Required
	// +kubebuilder:validation:Optional
	FlavorID *string `json:"flavorId,omitempty" tf:"flavor_id,omitempty"`

	// The flavor name of the instance.
	// schema: Computed
	// +kubebuilder:validation:Optional
	FlavorName *string `json:"flavorName,omitempty" tf:"flavor_name,omitempty"`

	// Specifies the hostname of the instance.
	// +kubebuilder:validation:Optional
	Hostname *string `json:"hostname,omitempty" tf:"hostname,omitempty"`

	// Required if image_name is empty. Specifies the image ID of the desired
	// image for the instance. Changing this creates a new instance.
	// +kubebuilder:validation:Optional
	ImageID *string `json:"imageId,omitempty" tf:"image_id,omitempty"`

	// Required if image_id is empty. Specifies the name of the desired image
	// for the instance. Changing this creates a new instance.
	// +kubebuilder:validation:Optional
	ImageName *string `json:"imageName,omitempty" tf:"image_name,omitempty"`

	// Specifies the SSH keypair name used for logging in to the instance.
	// +kubebuilder:validation:Optional
	KeyPair *string `json:"keyPair,omitempty" tf:"key_pair,omitempty"`

	// Specifies the user-defined metadata key-value pair.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Metadata map[string]*string `json:"metadata,omitempty" tf:"metadata,omitempty"`

	// Specifies a unique name for the instance. The name consists of 1 to 64 characters,
	// including letters, digits, underscores (_), hyphens (-), and periods (.).
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Specifies an array of one or more networks to attach to the instance. The
	// network object structure is documented below. Changing this creates a new instance.
	// +kubebuilder:validation:Optional
	Network []NetworkParameters `json:"network,omitempty" tf:"network,omitempty"`

	// Specifies the charging period of the instance.
	// If period_unit is set to month , the value ranges from 1 to 9. If period_unit is set to year, the value
	// ranges from 1 to 3. This parameter is mandatory if charging_mode is set to prePaid. Changing this creates a
	// new resource.
	// +kubebuilder:validation:Optional
	Period *float64 `json:"period,omitempty" tf:"period,omitempty"`

	// Specifies the charging period unit of the instance.
	// Valid values are month and year. This parameter is mandatory if charging_mode is set to prePaid.
	// Changing this creates a new instance.
	// +kubebuilder:validation:Optional
	PeriodUnit *string `json:"periodUnit,omitempty" tf:"period_unit,omitempty"`

	// Specifies the power action to be done for the instance.
	// The valid values are ON, OFF, REBOOT, FORCE-OFF and FORCE-REBOOT.
	// +kubebuilder:validation:Optional
	PowerAction *string `json:"powerAction,omitempty" tf:"power_action,omitempty"`

	// Specifies the the private key of the keypair in use. This parameter is mandatory
	// when replacing or unbinding a keypair and the instance is in Running state.
	// +kubebuilder:validation:Optional
	PrivateKeySecretRef *v1.SecretKeySelector `json:"privateKeySecretRef,omitempty" tf:"-"`

	// Specifies the region in which to create the instance.
	// If omitted, the provider-level region will be used. Changing this creates a new instance.
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Specifies the scheduler with hints on how the instance should be launched. The
	// available hints are described below.
	// +kubebuilder:validation:Optional
	SchedulerHints []SchedulerHintsParameters `json:"schedulerHints,omitempty" tf:"scheduler_hints,omitempty"`

	// Specifies an array of one or more security group IDs to associate with the
	// instance.
	// +kubebuilder:validation:Optional
	// +listType=set
	SecurityGroupIds []*string `json:"securityGroupIds,omitempty" tf:"security_group_ids,omitempty"`

	// An array of one or more security groups to associate with the instance.
	// schema: Computed
	// +kubebuilder:validation:Optional
	// +listType=set
	SecurityGroups []*string `json:"securityGroups,omitempty" tf:"security_groups,omitempty"`

	// Specifies the service duration of the spot ECS in hours.
	// The valid value is range from 1 to 6.
	// This parameter takes effect only when charging_mode is set to spot.
	// Changing this creates a new instance.
	// +kubebuilder:validation:Optional
	SpotDuration *float64 `json:"spotDuration,omitempty" tf:"spot_duration,omitempty"`

	// Specifies the number of time periods in the service duration.
	// This parameter takes effect only when charging_mode is set to spot and the default value is 1.
	// Changing this creates a new instance.
	// +kubebuilder:validation:Optional
	SpotDurationCount *float64 `json:"spotDurationCount,omitempty" tf:"spot_duration_count,omitempty"`

	// Specifies the highest price per hour you accept for a spot ECS.
	// This parameter takes effect only when charging_mode is set to spot. If the price is not specified,
	// the pay-per-use price is used by default. Changing this creates a new instance.
	// +kubebuilder:validation:Optional
	SpotMaximumPrice *string `json:"spotMaximumPrice,omitempty" tf:"spot_maximum_price,omitempty"`

	// Specifies whether to try stop instance gracefully before destroying it, thus giving
	// chance for guest OS daemons to stop correctly. If instance doesn't stop within timeout, it will be destroyed anyway.
	// +kubebuilder:validation:Optional
	StopBeforeDestroy *bool `json:"stopBeforeDestroy,omitempty" tf:"stop_before_destroy,omitempty"`

	// Specifies the system disk DSS pool ID. This field is used
	// only for dedicated storage. Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	SystemDiskDssPoolID *string `json:"systemDiskDssPoolId,omitempty" tf:"system_disk_dss_pool_id,omitempty"`

	// Specifies the IOPS(Input/Output Operations Per Second) for the disk.
	// The field is valid and required when system_disk_type is set to GPSSD2 or ESSD2.
	// +kubebuilder:validation:Optional
	SystemDiskIops *float64 `json:"systemDiskIops,omitempty" tf:"system_disk_iops,omitempty"`

	// Specifies the ID of a KMS key used to encrypt the system disk.
	// Changing this creates a new instance.
	// +kubebuilder:validation:Optional
	SystemDiskKMSKeyID *string `json:"systemDiskKmsKeyId,omitempty" tf:"system_disk_kms_key_id,omitempty"`

	// Specifies the system disk size in GB, The value range is 1 to 1024.
	// Shrinking the disk is not supported.
	// +kubebuilder:validation:Optional
	SystemDiskSize *float64 `json:"systemDiskSize,omitempty" tf:"system_disk_size,omitempty"`

	// Specifies the throughput for the disk. The Unit is MiB/s.
	// The field is valid and required when system_disk_type is set to GPSSD2.
	// +kubebuilder:validation:Optional
	SystemDiskThroughput *float64 `json:"systemDiskThroughput,omitempty" tf:"system_disk_throughput,omitempty"`

	// Specifies the system disk type of the instance. Defaults to GPSSD.
	// Changing this creates a new instance.
	// +kubebuilder:validation:Optional
	SystemDiskType *string `json:"systemDiskType,omitempty" tf:"system_disk_type,omitempty"`

	// Specifies the key/value pairs to associate with the instance.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// Specifies the user data to be injected to the instance during the creation. Text
	// and text files can be injected. The content of user_data can be plaint text or encoded with base64.
	// +kubebuilder:validation:Optional
	UserData *string `json:"userData,omitempty" tf:"user_data,omitempty"`

	// Specifies a user ID, required when using key_pair in prePaid charging mode.
	// Changing this creates a new instance.
	// +kubebuilder:validation:Optional
	UserID *string `json:"userId,omitempty" tf:"user_id,omitempty"`
}

type NetworkInitParameters struct {

	// Specifies if this network should be used for provisioning access.
	// Accepts true or false. Defaults to false.
	AccessNetwork *bool `json:"accessNetwork,omitempty" tf:"access_network,omitempty"`

	// Specifies a fixed IPv4 address to be used on this network.
	// Changing this creates a new instance.
	FixedIPV4 *string `json:"fixedIpV4,omitempty" tf:"fixed_ip_v4,omitempty"`

	// The Fixed IPv6 address of the instance on that network.
	// schema: Computed
	FixedIPV6 *string `json:"fixedIpV6,omitempty" tf:"fixed_ip_v6,omitempty"`

	// Specifies whether the IPv6 function is enabled for the nic.
	// Defaults to false. Changing this creates a new instance.
	IPv6Enable *bool `json:"ipv6Enable,omitempty" tf:"ipv6_enable,omitempty"`

	// The port ID corresponding to the IP address on that network.
	// schema: Computed
	Port *string `json:"port,omitempty" tf:"port,omitempty"`

	// Specifies whether the ECS processes only traffic that is destined specifically
	// for it. This function is enabled by default but should be disabled if the ECS functions as a SNAT server or has a
	// virtual IP address bound to it.
	SourceDestCheck *bool `json:"sourceDestCheck,omitempty" tf:"source_dest_check,omitempty"`

	// Specifies the network UUID to attach to the instance.
	// Changing this creates a new instance.
	// schema: Required
	UUID *string `json:"uuid,omitempty" tf:"uuid,omitempty"`
}

type NetworkObservation struct {

	// Specifies if this network should be used for provisioning access.
	// Accepts true or false. Defaults to false.
	AccessNetwork *bool `json:"accessNetwork,omitempty" tf:"access_network,omitempty"`

	// Specifies a fixed IPv4 address to be used on this network.
	// Changing this creates a new instance.
	FixedIPV4 *string `json:"fixedIpV4,omitempty" tf:"fixed_ip_v4,omitempty"`

	// The Fixed IPv6 address of the instance on that network.
	// schema: Computed
	FixedIPV6 *string `json:"fixedIpV6,omitempty" tf:"fixed_ip_v6,omitempty"`

	// Specifies whether the IPv6 function is enabled for the nic.
	// Defaults to false. Changing this creates a new instance.
	IPv6Enable *bool `json:"ipv6Enable,omitempty" tf:"ipv6_enable,omitempty"`

	// The MAC address of the NIC on that network.
	Mac *string `json:"mac,omitempty" tf:"mac,omitempty"`

	// The port ID corresponding to the IP address on that network.
	// schema: Computed
	Port *string `json:"port,omitempty" tf:"port,omitempty"`

	// Specifies whether the ECS processes only traffic that is destined specifically
	// for it. This function is enabled by default but should be disabled if the ECS functions as a SNAT server or has a
	// virtual IP address bound to it.
	SourceDestCheck *bool `json:"sourceDestCheck,omitempty" tf:"source_dest_check,omitempty"`

	// Specifies the network UUID to attach to the instance.
	// Changing this creates a new instance.
	// schema: Required
	UUID *string `json:"uuid,omitempty" tf:"uuid,omitempty"`
}

type NetworkParameters struct {

	// Specifies if this network should be used for provisioning access.
	// Accepts true or false. Defaults to false.
	// +kubebuilder:validation:Optional
	AccessNetwork *bool `json:"accessNetwork,omitempty" tf:"access_network,omitempty"`

	// Specifies a fixed IPv4 address to be used on this network.
	// Changing this creates a new instance.
	// +kubebuilder:validation:Optional
	FixedIPV4 *string `json:"fixedIpV4,omitempty" tf:"fixed_ip_v4,omitempty"`

	// The Fixed IPv6 address of the instance on that network.
	// schema: Computed
	// +kubebuilder:validation:Optional
	FixedIPV6 *string `json:"fixedIpV6,omitempty" tf:"fixed_ip_v6,omitempty"`

	// Specifies whether the IPv6 function is enabled for the nic.
	// Defaults to false. Changing this creates a new instance.
	// +kubebuilder:validation:Optional
	IPv6Enable *bool `json:"ipv6Enable,omitempty" tf:"ipv6_enable,omitempty"`

	// The port ID corresponding to the IP address on that network.
	// schema: Computed
	// +kubebuilder:validation:Optional
	Port *string `json:"port,omitempty" tf:"port,omitempty"`

	// Specifies whether the ECS processes only traffic that is destined specifically
	// for it. This function is enabled by default but should be disabled if the ECS functions as a SNAT server or has a
	// virtual IP address bound to it.
	// +kubebuilder:validation:Optional
	SourceDestCheck *bool `json:"sourceDestCheck,omitempty" tf:"source_dest_check,omitempty"`

	// Specifies the network UUID to attach to the instance.
	// Changing this creates a new instance.
	// schema: Required
	// +kubebuilder:validation:Optional
	UUID *string `json:"uuid,omitempty" tf:"uuid,omitempty"`
}

type SchedulerHintsInitParameters struct {

	// Specifies the ID of DeH.
	// This parameter takes effect only when the value of tenancy is dedicated. Changing this creates a new instance.
	DehID *string `json:"dehId,omitempty" tf:"deh_id,omitempty"`

	// schema: Internal
	FaultDomain *string `json:"faultDomain,omitempty" tf:"fault_domain,omitempty"`

	// Specifies a UUID of a Server Group.
	// The instance will be placed into that group. Changing this creates a new instance.
	Group *string `json:"group,omitempty" tf:"group,omitempty"`

	// Specifies the tenancy specifies whether the ECS is to be created on a
	// Dedicated Host
	// (DeH) or in a shared pool. Changing this creates a new instance.
	Tenancy *string `json:"tenancy,omitempty" tf:"tenancy,omitempty"`
}

type SchedulerHintsObservation struct {

	// Specifies the ID of DeH.
	// This parameter takes effect only when the value of tenancy is dedicated. Changing this creates a new instance.
	DehID *string `json:"dehId,omitempty" tf:"deh_id,omitempty"`

	// schema: Internal
	FaultDomain *string `json:"faultDomain,omitempty" tf:"fault_domain,omitempty"`

	// Specifies a UUID of a Server Group.
	// The instance will be placed into that group. Changing this creates a new instance.
	Group *string `json:"group,omitempty" tf:"group,omitempty"`

	// Specifies the tenancy specifies whether the ECS is to be created on a
	// Dedicated Host
	// (DeH) or in a shared pool. Changing this creates a new instance.
	Tenancy *string `json:"tenancy,omitempty" tf:"tenancy,omitempty"`
}

type SchedulerHintsParameters struct {

	// Specifies the ID of DeH.
	// This parameter takes effect only when the value of tenancy is dedicated. Changing this creates a new instance.
	// +kubebuilder:validation:Optional
	DehID *string `json:"dehId,omitempty" tf:"deh_id,omitempty"`

	// schema: Internal
	// +kubebuilder:validation:Optional
	FaultDomain *string `json:"faultDomain,omitempty" tf:"fault_domain,omitempty"`

	// Specifies a UUID of a Server Group.
	// The instance will be placed into that group. Changing this creates a new instance.
	// +kubebuilder:validation:Optional
	Group *string `json:"group,omitempty" tf:"group,omitempty"`

	// Specifies the tenancy specifies whether the ECS is to be created on a
	// Dedicated Host
	// (DeH) or in a shared pool. Changing this creates a new instance.
	// +kubebuilder:validation:Optional
	Tenancy *string `json:"tenancy,omitempty" tf:"tenancy,omitempty"`
}

type VolumeAttachedInitParameters struct {
}

type VolumeAttachedObservation struct {

	// The volume boot index on that attachment.
	BootIndex *float64 `json:"bootIndex,omitempty" tf:"boot_index,omitempty"`

	// Specifies the ID of a KMS key. This is used to encrypt the disk.
	// Changing this creates a new instance.
	KMSKeyID *string `json:"kmsKeyId,omitempty" tf:"kms_key_id,omitempty"`

	// The volume pci address on that attachment.
	PciAddress *string `json:"pciAddress,omitempty" tf:"pci_address,omitempty"`

	// The volume size on that attachment.
	Size *float64 `json:"size,omitempty" tf:"size,omitempty"`

	// The volume type on that attachment.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// The volume ID on that attachment.
	VolumeID *string `json:"volumeId,omitempty" tf:"volume_id,omitempty"`
}

type VolumeAttachedParameters struct {
}

// InstanceSpec defines the desired state of Instance
type InstanceSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     InstanceParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider InstanceInitParameters `json:"initProvider,omitempty"`
}

// InstanceStatus defines the observed state of Instance.
type InstanceStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        InstanceObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Instance is the Schema for the Instances API. ""
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,huaweicloud}
type Instance struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.network) || (has(self.initProvider) && has(self.initProvider.network))",message="spec.forProvider.network is a required parameter"
	Spec   InstanceSpec   `json:"spec"`
	Status InstanceStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// InstanceList contains a list of Instances
type InstanceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Instance `json:"items"`
}

// Repository type metadata.
var (
	Instance_Kind             = "Instance"
	Instance_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Instance_Kind}.String()
	Instance_KindAPIVersion   = Instance_Kind + "." + CRDGroupVersion.String()
	Instance_GroupVersionKind = CRDGroupVersion.WithKind(Instance_Kind)
)

func init() {
	SchemeBuilder.Register(&Instance{}, &InstanceList{})
}
