//go:build !ignore_autogenerated

// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by controller-gen. DO NOT EDIT.

package v1alpha1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AutoLaunchGroup) DeepCopyInto(out *AutoLaunchGroup) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AutoLaunchGroup.
func (in *AutoLaunchGroup) DeepCopy() *AutoLaunchGroup {
	if in == nil {
		return nil
	}
	out := new(AutoLaunchGroup)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *AutoLaunchGroup) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AutoLaunchGroupInitParameters) DeepCopyInto(out *AutoLaunchGroupInitParameters) {
	*out = *in
	if in.AllocationStrategy != nil {
		in, out := &in.AllocationStrategy, &out.AllocationStrategy
		*out = new(string)
		**out = **in
	}
	if in.DeleteInstances != nil {
		in, out := &in.DeleteInstances, &out.DeleteInstances
		*out = new(string)
		**out = **in
	}
	if in.ExcessFulfilledCapacityBehavior != nil {
		in, out := &in.ExcessFulfilledCapacityBehavior, &out.ExcessFulfilledCapacityBehavior
		*out = new(string)
		**out = **in
	}
	if in.InstancesBehaviorWithExpiration != nil {
		in, out := &in.InstancesBehaviorWithExpiration, &out.InstancesBehaviorWithExpiration
		*out = new(string)
		**out = **in
	}
	if in.LaunchTemplateID != nil {
		in, out := &in.LaunchTemplateID, &out.LaunchTemplateID
		*out = new(string)
		**out = **in
	}
	if in.LaunchTemplateVersion != nil {
		in, out := &in.LaunchTemplateVersion, &out.LaunchTemplateVersion
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Overrides != nil {
		in, out := &in.Overrides, &out.Overrides
		*out = make([]OverridesInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Region != nil {
		in, out := &in.Region, &out.Region
		*out = new(string)
		**out = **in
	}
	if in.SpotPrice != nil {
		in, out := &in.SpotPrice, &out.SpotPrice
		*out = new(float64)
		**out = **in
	}
	if in.StableCapacity != nil {
		in, out := &in.StableCapacity, &out.StableCapacity
		*out = new(float64)
		**out = **in
	}
	if in.SupplyOption != nil {
		in, out := &in.SupplyOption, &out.SupplyOption
		*out = new(string)
		**out = **in
	}
	if in.TargetCapacity != nil {
		in, out := &in.TargetCapacity, &out.TargetCapacity
		*out = new(float64)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
	if in.ValidSince != nil {
		in, out := &in.ValidSince, &out.ValidSince
		*out = new(string)
		**out = **in
	}
	if in.ValidUntil != nil {
		in, out := &in.ValidUntil, &out.ValidUntil
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AutoLaunchGroupInitParameters.
func (in *AutoLaunchGroupInitParameters) DeepCopy() *AutoLaunchGroupInitParameters {
	if in == nil {
		return nil
	}
	out := new(AutoLaunchGroupInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AutoLaunchGroupList) DeepCopyInto(out *AutoLaunchGroupList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]AutoLaunchGroup, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AutoLaunchGroupList.
func (in *AutoLaunchGroupList) DeepCopy() *AutoLaunchGroupList {
	if in == nil {
		return nil
	}
	out := new(AutoLaunchGroupList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *AutoLaunchGroupList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AutoLaunchGroupObservation) DeepCopyInto(out *AutoLaunchGroupObservation) {
	*out = *in
	if in.AllocationStrategy != nil {
		in, out := &in.AllocationStrategy, &out.AllocationStrategy
		*out = new(string)
		**out = **in
	}
	if in.CreatedAt != nil {
		in, out := &in.CreatedAt, &out.CreatedAt
		*out = new(string)
		**out = **in
	}
	if in.CurrentCapacity != nil {
		in, out := &in.CurrentCapacity, &out.CurrentCapacity
		*out = new(float64)
		**out = **in
	}
	if in.CurrentStableCapacity != nil {
		in, out := &in.CurrentStableCapacity, &out.CurrentStableCapacity
		*out = new(float64)
		**out = **in
	}
	if in.DeleteInstances != nil {
		in, out := &in.DeleteInstances, &out.DeleteInstances
		*out = new(string)
		**out = **in
	}
	if in.ExcessFulfilledCapacityBehavior != nil {
		in, out := &in.ExcessFulfilledCapacityBehavior, &out.ExcessFulfilledCapacityBehavior
		*out = new(string)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.InstancesBehaviorWithExpiration != nil {
		in, out := &in.InstancesBehaviorWithExpiration, &out.InstancesBehaviorWithExpiration
		*out = new(string)
		**out = **in
	}
	if in.LaunchTemplateID != nil {
		in, out := &in.LaunchTemplateID, &out.LaunchTemplateID
		*out = new(string)
		**out = **in
	}
	if in.LaunchTemplateVersion != nil {
		in, out := &in.LaunchTemplateVersion, &out.LaunchTemplateVersion
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Overrides != nil {
		in, out := &in.Overrides, &out.Overrides
		*out = make([]OverridesObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Region != nil {
		in, out := &in.Region, &out.Region
		*out = new(string)
		**out = **in
	}
	if in.SpotPrice != nil {
		in, out := &in.SpotPrice, &out.SpotPrice
		*out = new(float64)
		**out = **in
	}
	if in.StableCapacity != nil {
		in, out := &in.StableCapacity, &out.StableCapacity
		*out = new(float64)
		**out = **in
	}
	if in.Status != nil {
		in, out := &in.Status, &out.Status
		*out = new(string)
		**out = **in
	}
	if in.SupplyOption != nil {
		in, out := &in.SupplyOption, &out.SupplyOption
		*out = new(string)
		**out = **in
	}
	if in.TargetCapacity != nil {
		in, out := &in.TargetCapacity, &out.TargetCapacity
		*out = new(float64)
		**out = **in
	}
	if in.TaskState != nil {
		in, out := &in.TaskState, &out.TaskState
		*out = new(string)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
	if in.ValidSince != nil {
		in, out := &in.ValidSince, &out.ValidSince
		*out = new(string)
		**out = **in
	}
	if in.ValidUntil != nil {
		in, out := &in.ValidUntil, &out.ValidUntil
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AutoLaunchGroupObservation.
func (in *AutoLaunchGroupObservation) DeepCopy() *AutoLaunchGroupObservation {
	if in == nil {
		return nil
	}
	out := new(AutoLaunchGroupObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AutoLaunchGroupParameters) DeepCopyInto(out *AutoLaunchGroupParameters) {
	*out = *in
	if in.AllocationStrategy != nil {
		in, out := &in.AllocationStrategy, &out.AllocationStrategy
		*out = new(string)
		**out = **in
	}
	if in.DeleteInstances != nil {
		in, out := &in.DeleteInstances, &out.DeleteInstances
		*out = new(string)
		**out = **in
	}
	if in.ExcessFulfilledCapacityBehavior != nil {
		in, out := &in.ExcessFulfilledCapacityBehavior, &out.ExcessFulfilledCapacityBehavior
		*out = new(string)
		**out = **in
	}
	if in.InstancesBehaviorWithExpiration != nil {
		in, out := &in.InstancesBehaviorWithExpiration, &out.InstancesBehaviorWithExpiration
		*out = new(string)
		**out = **in
	}
	if in.LaunchTemplateID != nil {
		in, out := &in.LaunchTemplateID, &out.LaunchTemplateID
		*out = new(string)
		**out = **in
	}
	if in.LaunchTemplateVersion != nil {
		in, out := &in.LaunchTemplateVersion, &out.LaunchTemplateVersion
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Overrides != nil {
		in, out := &in.Overrides, &out.Overrides
		*out = make([]OverridesParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Region != nil {
		in, out := &in.Region, &out.Region
		*out = new(string)
		**out = **in
	}
	if in.SpotPrice != nil {
		in, out := &in.SpotPrice, &out.SpotPrice
		*out = new(float64)
		**out = **in
	}
	if in.StableCapacity != nil {
		in, out := &in.StableCapacity, &out.StableCapacity
		*out = new(float64)
		**out = **in
	}
	if in.SupplyOption != nil {
		in, out := &in.SupplyOption, &out.SupplyOption
		*out = new(string)
		**out = **in
	}
	if in.TargetCapacity != nil {
		in, out := &in.TargetCapacity, &out.TargetCapacity
		*out = new(float64)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
	if in.ValidSince != nil {
		in, out := &in.ValidSince, &out.ValidSince
		*out = new(string)
		**out = **in
	}
	if in.ValidUntil != nil {
		in, out := &in.ValidUntil, &out.ValidUntil
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AutoLaunchGroupParameters.
func (in *AutoLaunchGroupParameters) DeepCopy() *AutoLaunchGroupParameters {
	if in == nil {
		return nil
	}
	out := new(AutoLaunchGroupParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AutoLaunchGroupSpec) DeepCopyInto(out *AutoLaunchGroupSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AutoLaunchGroupSpec.
func (in *AutoLaunchGroupSpec) DeepCopy() *AutoLaunchGroupSpec {
	if in == nil {
		return nil
	}
	out := new(AutoLaunchGroupSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AutoLaunchGroupStatus) DeepCopyInto(out *AutoLaunchGroupStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AutoLaunchGroupStatus.
func (in *AutoLaunchGroupStatus) DeepCopy() *AutoLaunchGroupStatus {
	if in == nil {
		return nil
	}
	out := new(AutoLaunchGroupStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BandwidthInitParameters) DeepCopyInto(out *BandwidthInitParameters) {
	*out = *in
	if in.ChargeMode != nil {
		in, out := &in.ChargeMode, &out.ChargeMode
		*out = new(string)
		**out = **in
	}
	if in.ExtendParam != nil {
		in, out := &in.ExtendParam, &out.ExtendParam
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.ShareType != nil {
		in, out := &in.ShareType, &out.ShareType
		*out = new(string)
		**out = **in
	}
	if in.Size != nil {
		in, out := &in.Size, &out.Size
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BandwidthInitParameters.
func (in *BandwidthInitParameters) DeepCopy() *BandwidthInitParameters {
	if in == nil {
		return nil
	}
	out := new(BandwidthInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BandwidthObservation) DeepCopyInto(out *BandwidthObservation) {
	*out = *in
	if in.ChargeMode != nil {
		in, out := &in.ChargeMode, &out.ChargeMode
		*out = new(string)
		**out = **in
	}
	if in.ExtendParam != nil {
		in, out := &in.ExtendParam, &out.ExtendParam
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.ShareType != nil {
		in, out := &in.ShareType, &out.ShareType
		*out = new(string)
		**out = **in
	}
	if in.Size != nil {
		in, out := &in.Size, &out.Size
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BandwidthObservation.
func (in *BandwidthObservation) DeepCopy() *BandwidthObservation {
	if in == nil {
		return nil
	}
	out := new(BandwidthObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BandwidthParameters) DeepCopyInto(out *BandwidthParameters) {
	*out = *in
	if in.ChargeMode != nil {
		in, out := &in.ChargeMode, &out.ChargeMode
		*out = new(string)
		**out = **in
	}
	if in.ExtendParam != nil {
		in, out := &in.ExtendParam, &out.ExtendParam
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.ShareType != nil {
		in, out := &in.ShareType, &out.ShareType
		*out = new(string)
		**out = **in
	}
	if in.Size != nil {
		in, out := &in.Size, &out.Size
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BandwidthParameters.
func (in *BandwidthParameters) DeepCopy() *BandwidthParameters {
	if in == nil {
		return nil
	}
	out := new(BandwidthParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DataDisksInitParameters) DeepCopyInto(out *DataDisksInitParameters) {
	*out = *in
	if in.DssPoolID != nil {
		in, out := &in.DssPoolID, &out.DssPoolID
		*out = new(string)
		**out = **in
	}
	if in.Iops != nil {
		in, out := &in.Iops, &out.Iops
		*out = new(float64)
		**out = **in
	}
	if in.KMSKeyID != nil {
		in, out := &in.KMSKeyID, &out.KMSKeyID
		*out = new(string)
		**out = **in
	}
	if in.Size != nil {
		in, out := &in.Size, &out.Size
		*out = new(float64)
		**out = **in
	}
	if in.SnapshotID != nil {
		in, out := &in.SnapshotID, &out.SnapshotID
		*out = new(string)
		**out = **in
	}
	if in.Throughput != nil {
		in, out := &in.Throughput, &out.Throughput
		*out = new(float64)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DataDisksInitParameters.
func (in *DataDisksInitParameters) DeepCopy() *DataDisksInitParameters {
	if in == nil {
		return nil
	}
	out := new(DataDisksInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DataDisksObservation) DeepCopyInto(out *DataDisksObservation) {
	*out = *in
	if in.DssPoolID != nil {
		in, out := &in.DssPoolID, &out.DssPoolID
		*out = new(string)
		**out = **in
	}
	if in.Iops != nil {
		in, out := &in.Iops, &out.Iops
		*out = new(float64)
		**out = **in
	}
	if in.KMSKeyID != nil {
		in, out := &in.KMSKeyID, &out.KMSKeyID
		*out = new(string)
		**out = **in
	}
	if in.Size != nil {
		in, out := &in.Size, &out.Size
		*out = new(float64)
		**out = **in
	}
	if in.SnapshotID != nil {
		in, out := &in.SnapshotID, &out.SnapshotID
		*out = new(string)
		**out = **in
	}
	if in.Throughput != nil {
		in, out := &in.Throughput, &out.Throughput
		*out = new(float64)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DataDisksObservation.
func (in *DataDisksObservation) DeepCopy() *DataDisksObservation {
	if in == nil {
		return nil
	}
	out := new(DataDisksObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DataDisksParameters) DeepCopyInto(out *DataDisksParameters) {
	*out = *in
	if in.DssPoolID != nil {
		in, out := &in.DssPoolID, &out.DssPoolID
		*out = new(string)
		**out = **in
	}
	if in.Iops != nil {
		in, out := &in.Iops, &out.Iops
		*out = new(float64)
		**out = **in
	}
	if in.KMSKeyID != nil {
		in, out := &in.KMSKeyID, &out.KMSKeyID
		*out = new(string)
		**out = **in
	}
	if in.Size != nil {
		in, out := &in.Size, &out.Size
		*out = new(float64)
		**out = **in
	}
	if in.SnapshotID != nil {
		in, out := &in.SnapshotID, &out.SnapshotID
		*out = new(string)
		**out = **in
	}
	if in.Throughput != nil {
		in, out := &in.Throughput, &out.Throughput
		*out = new(float64)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DataDisksParameters.
func (in *DataDisksParameters) DeepCopy() *DataDisksParameters {
	if in == nil {
		return nil
	}
	out := new(DataDisksParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *EIPAssociate) DeepCopyInto(out *EIPAssociate) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new EIPAssociate.
func (in *EIPAssociate) DeepCopy() *EIPAssociate {
	if in == nil {
		return nil
	}
	out := new(EIPAssociate)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *EIPAssociate) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *EIPAssociateInitParameters) DeepCopyInto(out *EIPAssociateInitParameters) {
	*out = *in
	if in.BandwidthID != nil {
		in, out := &in.BandwidthID, &out.BandwidthID
		*out = new(string)
		**out = **in
	}
	if in.FixedIP != nil {
		in, out := &in.FixedIP, &out.FixedIP
		*out = new(string)
		**out = **in
	}
	if in.InstanceID != nil {
		in, out := &in.InstanceID, &out.InstanceID
		*out = new(string)
		**out = **in
	}
	if in.InstanceIDRef != nil {
		in, out := &in.InstanceIDRef, &out.InstanceIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.InstanceIDSelector != nil {
		in, out := &in.InstanceIDSelector, &out.InstanceIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.PublicIP != nil {
		in, out := &in.PublicIP, &out.PublicIP
		*out = new(string)
		**out = **in
	}
	if in.Region != nil {
		in, out := &in.Region, &out.Region
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new EIPAssociateInitParameters.
func (in *EIPAssociateInitParameters) DeepCopy() *EIPAssociateInitParameters {
	if in == nil {
		return nil
	}
	out := new(EIPAssociateInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *EIPAssociateList) DeepCopyInto(out *EIPAssociateList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]EIPAssociate, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new EIPAssociateList.
func (in *EIPAssociateList) DeepCopy() *EIPAssociateList {
	if in == nil {
		return nil
	}
	out := new(EIPAssociateList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *EIPAssociateList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *EIPAssociateObservation) DeepCopyInto(out *EIPAssociateObservation) {
	*out = *in
	if in.BandwidthID != nil {
		in, out := &in.BandwidthID, &out.BandwidthID
		*out = new(string)
		**out = **in
	}
	if in.FixedIP != nil {
		in, out := &in.FixedIP, &out.FixedIP
		*out = new(string)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.InstanceID != nil {
		in, out := &in.InstanceID, &out.InstanceID
		*out = new(string)
		**out = **in
	}
	if in.PortID != nil {
		in, out := &in.PortID, &out.PortID
		*out = new(string)
		**out = **in
	}
	if in.PublicIP != nil {
		in, out := &in.PublicIP, &out.PublicIP
		*out = new(string)
		**out = **in
	}
	if in.Region != nil {
		in, out := &in.Region, &out.Region
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new EIPAssociateObservation.
func (in *EIPAssociateObservation) DeepCopy() *EIPAssociateObservation {
	if in == nil {
		return nil
	}
	out := new(EIPAssociateObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *EIPAssociateParameters) DeepCopyInto(out *EIPAssociateParameters) {
	*out = *in
	if in.BandwidthID != nil {
		in, out := &in.BandwidthID, &out.BandwidthID
		*out = new(string)
		**out = **in
	}
	if in.FixedIP != nil {
		in, out := &in.FixedIP, &out.FixedIP
		*out = new(string)
		**out = **in
	}
	if in.InstanceID != nil {
		in, out := &in.InstanceID, &out.InstanceID
		*out = new(string)
		**out = **in
	}
	if in.InstanceIDRef != nil {
		in, out := &in.InstanceIDRef, &out.InstanceIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.InstanceIDSelector != nil {
		in, out := &in.InstanceIDSelector, &out.InstanceIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.PublicIP != nil {
		in, out := &in.PublicIP, &out.PublicIP
		*out = new(string)
		**out = **in
	}
	if in.Region != nil {
		in, out := &in.Region, &out.Region
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new EIPAssociateParameters.
func (in *EIPAssociateParameters) DeepCopy() *EIPAssociateParameters {
	if in == nil {
		return nil
	}
	out := new(EIPAssociateParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *EIPAssociateSpec) DeepCopyInto(out *EIPAssociateSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new EIPAssociateSpec.
func (in *EIPAssociateSpec) DeepCopy() *EIPAssociateSpec {
	if in == nil {
		return nil
	}
	out := new(EIPAssociateSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *EIPAssociateStatus) DeepCopyInto(out *EIPAssociateStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new EIPAssociateStatus.
func (in *EIPAssociateStatus) DeepCopy() *EIPAssociateStatus {
	if in == nil {
		return nil
	}
	out := new(EIPAssociateStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Instance) DeepCopyInto(out *Instance) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Instance.
func (in *Instance) DeepCopy() *Instance {
	if in == nil {
		return nil
	}
	out := new(Instance)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *Instance) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *InstanceInitParameters) DeepCopyInto(out *InstanceInitParameters) {
	*out = *in
	if in.AdminPassSecretRef != nil {
		in, out := &in.AdminPassSecretRef, &out.AdminPassSecretRef
		*out = new(v1.SecretKeySelector)
		**out = **in
	}
	if in.AgencyName != nil {
		in, out := &in.AgencyName, &out.AgencyName
		*out = new(string)
		**out = **in
	}
	if in.AgentList != nil {
		in, out := &in.AgentList, &out.AgentList
		*out = new(string)
		**out = **in
	}
	if in.AutoPay != nil {
		in, out := &in.AutoPay, &out.AutoPay
		*out = new(string)
		**out = **in
	}
	if in.AutoRenew != nil {
		in, out := &in.AutoRenew, &out.AutoRenew
		*out = new(string)
		**out = **in
	}
	if in.AutoTerminateTime != nil {
		in, out := &in.AutoTerminateTime, &out.AutoTerminateTime
		*out = new(string)
		**out = **in
	}
	if in.AvailabilityZone != nil {
		in, out := &in.AvailabilityZone, &out.AvailabilityZone
		*out = new(string)
		**out = **in
	}
	if in.Bandwidth != nil {
		in, out := &in.Bandwidth, &out.Bandwidth
		*out = make([]BandwidthInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.ChargingMode != nil {
		in, out := &in.ChargingMode, &out.ChargingMode
		*out = new(string)
		**out = **in
	}
	if in.DataDisks != nil {
		in, out := &in.DataDisks, &out.DataDisks
		*out = make([]DataDisksInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.DeleteDisksOnTermination != nil {
		in, out := &in.DeleteDisksOnTermination, &out.DeleteDisksOnTermination
		*out = new(bool)
		**out = **in
	}
	if in.DeleteEIPOnTermination != nil {
		in, out := &in.DeleteEIPOnTermination, &out.DeleteEIPOnTermination
		*out = new(bool)
		**out = **in
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.EIPID != nil {
		in, out := &in.EIPID, &out.EIPID
		*out = new(string)
		**out = **in
	}
	if in.EIPType != nil {
		in, out := &in.EIPType, &out.EIPType
		*out = new(string)
		**out = **in
	}
	if in.EnterpriseProjectID != nil {
		in, out := &in.EnterpriseProjectID, &out.EnterpriseProjectID
		*out = new(string)
		**out = **in
	}
	if in.FlavorID != nil {
		in, out := &in.FlavorID, &out.FlavorID
		*out = new(string)
		**out = **in
	}
	if in.FlavorName != nil {
		in, out := &in.FlavorName, &out.FlavorName
		*out = new(string)
		**out = **in
	}
	if in.Hostname != nil {
		in, out := &in.Hostname, &out.Hostname
		*out = new(string)
		**out = **in
	}
	if in.ImageID != nil {
		in, out := &in.ImageID, &out.ImageID
		*out = new(string)
		**out = **in
	}
	if in.ImageName != nil {
		in, out := &in.ImageName, &out.ImageName
		*out = new(string)
		**out = **in
	}
	if in.KeyPair != nil {
		in, out := &in.KeyPair, &out.KeyPair
		*out = new(string)
		**out = **in
	}
	if in.Metadata != nil {
		in, out := &in.Metadata, &out.Metadata
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Network != nil {
		in, out := &in.Network, &out.Network
		*out = make([]NetworkInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Period != nil {
		in, out := &in.Period, &out.Period
		*out = new(float64)
		**out = **in
	}
	if in.PeriodUnit != nil {
		in, out := &in.PeriodUnit, &out.PeriodUnit
		*out = new(string)
		**out = **in
	}
	if in.PowerAction != nil {
		in, out := &in.PowerAction, &out.PowerAction
		*out = new(string)
		**out = **in
	}
	if in.PrivateKeySecretRef != nil {
		in, out := &in.PrivateKeySecretRef, &out.PrivateKeySecretRef
		*out = new(v1.SecretKeySelector)
		**out = **in
	}
	if in.Region != nil {
		in, out := &in.Region, &out.Region
		*out = new(string)
		**out = **in
	}
	if in.SchedulerHints != nil {
		in, out := &in.SchedulerHints, &out.SchedulerHints
		*out = make([]SchedulerHintsInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.SecurityGroupIds != nil {
		in, out := &in.SecurityGroupIds, &out.SecurityGroupIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.SecurityGroups != nil {
		in, out := &in.SecurityGroups, &out.SecurityGroups
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.SpotDuration != nil {
		in, out := &in.SpotDuration, &out.SpotDuration
		*out = new(float64)
		**out = **in
	}
	if in.SpotDurationCount != nil {
		in, out := &in.SpotDurationCount, &out.SpotDurationCount
		*out = new(float64)
		**out = **in
	}
	if in.SpotMaximumPrice != nil {
		in, out := &in.SpotMaximumPrice, &out.SpotMaximumPrice
		*out = new(string)
		**out = **in
	}
	if in.StopBeforeDestroy != nil {
		in, out := &in.StopBeforeDestroy, &out.StopBeforeDestroy
		*out = new(bool)
		**out = **in
	}
	if in.SystemDiskDssPoolID != nil {
		in, out := &in.SystemDiskDssPoolID, &out.SystemDiskDssPoolID
		*out = new(string)
		**out = **in
	}
	if in.SystemDiskIops != nil {
		in, out := &in.SystemDiskIops, &out.SystemDiskIops
		*out = new(float64)
		**out = **in
	}
	if in.SystemDiskKMSKeyID != nil {
		in, out := &in.SystemDiskKMSKeyID, &out.SystemDiskKMSKeyID
		*out = new(string)
		**out = **in
	}
	if in.SystemDiskSize != nil {
		in, out := &in.SystemDiskSize, &out.SystemDiskSize
		*out = new(float64)
		**out = **in
	}
	if in.SystemDiskThroughput != nil {
		in, out := &in.SystemDiskThroughput, &out.SystemDiskThroughput
		*out = new(float64)
		**out = **in
	}
	if in.SystemDiskType != nil {
		in, out := &in.SystemDiskType, &out.SystemDiskType
		*out = new(string)
		**out = **in
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.UserData != nil {
		in, out := &in.UserData, &out.UserData
		*out = new(string)
		**out = **in
	}
	if in.UserID != nil {
		in, out := &in.UserID, &out.UserID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new InstanceInitParameters.
func (in *InstanceInitParameters) DeepCopy() *InstanceInitParameters {
	if in == nil {
		return nil
	}
	out := new(InstanceInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *InstanceList) DeepCopyInto(out *InstanceList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]Instance, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new InstanceList.
func (in *InstanceList) DeepCopy() *InstanceList {
	if in == nil {
		return nil
	}
	out := new(InstanceList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *InstanceList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *InstanceObservation) DeepCopyInto(out *InstanceObservation) {
	*out = *in
	if in.AccessIPV4 != nil {
		in, out := &in.AccessIPV4, &out.AccessIPV4
		*out = new(string)
		**out = **in
	}
	if in.AccessIPV6 != nil {
		in, out := &in.AccessIPV6, &out.AccessIPV6
		*out = new(string)
		**out = **in
	}
	if in.AgencyName != nil {
		in, out := &in.AgencyName, &out.AgencyName
		*out = new(string)
		**out = **in
	}
	if in.AgentList != nil {
		in, out := &in.AgentList, &out.AgentList
		*out = new(string)
		**out = **in
	}
	if in.AutoPay != nil {
		in, out := &in.AutoPay, &out.AutoPay
		*out = new(string)
		**out = **in
	}
	if in.AutoRenew != nil {
		in, out := &in.AutoRenew, &out.AutoRenew
		*out = new(string)
		**out = **in
	}
	if in.AutoTerminateTime != nil {
		in, out := &in.AutoTerminateTime, &out.AutoTerminateTime
		*out = new(string)
		**out = **in
	}
	if in.AvailabilityZone != nil {
		in, out := &in.AvailabilityZone, &out.AvailabilityZone
		*out = new(string)
		**out = **in
	}
	if in.Bandwidth != nil {
		in, out := &in.Bandwidth, &out.Bandwidth
		*out = make([]BandwidthObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.ChargingMode != nil {
		in, out := &in.ChargingMode, &out.ChargingMode
		*out = new(string)
		**out = **in
	}
	if in.CreatedAt != nil {
		in, out := &in.CreatedAt, &out.CreatedAt
		*out = new(string)
		**out = **in
	}
	if in.DataDisks != nil {
		in, out := &in.DataDisks, &out.DataDisks
		*out = make([]DataDisksObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.DeleteDisksOnTermination != nil {
		in, out := &in.DeleteDisksOnTermination, &out.DeleteDisksOnTermination
		*out = new(bool)
		**out = **in
	}
	if in.DeleteEIPOnTermination != nil {
		in, out := &in.DeleteEIPOnTermination, &out.DeleteEIPOnTermination
		*out = new(bool)
		**out = **in
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.EIPID != nil {
		in, out := &in.EIPID, &out.EIPID
		*out = new(string)
		**out = **in
	}
	if in.EIPType != nil {
		in, out := &in.EIPType, &out.EIPType
		*out = new(string)
		**out = **in
	}
	if in.EnterpriseProjectID != nil {
		in, out := &in.EnterpriseProjectID, &out.EnterpriseProjectID
		*out = new(string)
		**out = **in
	}
	if in.ExpiredTime != nil {
		in, out := &in.ExpiredTime, &out.ExpiredTime
		*out = new(string)
		**out = **in
	}
	if in.FlavorID != nil {
		in, out := &in.FlavorID, &out.FlavorID
		*out = new(string)
		**out = **in
	}
	if in.FlavorName != nil {
		in, out := &in.FlavorName, &out.FlavorName
		*out = new(string)
		**out = **in
	}
	if in.Hostname != nil {
		in, out := &in.Hostname, &out.Hostname
		*out = new(string)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.ImageID != nil {
		in, out := &in.ImageID, &out.ImageID
		*out = new(string)
		**out = **in
	}
	if in.ImageName != nil {
		in, out := &in.ImageName, &out.ImageName
		*out = new(string)
		**out = **in
	}
	if in.KeyPair != nil {
		in, out := &in.KeyPair, &out.KeyPair
		*out = new(string)
		**out = **in
	}
	if in.Metadata != nil {
		in, out := &in.Metadata, &out.Metadata
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Network != nil {
		in, out := &in.Network, &out.Network
		*out = make([]NetworkObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Period != nil {
		in, out := &in.Period, &out.Period
		*out = new(float64)
		**out = **in
	}
	if in.PeriodUnit != nil {
		in, out := &in.PeriodUnit, &out.PeriodUnit
		*out = new(string)
		**out = **in
	}
	if in.PowerAction != nil {
		in, out := &in.PowerAction, &out.PowerAction
		*out = new(string)
		**out = **in
	}
	if in.PublicIP != nil {
		in, out := &in.PublicIP, &out.PublicIP
		*out = new(string)
		**out = **in
	}
	if in.Region != nil {
		in, out := &in.Region, &out.Region
		*out = new(string)
		**out = **in
	}
	if in.SchedulerHints != nil {
		in, out := &in.SchedulerHints, &out.SchedulerHints
		*out = make([]SchedulerHintsObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.SecurityGroupIds != nil {
		in, out := &in.SecurityGroupIds, &out.SecurityGroupIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.SecurityGroups != nil {
		in, out := &in.SecurityGroups, &out.SecurityGroups
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.SpotDuration != nil {
		in, out := &in.SpotDuration, &out.SpotDuration
		*out = new(float64)
		**out = **in
	}
	if in.SpotDurationCount != nil {
		in, out := &in.SpotDurationCount, &out.SpotDurationCount
		*out = new(float64)
		**out = **in
	}
	if in.SpotMaximumPrice != nil {
		in, out := &in.SpotMaximumPrice, &out.SpotMaximumPrice
		*out = new(string)
		**out = **in
	}
	if in.Status != nil {
		in, out := &in.Status, &out.Status
		*out = new(string)
		**out = **in
	}
	if in.StopBeforeDestroy != nil {
		in, out := &in.StopBeforeDestroy, &out.StopBeforeDestroy
		*out = new(bool)
		**out = **in
	}
	if in.SystemDiskDssPoolID != nil {
		in, out := &in.SystemDiskDssPoolID, &out.SystemDiskDssPoolID
		*out = new(string)
		**out = **in
	}
	if in.SystemDiskID != nil {
		in, out := &in.SystemDiskID, &out.SystemDiskID
		*out = new(string)
		**out = **in
	}
	if in.SystemDiskIops != nil {
		in, out := &in.SystemDiskIops, &out.SystemDiskIops
		*out = new(float64)
		**out = **in
	}
	if in.SystemDiskKMSKeyID != nil {
		in, out := &in.SystemDiskKMSKeyID, &out.SystemDiskKMSKeyID
		*out = new(string)
		**out = **in
	}
	if in.SystemDiskSize != nil {
		in, out := &in.SystemDiskSize, &out.SystemDiskSize
		*out = new(float64)
		**out = **in
	}
	if in.SystemDiskThroughput != nil {
		in, out := &in.SystemDiskThroughput, &out.SystemDiskThroughput
		*out = new(float64)
		**out = **in
	}
	if in.SystemDiskType != nil {
		in, out := &in.SystemDiskType, &out.SystemDiskType
		*out = new(string)
		**out = **in
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.UpdatedAt != nil {
		in, out := &in.UpdatedAt, &out.UpdatedAt
		*out = new(string)
		**out = **in
	}
	if in.UserData != nil {
		in, out := &in.UserData, &out.UserData
		*out = new(string)
		**out = **in
	}
	if in.UserID != nil {
		in, out := &in.UserID, &out.UserID
		*out = new(string)
		**out = **in
	}
	if in.VolumeAttached != nil {
		in, out := &in.VolumeAttached, &out.VolumeAttached
		*out = make([]VolumeAttachedObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new InstanceObservation.
func (in *InstanceObservation) DeepCopy() *InstanceObservation {
	if in == nil {
		return nil
	}
	out := new(InstanceObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *InstanceParameters) DeepCopyInto(out *InstanceParameters) {
	*out = *in
	if in.AdminPassSecretRef != nil {
		in, out := &in.AdminPassSecretRef, &out.AdminPassSecretRef
		*out = new(v1.SecretKeySelector)
		**out = **in
	}
	if in.AgencyName != nil {
		in, out := &in.AgencyName, &out.AgencyName
		*out = new(string)
		**out = **in
	}
	if in.AgentList != nil {
		in, out := &in.AgentList, &out.AgentList
		*out = new(string)
		**out = **in
	}
	if in.AutoPay != nil {
		in, out := &in.AutoPay, &out.AutoPay
		*out = new(string)
		**out = **in
	}
	if in.AutoRenew != nil {
		in, out := &in.AutoRenew, &out.AutoRenew
		*out = new(string)
		**out = **in
	}
	if in.AutoTerminateTime != nil {
		in, out := &in.AutoTerminateTime, &out.AutoTerminateTime
		*out = new(string)
		**out = **in
	}
	if in.AvailabilityZone != nil {
		in, out := &in.AvailabilityZone, &out.AvailabilityZone
		*out = new(string)
		**out = **in
	}
	if in.Bandwidth != nil {
		in, out := &in.Bandwidth, &out.Bandwidth
		*out = make([]BandwidthParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.ChargingMode != nil {
		in, out := &in.ChargingMode, &out.ChargingMode
		*out = new(string)
		**out = **in
	}
	if in.DataDisks != nil {
		in, out := &in.DataDisks, &out.DataDisks
		*out = make([]DataDisksParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.DeleteDisksOnTermination != nil {
		in, out := &in.DeleteDisksOnTermination, &out.DeleteDisksOnTermination
		*out = new(bool)
		**out = **in
	}
	if in.DeleteEIPOnTermination != nil {
		in, out := &in.DeleteEIPOnTermination, &out.DeleteEIPOnTermination
		*out = new(bool)
		**out = **in
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.EIPID != nil {
		in, out := &in.EIPID, &out.EIPID
		*out = new(string)
		**out = **in
	}
	if in.EIPType != nil {
		in, out := &in.EIPType, &out.EIPType
		*out = new(string)
		**out = **in
	}
	if in.EnterpriseProjectID != nil {
		in, out := &in.EnterpriseProjectID, &out.EnterpriseProjectID
		*out = new(string)
		**out = **in
	}
	if in.FlavorID != nil {
		in, out := &in.FlavorID, &out.FlavorID
		*out = new(string)
		**out = **in
	}
	if in.FlavorName != nil {
		in, out := &in.FlavorName, &out.FlavorName
		*out = new(string)
		**out = **in
	}
	if in.Hostname != nil {
		in, out := &in.Hostname, &out.Hostname
		*out = new(string)
		**out = **in
	}
	if in.ImageID != nil {
		in, out := &in.ImageID, &out.ImageID
		*out = new(string)
		**out = **in
	}
	if in.ImageName != nil {
		in, out := &in.ImageName, &out.ImageName
		*out = new(string)
		**out = **in
	}
	if in.KeyPair != nil {
		in, out := &in.KeyPair, &out.KeyPair
		*out = new(string)
		**out = **in
	}
	if in.Metadata != nil {
		in, out := &in.Metadata, &out.Metadata
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Network != nil {
		in, out := &in.Network, &out.Network
		*out = make([]NetworkParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Period != nil {
		in, out := &in.Period, &out.Period
		*out = new(float64)
		**out = **in
	}
	if in.PeriodUnit != nil {
		in, out := &in.PeriodUnit, &out.PeriodUnit
		*out = new(string)
		**out = **in
	}
	if in.PowerAction != nil {
		in, out := &in.PowerAction, &out.PowerAction
		*out = new(string)
		**out = **in
	}
	if in.PrivateKeySecretRef != nil {
		in, out := &in.PrivateKeySecretRef, &out.PrivateKeySecretRef
		*out = new(v1.SecretKeySelector)
		**out = **in
	}
	if in.Region != nil {
		in, out := &in.Region, &out.Region
		*out = new(string)
		**out = **in
	}
	if in.SchedulerHints != nil {
		in, out := &in.SchedulerHints, &out.SchedulerHints
		*out = make([]SchedulerHintsParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.SecurityGroupIds != nil {
		in, out := &in.SecurityGroupIds, &out.SecurityGroupIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.SecurityGroups != nil {
		in, out := &in.SecurityGroups, &out.SecurityGroups
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.SpotDuration != nil {
		in, out := &in.SpotDuration, &out.SpotDuration
		*out = new(float64)
		**out = **in
	}
	if in.SpotDurationCount != nil {
		in, out := &in.SpotDurationCount, &out.SpotDurationCount
		*out = new(float64)
		**out = **in
	}
	if in.SpotMaximumPrice != nil {
		in, out := &in.SpotMaximumPrice, &out.SpotMaximumPrice
		*out = new(string)
		**out = **in
	}
	if in.StopBeforeDestroy != nil {
		in, out := &in.StopBeforeDestroy, &out.StopBeforeDestroy
		*out = new(bool)
		**out = **in
	}
	if in.SystemDiskDssPoolID != nil {
		in, out := &in.SystemDiskDssPoolID, &out.SystemDiskDssPoolID
		*out = new(string)
		**out = **in
	}
	if in.SystemDiskIops != nil {
		in, out := &in.SystemDiskIops, &out.SystemDiskIops
		*out = new(float64)
		**out = **in
	}
	if in.SystemDiskKMSKeyID != nil {
		in, out := &in.SystemDiskKMSKeyID, &out.SystemDiskKMSKeyID
		*out = new(string)
		**out = **in
	}
	if in.SystemDiskSize != nil {
		in, out := &in.SystemDiskSize, &out.SystemDiskSize
		*out = new(float64)
		**out = **in
	}
	if in.SystemDiskThroughput != nil {
		in, out := &in.SystemDiskThroughput, &out.SystemDiskThroughput
		*out = new(float64)
		**out = **in
	}
	if in.SystemDiskType != nil {
		in, out := &in.SystemDiskType, &out.SystemDiskType
		*out = new(string)
		**out = **in
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.UserData != nil {
		in, out := &in.UserData, &out.UserData
		*out = new(string)
		**out = **in
	}
	if in.UserID != nil {
		in, out := &in.UserID, &out.UserID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new InstanceParameters.
func (in *InstanceParameters) DeepCopy() *InstanceParameters {
	if in == nil {
		return nil
	}
	out := new(InstanceParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *InstanceSpec) DeepCopyInto(out *InstanceSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new InstanceSpec.
func (in *InstanceSpec) DeepCopy() *InstanceSpec {
	if in == nil {
		return nil
	}
	out := new(InstanceSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *InstanceStatus) DeepCopyInto(out *InstanceStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new InstanceStatus.
func (in *InstanceStatus) DeepCopy() *InstanceStatus {
	if in == nil {
		return nil
	}
	out := new(InstanceStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *InterfaceAttach) DeepCopyInto(out *InterfaceAttach) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new InterfaceAttach.
func (in *InterfaceAttach) DeepCopy() *InterfaceAttach {
	if in == nil {
		return nil
	}
	out := new(InterfaceAttach)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *InterfaceAttach) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *InterfaceAttachInitParameters) DeepCopyInto(out *InterfaceAttachInitParameters) {
	*out = *in
	if in.FixedIP != nil {
		in, out := &in.FixedIP, &out.FixedIP
		*out = new(string)
		**out = **in
	}
	if in.IPv6BandwidthID != nil {
		in, out := &in.IPv6BandwidthID, &out.IPv6BandwidthID
		*out = new(string)
		**out = **in
	}
	if in.IPv6Enable != nil {
		in, out := &in.IPv6Enable, &out.IPv6Enable
		*out = new(bool)
		**out = **in
	}
	if in.InstanceID != nil {
		in, out := &in.InstanceID, &out.InstanceID
		*out = new(string)
		**out = **in
	}
	if in.InstanceIDRef != nil {
		in, out := &in.InstanceIDRef, &out.InstanceIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.InstanceIDSelector != nil {
		in, out := &in.InstanceIDSelector, &out.InstanceIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.NetworkID != nil {
		in, out := &in.NetworkID, &out.NetworkID
		*out = new(string)
		**out = **in
	}
	if in.PortID != nil {
		in, out := &in.PortID, &out.PortID
		*out = new(string)
		**out = **in
	}
	if in.Region != nil {
		in, out := &in.Region, &out.Region
		*out = new(string)
		**out = **in
	}
	if in.SecurityGroupIds != nil {
		in, out := &in.SecurityGroupIds, &out.SecurityGroupIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.SourceDestCheck != nil {
		in, out := &in.SourceDestCheck, &out.SourceDestCheck
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new InterfaceAttachInitParameters.
func (in *InterfaceAttachInitParameters) DeepCopy() *InterfaceAttachInitParameters {
	if in == nil {
		return nil
	}
	out := new(InterfaceAttachInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *InterfaceAttachList) DeepCopyInto(out *InterfaceAttachList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]InterfaceAttach, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new InterfaceAttachList.
func (in *InterfaceAttachList) DeepCopy() *InterfaceAttachList {
	if in == nil {
		return nil
	}
	out := new(InterfaceAttachList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *InterfaceAttachList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *InterfaceAttachObservation) DeepCopyInto(out *InterfaceAttachObservation) {
	*out = *in
	if in.FixedIP != nil {
		in, out := &in.FixedIP, &out.FixedIP
		*out = new(string)
		**out = **in
	}
	if in.FixedIPv6 != nil {
		in, out := &in.FixedIPv6, &out.FixedIPv6
		*out = new(string)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.IPv6BandwidthID != nil {
		in, out := &in.IPv6BandwidthID, &out.IPv6BandwidthID
		*out = new(string)
		**out = **in
	}
	if in.IPv6Enable != nil {
		in, out := &in.IPv6Enable, &out.IPv6Enable
		*out = new(bool)
		**out = **in
	}
	if in.InstanceID != nil {
		in, out := &in.InstanceID, &out.InstanceID
		*out = new(string)
		**out = **in
	}
	if in.Mac != nil {
		in, out := &in.Mac, &out.Mac
		*out = new(string)
		**out = **in
	}
	if in.NetworkID != nil {
		in, out := &in.NetworkID, &out.NetworkID
		*out = new(string)
		**out = **in
	}
	if in.PortID != nil {
		in, out := &in.PortID, &out.PortID
		*out = new(string)
		**out = **in
	}
	if in.Region != nil {
		in, out := &in.Region, &out.Region
		*out = new(string)
		**out = **in
	}
	if in.SecurityGroupIds != nil {
		in, out := &in.SecurityGroupIds, &out.SecurityGroupIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.SourceDestCheck != nil {
		in, out := &in.SourceDestCheck, &out.SourceDestCheck
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new InterfaceAttachObservation.
func (in *InterfaceAttachObservation) DeepCopy() *InterfaceAttachObservation {
	if in == nil {
		return nil
	}
	out := new(InterfaceAttachObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *InterfaceAttachParameters) DeepCopyInto(out *InterfaceAttachParameters) {
	*out = *in
	if in.FixedIP != nil {
		in, out := &in.FixedIP, &out.FixedIP
		*out = new(string)
		**out = **in
	}
	if in.IPv6BandwidthID != nil {
		in, out := &in.IPv6BandwidthID, &out.IPv6BandwidthID
		*out = new(string)
		**out = **in
	}
	if in.IPv6Enable != nil {
		in, out := &in.IPv6Enable, &out.IPv6Enable
		*out = new(bool)
		**out = **in
	}
	if in.InstanceID != nil {
		in, out := &in.InstanceID, &out.InstanceID
		*out = new(string)
		**out = **in
	}
	if in.InstanceIDRef != nil {
		in, out := &in.InstanceIDRef, &out.InstanceIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.InstanceIDSelector != nil {
		in, out := &in.InstanceIDSelector, &out.InstanceIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.NetworkID != nil {
		in, out := &in.NetworkID, &out.NetworkID
		*out = new(string)
		**out = **in
	}
	if in.PortID != nil {
		in, out := &in.PortID, &out.PortID
		*out = new(string)
		**out = **in
	}
	if in.Region != nil {
		in, out := &in.Region, &out.Region
		*out = new(string)
		**out = **in
	}
	if in.SecurityGroupIds != nil {
		in, out := &in.SecurityGroupIds, &out.SecurityGroupIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.SourceDestCheck != nil {
		in, out := &in.SourceDestCheck, &out.SourceDestCheck
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new InterfaceAttachParameters.
func (in *InterfaceAttachParameters) DeepCopy() *InterfaceAttachParameters {
	if in == nil {
		return nil
	}
	out := new(InterfaceAttachParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *InterfaceAttachSpec) DeepCopyInto(out *InterfaceAttachSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new InterfaceAttachSpec.
func (in *InterfaceAttachSpec) DeepCopy() *InterfaceAttachSpec {
	if in == nil {
		return nil
	}
	out := new(InterfaceAttachSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *InterfaceAttachStatus) DeepCopyInto(out *InterfaceAttachStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new InterfaceAttachStatus.
func (in *InterfaceAttachStatus) DeepCopy() *InterfaceAttachStatus {
	if in == nil {
		return nil
	}
	out := new(InterfaceAttachStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NetworkInitParameters) DeepCopyInto(out *NetworkInitParameters) {
	*out = *in
	if in.AccessNetwork != nil {
		in, out := &in.AccessNetwork, &out.AccessNetwork
		*out = new(bool)
		**out = **in
	}
	if in.FixedIPV4 != nil {
		in, out := &in.FixedIPV4, &out.FixedIPV4
		*out = new(string)
		**out = **in
	}
	if in.FixedIPV6 != nil {
		in, out := &in.FixedIPV6, &out.FixedIPV6
		*out = new(string)
		**out = **in
	}
	if in.IPv6Enable != nil {
		in, out := &in.IPv6Enable, &out.IPv6Enable
		*out = new(bool)
		**out = **in
	}
	if in.Port != nil {
		in, out := &in.Port, &out.Port
		*out = new(string)
		**out = **in
	}
	if in.SourceDestCheck != nil {
		in, out := &in.SourceDestCheck, &out.SourceDestCheck
		*out = new(bool)
		**out = **in
	}
	if in.UUID != nil {
		in, out := &in.UUID, &out.UUID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NetworkInitParameters.
func (in *NetworkInitParameters) DeepCopy() *NetworkInitParameters {
	if in == nil {
		return nil
	}
	out := new(NetworkInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NetworkObservation) DeepCopyInto(out *NetworkObservation) {
	*out = *in
	if in.AccessNetwork != nil {
		in, out := &in.AccessNetwork, &out.AccessNetwork
		*out = new(bool)
		**out = **in
	}
	if in.FixedIPV4 != nil {
		in, out := &in.FixedIPV4, &out.FixedIPV4
		*out = new(string)
		**out = **in
	}
	if in.FixedIPV6 != nil {
		in, out := &in.FixedIPV6, &out.FixedIPV6
		*out = new(string)
		**out = **in
	}
	if in.IPv6Enable != nil {
		in, out := &in.IPv6Enable, &out.IPv6Enable
		*out = new(bool)
		**out = **in
	}
	if in.Mac != nil {
		in, out := &in.Mac, &out.Mac
		*out = new(string)
		**out = **in
	}
	if in.Port != nil {
		in, out := &in.Port, &out.Port
		*out = new(string)
		**out = **in
	}
	if in.SourceDestCheck != nil {
		in, out := &in.SourceDestCheck, &out.SourceDestCheck
		*out = new(bool)
		**out = **in
	}
	if in.UUID != nil {
		in, out := &in.UUID, &out.UUID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NetworkObservation.
func (in *NetworkObservation) DeepCopy() *NetworkObservation {
	if in == nil {
		return nil
	}
	out := new(NetworkObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NetworkParameters) DeepCopyInto(out *NetworkParameters) {
	*out = *in
	if in.AccessNetwork != nil {
		in, out := &in.AccessNetwork, &out.AccessNetwork
		*out = new(bool)
		**out = **in
	}
	if in.FixedIPV4 != nil {
		in, out := &in.FixedIPV4, &out.FixedIPV4
		*out = new(string)
		**out = **in
	}
	if in.FixedIPV6 != nil {
		in, out := &in.FixedIPV6, &out.FixedIPV6
		*out = new(string)
		**out = **in
	}
	if in.IPv6Enable != nil {
		in, out := &in.IPv6Enable, &out.IPv6Enable
		*out = new(bool)
		**out = **in
	}
	if in.Port != nil {
		in, out := &in.Port, &out.Port
		*out = new(string)
		**out = **in
	}
	if in.SourceDestCheck != nil {
		in, out := &in.SourceDestCheck, &out.SourceDestCheck
		*out = new(bool)
		**out = **in
	}
	if in.UUID != nil {
		in, out := &in.UUID, &out.UUID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NetworkParameters.
func (in *NetworkParameters) DeepCopy() *NetworkParameters {
	if in == nil {
		return nil
	}
	out := new(NetworkParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *OverridesInitParameters) DeepCopyInto(out *OverridesInitParameters) {
	*out = *in
	if in.AvailabilityZone != nil {
		in, out := &in.AvailabilityZone, &out.AvailabilityZone
		*out = new(string)
		**out = **in
	}
	if in.FlavorID != nil {
		in, out := &in.FlavorID, &out.FlavorID
		*out = new(string)
		**out = **in
	}
	if in.Priority != nil {
		in, out := &in.Priority, &out.Priority
		*out = new(float64)
		**out = **in
	}
	if in.SpotPrice != nil {
		in, out := &in.SpotPrice, &out.SpotPrice
		*out = new(float64)
		**out = **in
	}
	if in.WeightedCapacity != nil {
		in, out := &in.WeightedCapacity, &out.WeightedCapacity
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new OverridesInitParameters.
func (in *OverridesInitParameters) DeepCopy() *OverridesInitParameters {
	if in == nil {
		return nil
	}
	out := new(OverridesInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *OverridesObservation) DeepCopyInto(out *OverridesObservation) {
	*out = *in
	if in.AvailabilityZone != nil {
		in, out := &in.AvailabilityZone, &out.AvailabilityZone
		*out = new(string)
		**out = **in
	}
	if in.FlavorID != nil {
		in, out := &in.FlavorID, &out.FlavorID
		*out = new(string)
		**out = **in
	}
	if in.Priority != nil {
		in, out := &in.Priority, &out.Priority
		*out = new(float64)
		**out = **in
	}
	if in.SpotPrice != nil {
		in, out := &in.SpotPrice, &out.SpotPrice
		*out = new(float64)
		**out = **in
	}
	if in.WeightedCapacity != nil {
		in, out := &in.WeightedCapacity, &out.WeightedCapacity
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new OverridesObservation.
func (in *OverridesObservation) DeepCopy() *OverridesObservation {
	if in == nil {
		return nil
	}
	out := new(OverridesObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *OverridesParameters) DeepCopyInto(out *OverridesParameters) {
	*out = *in
	if in.AvailabilityZone != nil {
		in, out := &in.AvailabilityZone, &out.AvailabilityZone
		*out = new(string)
		**out = **in
	}
	if in.FlavorID != nil {
		in, out := &in.FlavorID, &out.FlavorID
		*out = new(string)
		**out = **in
	}
	if in.Priority != nil {
		in, out := &in.Priority, &out.Priority
		*out = new(float64)
		**out = **in
	}
	if in.SpotPrice != nil {
		in, out := &in.SpotPrice, &out.SpotPrice
		*out = new(float64)
		**out = **in
	}
	if in.WeightedCapacity != nil {
		in, out := &in.WeightedCapacity, &out.WeightedCapacity
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new OverridesParameters.
func (in *OverridesParameters) DeepCopy() *OverridesParameters {
	if in == nil {
		return nil
	}
	out := new(OverridesParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SchedulerHintsInitParameters) DeepCopyInto(out *SchedulerHintsInitParameters) {
	*out = *in
	if in.DehID != nil {
		in, out := &in.DehID, &out.DehID
		*out = new(string)
		**out = **in
	}
	if in.FaultDomain != nil {
		in, out := &in.FaultDomain, &out.FaultDomain
		*out = new(string)
		**out = **in
	}
	if in.Group != nil {
		in, out := &in.Group, &out.Group
		*out = new(string)
		**out = **in
	}
	if in.Tenancy != nil {
		in, out := &in.Tenancy, &out.Tenancy
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SchedulerHintsInitParameters.
func (in *SchedulerHintsInitParameters) DeepCopy() *SchedulerHintsInitParameters {
	if in == nil {
		return nil
	}
	out := new(SchedulerHintsInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SchedulerHintsObservation) DeepCopyInto(out *SchedulerHintsObservation) {
	*out = *in
	if in.DehID != nil {
		in, out := &in.DehID, &out.DehID
		*out = new(string)
		**out = **in
	}
	if in.FaultDomain != nil {
		in, out := &in.FaultDomain, &out.FaultDomain
		*out = new(string)
		**out = **in
	}
	if in.Group != nil {
		in, out := &in.Group, &out.Group
		*out = new(string)
		**out = **in
	}
	if in.Tenancy != nil {
		in, out := &in.Tenancy, &out.Tenancy
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SchedulerHintsObservation.
func (in *SchedulerHintsObservation) DeepCopy() *SchedulerHintsObservation {
	if in == nil {
		return nil
	}
	out := new(SchedulerHintsObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SchedulerHintsParameters) DeepCopyInto(out *SchedulerHintsParameters) {
	*out = *in
	if in.DehID != nil {
		in, out := &in.DehID, &out.DehID
		*out = new(string)
		**out = **in
	}
	if in.FaultDomain != nil {
		in, out := &in.FaultDomain, &out.FaultDomain
		*out = new(string)
		**out = **in
	}
	if in.Group != nil {
		in, out := &in.Group, &out.Group
		*out = new(string)
		**out = **in
	}
	if in.Tenancy != nil {
		in, out := &in.Tenancy, &out.Tenancy
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SchedulerHintsParameters.
func (in *SchedulerHintsParameters) DeepCopy() *SchedulerHintsParameters {
	if in == nil {
		return nil
	}
	out := new(SchedulerHintsParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Servergroup) DeepCopyInto(out *Servergroup) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Servergroup.
func (in *Servergroup) DeepCopy() *Servergroup {
	if in == nil {
		return nil
	}
	out := new(Servergroup)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *Servergroup) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ServergroupInitParameters) DeepCopyInto(out *ServergroupInitParameters) {
	*out = *in
	if in.Members != nil {
		in, out := &in.Members, &out.Members
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Policies != nil {
		in, out := &in.Policies, &out.Policies
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Region != nil {
		in, out := &in.Region, &out.Region
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ServergroupInitParameters.
func (in *ServergroupInitParameters) DeepCopy() *ServergroupInitParameters {
	if in == nil {
		return nil
	}
	out := new(ServergroupInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ServergroupList) DeepCopyInto(out *ServergroupList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]Servergroup, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ServergroupList.
func (in *ServergroupList) DeepCopy() *ServergroupList {
	if in == nil {
		return nil
	}
	out := new(ServergroupList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *ServergroupList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ServergroupObservation) DeepCopyInto(out *ServergroupObservation) {
	*out = *in
	if in.FaultDomains != nil {
		in, out := &in.FaultDomains, &out.FaultDomains
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.Members != nil {
		in, out := &in.Members, &out.Members
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Policies != nil {
		in, out := &in.Policies, &out.Policies
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Region != nil {
		in, out := &in.Region, &out.Region
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ServergroupObservation.
func (in *ServergroupObservation) DeepCopy() *ServergroupObservation {
	if in == nil {
		return nil
	}
	out := new(ServergroupObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ServergroupParameters) DeepCopyInto(out *ServergroupParameters) {
	*out = *in
	if in.Members != nil {
		in, out := &in.Members, &out.Members
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Policies != nil {
		in, out := &in.Policies, &out.Policies
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Region != nil {
		in, out := &in.Region, &out.Region
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ServergroupParameters.
func (in *ServergroupParameters) DeepCopy() *ServergroupParameters {
	if in == nil {
		return nil
	}
	out := new(ServergroupParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ServergroupSpec) DeepCopyInto(out *ServergroupSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ServergroupSpec.
func (in *ServergroupSpec) DeepCopy() *ServergroupSpec {
	if in == nil {
		return nil
	}
	out := new(ServergroupSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ServergroupStatus) DeepCopyInto(out *ServergroupStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ServergroupStatus.
func (in *ServergroupStatus) DeepCopy() *ServergroupStatus {
	if in == nil {
		return nil
	}
	out := new(ServergroupStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VolumeAttach) DeepCopyInto(out *VolumeAttach) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VolumeAttach.
func (in *VolumeAttach) DeepCopy() *VolumeAttach {
	if in == nil {
		return nil
	}
	out := new(VolumeAttach)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *VolumeAttach) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VolumeAttachInitParameters) DeepCopyInto(out *VolumeAttachInitParameters) {
	*out = *in
	if in.Device != nil {
		in, out := &in.Device, &out.Device
		*out = new(string)
		**out = **in
	}
	if in.InstanceID != nil {
		in, out := &in.InstanceID, &out.InstanceID
		*out = new(string)
		**out = **in
	}
	if in.InstanceIDRef != nil {
		in, out := &in.InstanceIDRef, &out.InstanceIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.InstanceIDSelector != nil {
		in, out := &in.InstanceIDSelector, &out.InstanceIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.Region != nil {
		in, out := &in.Region, &out.Region
		*out = new(string)
		**out = **in
	}
	if in.VolumeID != nil {
		in, out := &in.VolumeID, &out.VolumeID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VolumeAttachInitParameters.
func (in *VolumeAttachInitParameters) DeepCopy() *VolumeAttachInitParameters {
	if in == nil {
		return nil
	}
	out := new(VolumeAttachInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VolumeAttachList) DeepCopyInto(out *VolumeAttachList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]VolumeAttach, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VolumeAttachList.
func (in *VolumeAttachList) DeepCopy() *VolumeAttachList {
	if in == nil {
		return nil
	}
	out := new(VolumeAttachList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *VolumeAttachList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VolumeAttachObservation) DeepCopyInto(out *VolumeAttachObservation) {
	*out = *in
	if in.Device != nil {
		in, out := &in.Device, &out.Device
		*out = new(string)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.InstanceID != nil {
		in, out := &in.InstanceID, &out.InstanceID
		*out = new(string)
		**out = **in
	}
	if in.PciAddress != nil {
		in, out := &in.PciAddress, &out.PciAddress
		*out = new(string)
		**out = **in
	}
	if in.Region != nil {
		in, out := &in.Region, &out.Region
		*out = new(string)
		**out = **in
	}
	if in.VolumeID != nil {
		in, out := &in.VolumeID, &out.VolumeID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VolumeAttachObservation.
func (in *VolumeAttachObservation) DeepCopy() *VolumeAttachObservation {
	if in == nil {
		return nil
	}
	out := new(VolumeAttachObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VolumeAttachParameters) DeepCopyInto(out *VolumeAttachParameters) {
	*out = *in
	if in.Device != nil {
		in, out := &in.Device, &out.Device
		*out = new(string)
		**out = **in
	}
	if in.InstanceID != nil {
		in, out := &in.InstanceID, &out.InstanceID
		*out = new(string)
		**out = **in
	}
	if in.InstanceIDRef != nil {
		in, out := &in.InstanceIDRef, &out.InstanceIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.InstanceIDSelector != nil {
		in, out := &in.InstanceIDSelector, &out.InstanceIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.Region != nil {
		in, out := &in.Region, &out.Region
		*out = new(string)
		**out = **in
	}
	if in.VolumeID != nil {
		in, out := &in.VolumeID, &out.VolumeID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VolumeAttachParameters.
func (in *VolumeAttachParameters) DeepCopy() *VolumeAttachParameters {
	if in == nil {
		return nil
	}
	out := new(VolumeAttachParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VolumeAttachSpec) DeepCopyInto(out *VolumeAttachSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VolumeAttachSpec.
func (in *VolumeAttachSpec) DeepCopy() *VolumeAttachSpec {
	if in == nil {
		return nil
	}
	out := new(VolumeAttachSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VolumeAttachStatus) DeepCopyInto(out *VolumeAttachStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VolumeAttachStatus.
func (in *VolumeAttachStatus) DeepCopy() *VolumeAttachStatus {
	if in == nil {
		return nil
	}
	out := new(VolumeAttachStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VolumeAttachedInitParameters) DeepCopyInto(out *VolumeAttachedInitParameters) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VolumeAttachedInitParameters.
func (in *VolumeAttachedInitParameters) DeepCopy() *VolumeAttachedInitParameters {
	if in == nil {
		return nil
	}
	out := new(VolumeAttachedInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VolumeAttachedObservation) DeepCopyInto(out *VolumeAttachedObservation) {
	*out = *in
	if in.BootIndex != nil {
		in, out := &in.BootIndex, &out.BootIndex
		*out = new(float64)
		**out = **in
	}
	if in.KMSKeyID != nil {
		in, out := &in.KMSKeyID, &out.KMSKeyID
		*out = new(string)
		**out = **in
	}
	if in.PciAddress != nil {
		in, out := &in.PciAddress, &out.PciAddress
		*out = new(string)
		**out = **in
	}
	if in.Size != nil {
		in, out := &in.Size, &out.Size
		*out = new(float64)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
	if in.VolumeID != nil {
		in, out := &in.VolumeID, &out.VolumeID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VolumeAttachedObservation.
func (in *VolumeAttachedObservation) DeepCopy() *VolumeAttachedObservation {
	if in == nil {
		return nil
	}
	out := new(VolumeAttachedObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VolumeAttachedParameters) DeepCopyInto(out *VolumeAttachedParameters) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VolumeAttachedParameters.
func (in *VolumeAttachedParameters) DeepCopy() *VolumeAttachedParameters {
	if in == nil {
		return nil
	}
	out := new(VolumeAttachedParameters)
	in.DeepCopyInto(out)
	return out
}
