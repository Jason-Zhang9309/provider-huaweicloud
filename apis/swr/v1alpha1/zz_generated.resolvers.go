// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by angryjet. DO NOT EDIT.

package v1alpha1

import (
	"context"
	reference "github.com/crossplane/crossplane-runtime/pkg/reference"
	resource "github.com/crossplane/upjet/pkg/resource"
	v1alpha11 "github.com/huaweicloud/provider-huaweicloud/apis/cce/v1alpha1"
	v1alpha1 "github.com/huaweicloud/provider-huaweicloud/apis/iam/v1alpha1"
	errors "github.com/pkg/errors"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// ResolveReferences of this ImageAutoSync.
func (mg *ImageAutoSync) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Organization),
		Extract:      resource.ExtractParamPath("name", true),
		Reference:    mg.Spec.ForProvider.OrganizationRef,
		Selector:     mg.Spec.ForProvider.OrganizationSelector,
		To: reference.To{
			List:    &OrganizationList{},
			Managed: &Organization{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.Organization")
	}
	mg.Spec.ForProvider.Organization = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.OrganizationRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Repository),
		Extract:      resource.ExtractParamPath("name", true),
		Reference:    mg.Spec.ForProvider.RepositoryRef,
		Selector:     mg.Spec.ForProvider.RepositorySelector,
		To: reference.To{
			List:    &RepositoryList{},
			Managed: &Repository{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.Repository")
	}
	mg.Spec.ForProvider.Repository = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.RepositoryRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Organization),
		Extract:      resource.ExtractParamPath("name", true),
		Reference:    mg.Spec.InitProvider.OrganizationRef,
		Selector:     mg.Spec.InitProvider.OrganizationSelector,
		To: reference.To{
			List:    &OrganizationList{},
			Managed: &Organization{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.Organization")
	}
	mg.Spec.InitProvider.Organization = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.OrganizationRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Repository),
		Extract:      resource.ExtractParamPath("name", true),
		Reference:    mg.Spec.InitProvider.RepositoryRef,
		Selector:     mg.Spec.InitProvider.RepositorySelector,
		To: reference.To{
			List:    &RepositoryList{},
			Managed: &Repository{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.Repository")
	}
	mg.Spec.InitProvider.Repository = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.RepositoryRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this ImagePermissions.
func (mg *ImagePermissions) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	for i3 := 0; i3 < len(mg.Spec.ForProvider.Users); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Users[i3].UserID),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.Users[i3].UserIDRef,
			Selector:     mg.Spec.ForProvider.Users[i3].UserIDSelector,
			To: reference.To{
				List:    &v1alpha1.UserList{},
				Managed: &v1alpha1.User{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.Users[i3].UserID")
		}
		mg.Spec.ForProvider.Users[i3].UserID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.Users[i3].UserIDRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.Users); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Users[i3].UserID),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.InitProvider.Users[i3].UserIDRef,
			Selector:     mg.Spec.InitProvider.Users[i3].UserIDSelector,
			To: reference.To{
				List:    &v1alpha1.UserList{},
				Managed: &v1alpha1.User{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.Users[i3].UserID")
		}
		mg.Spec.InitProvider.Users[i3].UserID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.Users[i3].UserIDRef = rsp.ResolvedReference

	}

	return nil
}

// ResolveReferences of this ImageTrigger.
func (mg *ImageTrigger) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ClusterID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.ClusterIDRef,
		Selector:     mg.Spec.ForProvider.ClusterIDSelector,
		To: reference.To{
			List:    &v1alpha11.ClusterList{},
			Managed: &v1alpha11.Cluster{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ClusterID")
	}
	mg.Spec.ForProvider.ClusterID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ClusterIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ClusterID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.InitProvider.ClusterIDRef,
		Selector:     mg.Spec.InitProvider.ClusterIDSelector,
		To: reference.To{
			List:    &v1alpha11.ClusterList{},
			Managed: &v1alpha11.Cluster{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.ClusterID")
	}
	mg.Spec.InitProvider.ClusterID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.ClusterIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this OrganizationPermissions.
func (mg *OrganizationPermissions) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	for i3 := 0; i3 < len(mg.Spec.ForProvider.Users); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Users[i3].UserID),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.Users[i3].UserIDRef,
			Selector:     mg.Spec.ForProvider.Users[i3].UserIDSelector,
			To: reference.To{
				List:    &v1alpha1.UserList{},
				Managed: &v1alpha1.User{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.Users[i3].UserID")
		}
		mg.Spec.ForProvider.Users[i3].UserID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.Users[i3].UserIDRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.Users); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Users[i3].UserID),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.InitProvider.Users[i3].UserIDRef,
			Selector:     mg.Spec.InitProvider.Users[i3].UserIDSelector,
			To: reference.To{
				List:    &v1alpha1.UserList{},
				Managed: &v1alpha1.User{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.Users[i3].UserID")
		}
		mg.Spec.InitProvider.Users[i3].UserID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.Users[i3].UserIDRef = rsp.ResolvedReference

	}

	return nil
}
