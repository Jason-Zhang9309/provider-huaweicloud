// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type RepositoryInitParameters struct {

	// Specifies the category of the repository.
	// The value can be app_server, linux, framework_app, database, lang, other, windows, arm.
	Category *string `json:"category,omitempty" tf:"category,omitempty"`

	// Specifies the description of the repository.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Specifies whether the repository is public. Default is false.
	IsPublic *bool `json:"isPublic,omitempty" tf:"is_public,omitempty"`

	// Specifies the name of the repository.
	// The valid length is limited from 1 to 128, only lowercase letters, digits, periods (.), hyphens (-) and
	// underscores (_) are allowed. Periods, underscores, and hyphens cannot be placed next to each other.
	// A maximum of two consecutive underscores are allowed. Changing this creates a new resource.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Specifies the name of the organization (namespace) the repository
	// belongs. Changing this creates a new resource.
	// +crossplane:generate:reference:type=github.com/huaweicloud/provider-huaweicloud/apis/swr/v1alpha1.Organization
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractParamPath("name",true)
	Organization *string `json:"organization,omitempty" tf:"organization,omitempty"`

	// Reference to a Organization in swr to populate organization.
	// +kubebuilder:validation:Optional
	OrganizationRef *v1.Reference `json:"organizationRef,omitempty" tf:"-"`

	// Selector for a Organization in swr to populate organization.
	// +kubebuilder:validation:Optional
	OrganizationSelector *v1.Selector `json:"organizationSelector,omitempty" tf:"-"`

	// Specifies the region in which to create the resource. If omitted, the
	// provider-level region will be used. Changing this creates a new resource.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`
}

type RepositoryObservation struct {

	// Specifies the category of the repository.
	// The value can be app_server, linux, framework_app, database, lang, other, windows, arm.
	Category *string `json:"category,omitempty" tf:"category,omitempty"`

	// Specifies the description of the repository.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// ID of the repository. The value is the name of the repository.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Intra-cluster image address for docker pull.
	InternalPath *string `json:"internalPath,omitempty" tf:"internal_path,omitempty"`

	// Specifies whether the repository is public. Default is false.
	IsPublic *bool `json:"isPublic,omitempty" tf:"is_public,omitempty"`

	// Specifies the name of the repository.
	// The valid length is limited from 1 to 128, only lowercase letters, digits, periods (.), hyphens (-) and
	// underscores (_) are allowed. Periods, underscores, and hyphens cannot be placed next to each other.
	// A maximum of two consecutive underscores are allowed. Changing this creates a new resource.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Number of image tags in a repository.
	NumImages *float64 `json:"numImages,omitempty" tf:"num_images,omitempty"`

	// Specifies the name of the organization (namespace) the repository
	// belongs. Changing this creates a new resource.
	Organization *string `json:"organization,omitempty" tf:"organization,omitempty"`

	// Image address for docker pull.
	Path *string `json:"path,omitempty" tf:"path,omitempty"`

	// Specifies the region in which to create the resource. If omitted, the
	// provider-level region will be used. Changing this creates a new resource.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Numeric ID of the repository
	RepositoryID *float64 `json:"repositoryId,omitempty" tf:"repository_id,omitempty"`

	// Repository size.
	Size *float64 `json:"size,omitempty" tf:"size,omitempty"`
}

type RepositoryParameters struct {

	// Specifies the category of the repository.
	// The value can be app_server, linux, framework_app, database, lang, other, windows, arm.
	// +kubebuilder:validation:Optional
	Category *string `json:"category,omitempty" tf:"category,omitempty"`

	// Specifies the description of the repository.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Specifies whether the repository is public. Default is false.
	// +kubebuilder:validation:Optional
	IsPublic *bool `json:"isPublic,omitempty" tf:"is_public,omitempty"`

	// Specifies the name of the repository.
	// The valid length is limited from 1 to 128, only lowercase letters, digits, periods (.), hyphens (-) and
	// underscores (_) are allowed. Periods, underscores, and hyphens cannot be placed next to each other.
	// A maximum of two consecutive underscores are allowed. Changing this creates a new resource.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Specifies the name of the organization (namespace) the repository
	// belongs. Changing this creates a new resource.
	// +crossplane:generate:reference:type=github.com/huaweicloud/provider-huaweicloud/apis/swr/v1alpha1.Organization
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractParamPath("name",true)
	// +kubebuilder:validation:Optional
	Organization *string `json:"organization,omitempty" tf:"organization,omitempty"`

	// Reference to a Organization in swr to populate organization.
	// +kubebuilder:validation:Optional
	OrganizationRef *v1.Reference `json:"organizationRef,omitempty" tf:"-"`

	// Selector for a Organization in swr to populate organization.
	// +kubebuilder:validation:Optional
	OrganizationSelector *v1.Selector `json:"organizationSelector,omitempty" tf:"-"`

	// Specifies the region in which to create the resource. If omitted, the
	// provider-level region will be used. Changing this creates a new resource.
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`
}

// RepositorySpec defines the desired state of Repository
type RepositorySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     RepositoryParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider RepositoryInitParameters `json:"initProvider,omitempty"`
}

// RepositoryStatus defines the observed state of Repository.
type RepositoryStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        RepositoryObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Repository is the Schema for the Repositorys API. ""
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,huaweicloud}
type Repository struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	Spec   RepositorySpec   `json:"spec"`
	Status RepositoryStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// RepositoryList contains a list of Repositorys
type RepositoryList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Repository `json:"items"`
}

// Repository type metadata.
var (
	Repository_Kind             = "Repository"
	Repository_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Repository_Kind}.String()
	Repository_KindAPIVersion   = Repository_Kind + "." + CRDGroupVersion.String()
	Repository_GroupVersionKind = CRDGroupVersion.WithKind(Repository_Kind)
)

func init() {
	SchemeBuilder.Register(&Repository{}, &RepositoryList{})
}
