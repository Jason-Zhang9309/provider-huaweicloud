// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type PeeringConnectionInitParameters struct {

	// Specifies the description of the VPC peering connection.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Specifies the name of the VPC peering connection. The value can contain 1 to 64
	// characters.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Specifies the tenant ID of the accepter tenant. Changing this creates
	// a new VPC peering connection.
	PeerTenantID *string `json:"peerTenantId,omitempty" tf:"peer_tenant_id,omitempty"`

	// Specifies the VPC ID of the accepter tenant. Changing this creates a new
	// VPC peering connection.
	// +crossplane:generate:reference:type=github.com/huaweicloud/provider-huaweicloud/apis/vpc/v1alpha1.VPC
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	PeerVPCID *string `json:"peerVpcId,omitempty" tf:"peer_vpc_id,omitempty"`

	// Reference to a VPC in vpc to populate peerVpcId.
	// +kubebuilder:validation:Optional
	PeerVPCIDRef *v1.Reference `json:"peerVpcIdRef,omitempty" tf:"-"`

	// Selector for a VPC in vpc to populate peerVpcId.
	// +kubebuilder:validation:Optional
	PeerVPCIDSelector *v1.Selector `json:"peerVpcIdSelector,omitempty" tf:"-"`

	// The region in which to create the VPC peering connection. If omitted, the
	// provider-level region will be used. Changing this creates a new VPC peering connection resource.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Specifies the ID of a VPC involved in a VPC peering connection. Changing this
	// creates a new VPC peering connection.
	// +crossplane:generate:reference:type=github.com/huaweicloud/provider-huaweicloud/apis/vpc/v1alpha1.VPC
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	VPCID *string `json:"vpcId,omitempty" tf:"vpc_id,omitempty"`

	// Reference to a VPC in vpc to populate vpcId.
	// +kubebuilder:validation:Optional
	VPCIDRef *v1.Reference `json:"vpcIdRef,omitempty" tf:"-"`

	// Selector for a VPC in vpc to populate vpcId.
	// +kubebuilder:validation:Optional
	VPCIDSelector *v1.Selector `json:"vpcIdSelector,omitempty" tf:"-"`
}

type PeeringConnectionObservation struct {

	// Specifies the description of the VPC peering connection.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The VPC peering connection ID.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Specifies the name of the VPC peering connection. The value can contain 1 to 64
	// characters.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Specifies the tenant ID of the accepter tenant. Changing this creates
	// a new VPC peering connection.
	PeerTenantID *string `json:"peerTenantId,omitempty" tf:"peer_tenant_id,omitempty"`

	// Specifies the VPC ID of the accepter tenant. Changing this creates a new
	// VPC peering connection.
	PeerVPCID *string `json:"peerVpcId,omitempty" tf:"peer_vpc_id,omitempty"`

	// The region in which to create the VPC peering connection. If omitted, the
	// provider-level region will be used. Changing this creates a new VPC peering connection resource.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// The VPC peering connection status. The value can be PENDING_ACCEPTANCE, REJECTED, EXPIRED, DELETED, or
	// ACTIVE.
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// Specifies the ID of a VPC involved in a VPC peering connection. Changing this
	// creates a new VPC peering connection.
	VPCID *string `json:"vpcId,omitempty" tf:"vpc_id,omitempty"`
}

type PeeringConnectionParameters struct {

	// Specifies the description of the VPC peering connection.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Specifies the name of the VPC peering connection. The value can contain 1 to 64
	// characters.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Specifies the tenant ID of the accepter tenant. Changing this creates
	// a new VPC peering connection.
	// +kubebuilder:validation:Optional
	PeerTenantID *string `json:"peerTenantId,omitempty" tf:"peer_tenant_id,omitempty"`

	// Specifies the VPC ID of the accepter tenant. Changing this creates a new
	// VPC peering connection.
	// +crossplane:generate:reference:type=github.com/huaweicloud/provider-huaweicloud/apis/vpc/v1alpha1.VPC
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	PeerVPCID *string `json:"peerVpcId,omitempty" tf:"peer_vpc_id,omitempty"`

	// Reference to a VPC in vpc to populate peerVpcId.
	// +kubebuilder:validation:Optional
	PeerVPCIDRef *v1.Reference `json:"peerVpcIdRef,omitempty" tf:"-"`

	// Selector for a VPC in vpc to populate peerVpcId.
	// +kubebuilder:validation:Optional
	PeerVPCIDSelector *v1.Selector `json:"peerVpcIdSelector,omitempty" tf:"-"`

	// The region in which to create the VPC peering connection. If omitted, the
	// provider-level region will be used. Changing this creates a new VPC peering connection resource.
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Specifies the ID of a VPC involved in a VPC peering connection. Changing this
	// creates a new VPC peering connection.
	// +crossplane:generate:reference:type=github.com/huaweicloud/provider-huaweicloud/apis/vpc/v1alpha1.VPC
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	VPCID *string `json:"vpcId,omitempty" tf:"vpc_id,omitempty"`

	// Reference to a VPC in vpc to populate vpcId.
	// +kubebuilder:validation:Optional
	VPCIDRef *v1.Reference `json:"vpcIdRef,omitempty" tf:"-"`

	// Selector for a VPC in vpc to populate vpcId.
	// +kubebuilder:validation:Optional
	VPCIDSelector *v1.Selector `json:"vpcIdSelector,omitempty" tf:"-"`
}

// PeeringConnectionSpec defines the desired state of PeeringConnection
type PeeringConnectionSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     PeeringConnectionParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider PeeringConnectionInitParameters `json:"initProvider,omitempty"`
}

// PeeringConnectionStatus defines the observed state of PeeringConnection.
type PeeringConnectionStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        PeeringConnectionObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// PeeringConnection is the Schema for the PeeringConnections API. ""
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,huaweicloud}
type PeeringConnection struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	Spec   PeeringConnectionSpec   `json:"spec"`
	Status PeeringConnectionStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// PeeringConnectionList contains a list of PeeringConnections
type PeeringConnectionList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []PeeringConnection `json:"items"`
}

// Repository type metadata.
var (
	PeeringConnection_Kind             = "PeeringConnection"
	PeeringConnection_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: PeeringConnection_Kind}.String()
	PeeringConnection_KindAPIVersion   = PeeringConnection_Kind + "." + CRDGroupVersion.String()
	PeeringConnection_GroupVersionKind = CRDGroupVersion.WithKind(PeeringConnection_Kind)
)

func init() {
	SchemeBuilder.Register(&PeeringConnection{}, &PeeringConnectionList{})
}
