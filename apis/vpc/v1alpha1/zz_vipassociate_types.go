// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type VipAssociateInitParameters struct {

	// An array of one or more IDs of the ports to attach the vip to.
	// +listType=set
	PortIds []*string `json:"portIds,omitempty" tf:"port_ids,omitempty"`

	// The region in which to create the vip associate resource. If omitted, the
	// provider-level region will be used.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// The ID of vip to attach the ports to.
	// +crossplane:generate:reference:type=github.com/huaweicloud/provider-huaweicloud/apis/vpc/v1alpha1.Vip
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	VipID *string `json:"vipId,omitempty" tf:"vip_id,omitempty"`

	// Reference to a Vip in vpc to populate vipId.
	// +kubebuilder:validation:Optional
	VipIDRef *v1.Reference `json:"vipIdRef,omitempty" tf:"-"`

	// Selector for a Vip in vpc to populate vipId.
	// +kubebuilder:validation:Optional
	VipIDSelector *v1.Selector `json:"vipIdSelector,omitempty" tf:"-"`
}

type VipAssociateObservation struct {

	// Specifies a resource ID in UUID format.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The IP addresses of ports to attach the vip to.
	IPAddresses []*string `json:"ipAddresses,omitempty" tf:"ip_addresses,omitempty"`

	// An array of one or more IDs of the ports to attach the vip to.
	// +listType=set
	PortIds []*string `json:"portIds,omitempty" tf:"port_ids,omitempty"`

	// The region in which to create the vip associate resource. If omitted, the
	// provider-level region will be used.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// The ID of vip to attach the ports to.
	VipID *string `json:"vipId,omitempty" tf:"vip_id,omitempty"`

	// The IP address in the subnet for this vip.
	VipIPAddress *string `json:"vipIpAddress,omitempty" tf:"vip_ip_address,omitempty"`

	// The ID of the subnet this vip connects to.
	VipSubnetID *string `json:"vipSubnetId,omitempty" tf:"vip_subnet_id,omitempty"`
}

type VipAssociateParameters struct {

	// An array of one or more IDs of the ports to attach the vip to.
	// +kubebuilder:validation:Optional
	// +listType=set
	PortIds []*string `json:"portIds,omitempty" tf:"port_ids,omitempty"`

	// The region in which to create the vip associate resource. If omitted, the
	// provider-level region will be used.
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// The ID of vip to attach the ports to.
	// +crossplane:generate:reference:type=github.com/huaweicloud/provider-huaweicloud/apis/vpc/v1alpha1.Vip
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	VipID *string `json:"vipId,omitempty" tf:"vip_id,omitempty"`

	// Reference to a Vip in vpc to populate vipId.
	// +kubebuilder:validation:Optional
	VipIDRef *v1.Reference `json:"vipIdRef,omitempty" tf:"-"`

	// Selector for a Vip in vpc to populate vipId.
	// +kubebuilder:validation:Optional
	VipIDSelector *v1.Selector `json:"vipIdSelector,omitempty" tf:"-"`
}

// VipAssociateSpec defines the desired state of VipAssociate
type VipAssociateSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     VipAssociateParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider VipAssociateInitParameters `json:"initProvider,omitempty"`
}

// VipAssociateStatus defines the observed state of VipAssociate.
type VipAssociateStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        VipAssociateObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// VipAssociate is the Schema for the VipAssociates API. ""
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,huaweicloud}
type VipAssociate struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.portIds) || (has(self.initProvider) && has(self.initProvider.portIds))",message="spec.forProvider.portIds is a required parameter"
	Spec   VipAssociateSpec   `json:"spec"`
	Status VipAssociateStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// VipAssociateList contains a list of VipAssociates
type VipAssociateList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []VipAssociate `json:"items"`
}

// Repository type metadata.
var (
	VipAssociate_Kind             = "VipAssociate"
	VipAssociate_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: VipAssociate_Kind}.String()
	VipAssociate_KindAPIVersion   = VipAssociate_Kind + "." + CRDGroupVersion.String()
	VipAssociate_GroupVersionKind = CRDGroupVersion.WithKind(VipAssociate_Kind)
)

func init() {
	SchemeBuilder.Register(&VipAssociate{}, &VipAssociateList{})
}
