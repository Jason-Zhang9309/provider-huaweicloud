// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type TrafficMirrorSessionInitParameters struct {

	// Specifies the description of the traffic mirror session.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Specifies whether the mirror session is enabled. Defaults to true.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// Specifies the name of the traffic mirror session.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Specifies the maximum transmission unit (MTU).
	// The valid value is range from 1 to 1,460, defaults to 96.
	PacketLength *float64 `json:"packetLength,omitempty" tf:"packet_length,omitempty"`

	// Specifies the mirror session priority. The value range is 1-32766.
	// A smaller value indicates a higher priority.
	Priority *float64 `json:"priority,omitempty" tf:"priority,omitempty"`

	// Specifies the region in which to create the resource.
	// If omitted, the provider-level region will be used.
	// Changing this creates a new resource.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Specifies the traffic mirror filter ID used in the session.
	// +crossplane:generate:reference:type=github.com/huaweicloud/provider-huaweicloud/apis/vpc/v1alpha1.TrafficMirrorFilter
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	TrafficMirrorFilterID *string `json:"trafficMirrorFilterId,omitempty" tf:"traffic_mirror_filter_id,omitempty"`

	// Reference to a TrafficMirrorFilter in vpc to populate trafficMirrorFilterId.
	// +kubebuilder:validation:Optional
	TrafficMirrorFilterIDRef *v1.Reference `json:"trafficMirrorFilterIdRef,omitempty" tf:"-"`

	// Selector for a TrafficMirrorFilter in vpc to populate trafficMirrorFilterId.
	// +kubebuilder:validation:Optional
	TrafficMirrorFilterIDSelector *v1.Selector `json:"trafficMirrorFilterIdSelector,omitempty" tf:"-"`

	// Specifies the mirror source IDs.
	// An elastic network interface can be used as a mirror source.
	TrafficMirrorSources []*string `json:"trafficMirrorSources,omitempty" tf:"traffic_mirror_sources,omitempty"`

	// Specifies the mirror target ID.
	TrafficMirrorTargetID *string `json:"trafficMirrorTargetId,omitempty" tf:"traffic_mirror_target_id,omitempty"`

	// Specifies the mirror target type. The value can be:
	TrafficMirrorTargetType *string `json:"trafficMirrorTargetType,omitempty" tf:"traffic_mirror_target_type,omitempty"`

	// Specifies the mirror source type. The value can be eni(elastic network interface).
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// Specifies the VNI, which is used to distinguish mirrored traffic of
	// different sessions. The valid value is range from 0 to 16,777,215, defaults to 1.
	VirtualNetworkID *float64 `json:"virtualNetworkId,omitempty" tf:"virtual_network_id,omitempty"`
}

type TrafficMirrorSessionObservation struct {

	// The creation time of the traffic mirror session.
	CreatedAt *string `json:"createdAt,omitempty" tf:"created_at,omitempty"`

	// Specifies the description of the traffic mirror session.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Specifies whether the mirror session is enabled. Defaults to true.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// The resource ID.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Specifies the name of the traffic mirror session.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Specifies the maximum transmission unit (MTU).
	// The valid value is range from 1 to 1,460, defaults to 96.
	PacketLength *float64 `json:"packetLength,omitempty" tf:"packet_length,omitempty"`

	// Specifies the mirror session priority. The value range is 1-32766.
	// A smaller value indicates a higher priority.
	Priority *float64 `json:"priority,omitempty" tf:"priority,omitempty"`

	// Specifies the region in which to create the resource.
	// If omitted, the provider-level region will be used.
	// Changing this creates a new resource.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Specifies the traffic mirror filter ID used in the session.
	TrafficMirrorFilterID *string `json:"trafficMirrorFilterId,omitempty" tf:"traffic_mirror_filter_id,omitempty"`

	// Specifies the mirror source IDs.
	// An elastic network interface can be used as a mirror source.
	TrafficMirrorSources []*string `json:"trafficMirrorSources,omitempty" tf:"traffic_mirror_sources,omitempty"`

	// Specifies the mirror target ID.
	TrafficMirrorTargetID *string `json:"trafficMirrorTargetId,omitempty" tf:"traffic_mirror_target_id,omitempty"`

	// Specifies the mirror target type. The value can be:
	TrafficMirrorTargetType *string `json:"trafficMirrorTargetType,omitempty" tf:"traffic_mirror_target_type,omitempty"`

	// Specifies the mirror source type. The value can be eni(elastic network interface).
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// The latest update time of the traffic mirror session.
	UpdatedAt *string `json:"updatedAt,omitempty" tf:"updated_at,omitempty"`

	// Specifies the VNI, which is used to distinguish mirrored traffic of
	// different sessions. The valid value is range from 0 to 16,777,215, defaults to 1.
	VirtualNetworkID *float64 `json:"virtualNetworkId,omitempty" tf:"virtual_network_id,omitempty"`
}

type TrafficMirrorSessionParameters struct {

	// Specifies the description of the traffic mirror session.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Specifies whether the mirror session is enabled. Defaults to true.
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// Specifies the name of the traffic mirror session.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Specifies the maximum transmission unit (MTU).
	// The valid value is range from 1 to 1,460, defaults to 96.
	// +kubebuilder:validation:Optional
	PacketLength *float64 `json:"packetLength,omitempty" tf:"packet_length,omitempty"`

	// Specifies the mirror session priority. The value range is 1-32766.
	// A smaller value indicates a higher priority.
	// +kubebuilder:validation:Optional
	Priority *float64 `json:"priority,omitempty" tf:"priority,omitempty"`

	// Specifies the region in which to create the resource.
	// If omitted, the provider-level region will be used.
	// Changing this creates a new resource.
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Specifies the traffic mirror filter ID used in the session.
	// +crossplane:generate:reference:type=github.com/huaweicloud/provider-huaweicloud/apis/vpc/v1alpha1.TrafficMirrorFilter
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	TrafficMirrorFilterID *string `json:"trafficMirrorFilterId,omitempty" tf:"traffic_mirror_filter_id,omitempty"`

	// Reference to a TrafficMirrorFilter in vpc to populate trafficMirrorFilterId.
	// +kubebuilder:validation:Optional
	TrafficMirrorFilterIDRef *v1.Reference `json:"trafficMirrorFilterIdRef,omitempty" tf:"-"`

	// Selector for a TrafficMirrorFilter in vpc to populate trafficMirrorFilterId.
	// +kubebuilder:validation:Optional
	TrafficMirrorFilterIDSelector *v1.Selector `json:"trafficMirrorFilterIdSelector,omitempty" tf:"-"`

	// Specifies the mirror source IDs.
	// An elastic network interface can be used as a mirror source.
	// +kubebuilder:validation:Optional
	TrafficMirrorSources []*string `json:"trafficMirrorSources,omitempty" tf:"traffic_mirror_sources,omitempty"`

	// Specifies the mirror target ID.
	// +kubebuilder:validation:Optional
	TrafficMirrorTargetID *string `json:"trafficMirrorTargetId,omitempty" tf:"traffic_mirror_target_id,omitempty"`

	// Specifies the mirror target type. The value can be:
	// +kubebuilder:validation:Optional
	TrafficMirrorTargetType *string `json:"trafficMirrorTargetType,omitempty" tf:"traffic_mirror_target_type,omitempty"`

	// Specifies the mirror source type. The value can be eni(elastic network interface).
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// Specifies the VNI, which is used to distinguish mirrored traffic of
	// different sessions. The valid value is range from 0 to 16,777,215, defaults to 1.
	// +kubebuilder:validation:Optional
	VirtualNetworkID *float64 `json:"virtualNetworkId,omitempty" tf:"virtual_network_id,omitempty"`
}

// TrafficMirrorSessionSpec defines the desired state of TrafficMirrorSession
type TrafficMirrorSessionSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     TrafficMirrorSessionParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider TrafficMirrorSessionInitParameters `json:"initProvider,omitempty"`
}

// TrafficMirrorSessionStatus defines the observed state of TrafficMirrorSession.
type TrafficMirrorSessionStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        TrafficMirrorSessionObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// TrafficMirrorSession is the Schema for the TrafficMirrorSessions API. ""
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,huaweicloud}
type TrafficMirrorSession struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.priority) || (has(self.initProvider) && has(self.initProvider.priority))",message="spec.forProvider.priority is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.trafficMirrorSources) || (has(self.initProvider) && has(self.initProvider.trafficMirrorSources))",message="spec.forProvider.trafficMirrorSources is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.trafficMirrorTargetId) || (has(self.initProvider) && has(self.initProvider.trafficMirrorTargetId))",message="spec.forProvider.trafficMirrorTargetId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.trafficMirrorTargetType) || (has(self.initProvider) && has(self.initProvider.trafficMirrorTargetType))",message="spec.forProvider.trafficMirrorTargetType is a required parameter"
	Spec   TrafficMirrorSessionSpec   `json:"spec"`
	Status TrafficMirrorSessionStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// TrafficMirrorSessionList contains a list of TrafficMirrorSessions
type TrafficMirrorSessionList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []TrafficMirrorSession `json:"items"`
}

// Repository type metadata.
var (
	TrafficMirrorSession_Kind             = "TrafficMirrorSession"
	TrafficMirrorSession_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: TrafficMirrorSession_Kind}.String()
	TrafficMirrorSession_KindAPIVersion   = TrafficMirrorSession_Kind + "." + CRDGroupVersion.String()
	TrafficMirrorSession_GroupVersionKind = CRDGroupVersion.WithKind(TrafficMirrorSession_Kind)
)

func init() {
	SchemeBuilder.Register(&TrafficMirrorSession{}, &TrafficMirrorSessionList{})
}
