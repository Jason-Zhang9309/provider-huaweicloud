// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type NetworkInterfaceInitParameters struct {

	// Specifies an array of IP addresses that can be active on the
	// network interface. If the IP address is "1.1.1.1/0", it means that the source/destination address
	// check switch is turned off.
	AllowedAddresses []*string `json:"allowedAddresses,omitempty" tf:"allowed_addresses,omitempty"`

	// Specifies the DHCP lease time. The value format of value is "Xh",
	// the value of "X" is "-1" or from "1" to "30000". If the value is "-1", the DHCP lease time is infinite.
	DHCPLeaseTime *string `json:"dhcpLeaseTime,omitempty" tf:"dhcp_lease_time,omitempty"`

	// Specifies the network interface IPv4 address.
	// Changing this creates a new resource.
	FixedIPV4 *string `json:"fixedIpV4,omitempty" tf:"fixed_ip_v4,omitempty"`

	// Specifies the network interface name.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Specifies the region in which to create the resource.
	// If omitted, the provider-level region will be used.
	// Changing this creates a new resource.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Specifies an array of one or more security group IDs.
	SecurityGroupIds []*string `json:"securityGroupIds,omitempty" tf:"security_group_ids,omitempty"`

	// Specifies the ID of the subnet to which the network interface belongs.
	// Changing this creates a new resource.
	// +crossplane:generate:reference:type=github.com/huaweicloud/provider-huaweicloud/apis/vpc/v1alpha1.Subnet
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id,omitempty"`

	// Reference to a Subnet in vpc to populate subnetId.
	// +kubebuilder:validation:Optional
	SubnetIDRef *v1.Reference `json:"subnetIdRef,omitempty" tf:"-"`

	// Selector for a Subnet in vpc to populate subnetId.
	// +kubebuilder:validation:Optional
	SubnetIDSelector *v1.Selector `json:"subnetIdSelector,omitempty" tf:"-"`
}

type NetworkInterfaceObservation struct {

	// Specifies an array of IP addresses that can be active on the
	// network interface. If the IP address is "1.1.1.1/0", it means that the source/destination address
	// check switch is turned off.
	AllowedAddresses []*string `json:"allowedAddresses,omitempty" tf:"allowed_addresses,omitempty"`

	// Indicates the availability zone to which the network interface belongs.
	AvailabilityZone *string `json:"availabilityZone,omitempty" tf:"availability_zone,omitempty"`

	// Specifies the DHCP lease time. The value format of value is "Xh",
	// the value of "X" is "-1" or from "1" to "30000". If the value is "-1", the DHCP lease time is infinite.
	DHCPLeaseTime *string `json:"dhcpLeaseTime,omitempty" tf:"dhcp_lease_time,omitempty"`

	// Indicates the default private network DNS name of the primary NIC.
	DNSName *string `json:"dnsName,omitempty" tf:"dns_name,omitempty"`

	// Indicates the ID of the device to which the network interface belongs.
	DeviceID *string `json:"deviceId,omitempty" tf:"device_id,omitempty"`

	// Indicates the belonged device, which can be the DHCP server, router, load balancer, or Nova.
	DeviceOwner *string `json:"deviceOwner,omitempty" tf:"device_owner,omitempty"`

	// Indicates whether to enable EFI.
	EnableEfi *bool `json:"enableEfi,omitempty" tf:"enable_efi,omitempty"`

	// Specifies the network interface IPv4 address.
	// Changing this creates a new resource.
	FixedIPV4 *string `json:"fixedIpV4,omitempty" tf:"fixed_ip_v4,omitempty"`

	// The resource ID.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Indicates the Shared bandwidth ID bound to IPv6 network interface.
	IPv6BandwidthID *string `json:"ipv6BandwidthId,omitempty" tf:"ipv6_bandwidth_id,omitempty"`

	// Indicates the ID of the instance to which the network interface belongs.
	InstanceID *string `json:"instanceId,omitempty" tf:"instance_id,omitempty"`

	// Indicates the type of the instance to which the network interface belongs.
	InstanceType *string `json:"instanceType,omitempty" tf:"instance_type,omitempty"`

	// Indicates the network interface MAC address.
	MacAddress *string `json:"macAddress,omitempty" tf:"mac_address,omitempty"`

	// Specifies the network interface name.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Indicates whether the security option is enabled for the network interface.
	// If the option is not enabled, the security group and DHCP snooping do not take effect.
	PortSecurityEnabled *bool `json:"portSecurityEnabled,omitempty" tf:"port_security_enabled,omitempty"`

	// Specifies the region in which to create the resource.
	// If omitted, the provider-level region will be used.
	// Changing this creates a new resource.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Specifies an array of one or more security group IDs.
	SecurityGroupIds []*string `json:"securityGroupIds,omitempty" tf:"security_group_ids,omitempty"`

	// Indicates the network interface status.
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// Specifies the ID of the subnet to which the network interface belongs.
	// Changing this creates a new resource.
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id,omitempty"`
}

type NetworkInterfaceParameters struct {

	// Specifies an array of IP addresses that can be active on the
	// network interface. If the IP address is "1.1.1.1/0", it means that the source/destination address
	// check switch is turned off.
	// +kubebuilder:validation:Optional
	AllowedAddresses []*string `json:"allowedAddresses,omitempty" tf:"allowed_addresses,omitempty"`

	// Specifies the DHCP lease time. The value format of value is "Xh",
	// the value of "X" is "-1" or from "1" to "30000". If the value is "-1", the DHCP lease time is infinite.
	// +kubebuilder:validation:Optional
	DHCPLeaseTime *string `json:"dhcpLeaseTime,omitempty" tf:"dhcp_lease_time,omitempty"`

	// Specifies the network interface IPv4 address.
	// Changing this creates a new resource.
	// +kubebuilder:validation:Optional
	FixedIPV4 *string `json:"fixedIpV4,omitempty" tf:"fixed_ip_v4,omitempty"`

	// Specifies the network interface name.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Specifies the region in which to create the resource.
	// If omitted, the provider-level region will be used.
	// Changing this creates a new resource.
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Specifies an array of one or more security group IDs.
	// +kubebuilder:validation:Optional
	SecurityGroupIds []*string `json:"securityGroupIds,omitempty" tf:"security_group_ids,omitempty"`

	// Specifies the ID of the subnet to which the network interface belongs.
	// Changing this creates a new resource.
	// +crossplane:generate:reference:type=github.com/huaweicloud/provider-huaweicloud/apis/vpc/v1alpha1.Subnet
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id,omitempty"`

	// Reference to a Subnet in vpc to populate subnetId.
	// +kubebuilder:validation:Optional
	SubnetIDRef *v1.Reference `json:"subnetIdRef,omitempty" tf:"-"`

	// Selector for a Subnet in vpc to populate subnetId.
	// +kubebuilder:validation:Optional
	SubnetIDSelector *v1.Selector `json:"subnetIdSelector,omitempty" tf:"-"`
}

// NetworkInterfaceSpec defines the desired state of NetworkInterface
type NetworkInterfaceSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     NetworkInterfaceParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider NetworkInterfaceInitParameters `json:"initProvider,omitempty"`
}

// NetworkInterfaceStatus defines the observed state of NetworkInterface.
type NetworkInterfaceStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        NetworkInterfaceObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// NetworkInterface is the Schema for the NetworkInterfaces API. ""
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,huaweicloud}
type NetworkInterface struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              NetworkInterfaceSpec   `json:"spec"`
	Status            NetworkInterfaceStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// NetworkInterfaceList contains a list of NetworkInterfaces
type NetworkInterfaceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []NetworkInterface `json:"items"`
}

// Repository type metadata.
var (
	NetworkInterface_Kind             = "NetworkInterface"
	NetworkInterface_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: NetworkInterface_Kind}.String()
	NetworkInterface_KindAPIVersion   = NetworkInterface_Kind + "." + CRDGroupVersion.String()
	NetworkInterface_GroupVersionKind = CRDGroupVersion.WithKind(NetworkInterface_Kind)
)

func init() {
	SchemeBuilder.Register(&NetworkInterface{}, &NetworkInterfaceList{})
}
