// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type VipInitParameters struct {

	// Specifies the IP address desired in the subnet for this VIP.
	// Changing this will create a new VIP resource.
	IPAddress *string `json:"ipAddress,omitempty" tf:"ip_address,omitempty"`

	// Specifies the IP version, either 4 (default) or 6.
	// Changing this will create a new VIP resource.
	IPVersion *float64 `json:"ipVersion,omitempty" tf:"ip_version,omitempty"`

	// Specifies a unique name for the VIP.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Specifies the network ID of the VPC subnet to which the VIP belongs.
	// Changing this will create a new VIP resource.
	// +crossplane:generate:reference:type=github.com/huaweicloud/provider-huaweicloud/apis/vpc/v1alpha1.Subnet
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	NetworkID *string `json:"networkId,omitempty" tf:"network_id,omitempty"`

	// Reference to a Subnet in vpc to populate networkId.
	// +kubebuilder:validation:Optional
	NetworkIDRef *v1.Reference `json:"networkIdRef,omitempty" tf:"-"`

	// Selector for a Subnet in vpc to populate networkId.
	// +kubebuilder:validation:Optional
	NetworkIDSelector *v1.Selector `json:"networkIdSelector,omitempty" tf:"-"`

	// Specifies the region in which to create the VIP.
	// If omitted, the provider-level region will be used. Changing this will create a new VIP resource.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// The VIP ID.
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id,omitempty"`
}

type VipObservation struct {

	// The device owner of the VIP.
	DeviceOwner *string `json:"deviceOwner,omitempty" tf:"device_owner,omitempty"`

	// The VIP ID.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Specifies the IP address desired in the subnet for this VIP.
	// Changing this will create a new VIP resource.
	IPAddress *string `json:"ipAddress,omitempty" tf:"ip_address,omitempty"`

	// Specifies the IP version, either 4 (default) or 6.
	// Changing this will create a new VIP resource.
	IPVersion *float64 `json:"ipVersion,omitempty" tf:"ip_version,omitempty"`

	// The MAC address of the VIP.
	MacAddress *string `json:"macAddress,omitempty" tf:"mac_address,omitempty"`

	// Specifies a unique name for the VIP.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Specifies the network ID of the VPC subnet to which the VIP belongs.
	// Changing this will create a new VIP resource.
	NetworkID *string `json:"networkId,omitempty" tf:"network_id,omitempty"`

	// Specifies the region in which to create the VIP.
	// If omitted, the provider-level region will be used. Changing this will create a new VIP resource.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// The VIP status.
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// The VIP ID.
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id,omitempty"`
}

type VipParameters struct {

	// Specifies the IP address desired in the subnet for this VIP.
	// Changing this will create a new VIP resource.
	// +kubebuilder:validation:Optional
	IPAddress *string `json:"ipAddress,omitempty" tf:"ip_address,omitempty"`

	// Specifies the IP version, either 4 (default) or 6.
	// Changing this will create a new VIP resource.
	// +kubebuilder:validation:Optional
	IPVersion *float64 `json:"ipVersion,omitempty" tf:"ip_version,omitempty"`

	// Specifies a unique name for the VIP.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Specifies the network ID of the VPC subnet to which the VIP belongs.
	// Changing this will create a new VIP resource.
	// +crossplane:generate:reference:type=github.com/huaweicloud/provider-huaweicloud/apis/vpc/v1alpha1.Subnet
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	NetworkID *string `json:"networkId,omitempty" tf:"network_id,omitempty"`

	// Reference to a Subnet in vpc to populate networkId.
	// +kubebuilder:validation:Optional
	NetworkIDRef *v1.Reference `json:"networkIdRef,omitempty" tf:"-"`

	// Selector for a Subnet in vpc to populate networkId.
	// +kubebuilder:validation:Optional
	NetworkIDSelector *v1.Selector `json:"networkIdSelector,omitempty" tf:"-"`

	// Specifies the region in which to create the VIP.
	// If omitted, the provider-level region will be used. Changing this will create a new VIP resource.
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// The VIP ID.
	// +kubebuilder:validation:Optional
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id,omitempty"`
}

// VipSpec defines the desired state of Vip
type VipSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     VipParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider VipInitParameters `json:"initProvider,omitempty"`
}

// VipStatus defines the observed state of Vip.
type VipStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        VipObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Vip is the Schema for the Vips API. ""
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,huaweicloud}
type Vip struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              VipSpec   `json:"spec"`
	Status            VipStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// VipList contains a list of Vips
type VipList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Vip `json:"items"`
}

// Repository type metadata.
var (
	Vip_Kind             = "Vip"
	Vip_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Vip_Kind}.String()
	Vip_KindAPIVersion   = Vip_Kind + "." + CRDGroupVersion.String()
	Vip_GroupVersionKind = CRDGroupVersion.WithKind(Vip_Kind)
)

func init() {
	SchemeBuilder.Register(&Vip{}, &VipList{})
}
