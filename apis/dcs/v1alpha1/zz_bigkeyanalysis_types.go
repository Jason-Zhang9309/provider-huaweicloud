// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type BigkeyAnalysisInitParameters struct {

	// Specifies the ID of the DCS instance.
	// Changing this parameter will create a new resource.
	// Specifies the ID of the DCS instance.
	// +crossplane:generate:reference:type=github.com/huaweicloud/provider-huaweicloud/apis/dcs/v1alpha1.Instance
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	InstanceID *string `json:"instanceId,omitempty" tf:"instance_id,omitempty"`

	// Reference to a Instance in dcs to populate instanceId.
	// +kubebuilder:validation:Optional
	InstanceIDRef *v1.Reference `json:"instanceIdRef,omitempty" tf:"-"`

	// Selector for a Instance in dcs to populate instanceId.
	// +kubebuilder:validation:Optional
	InstanceIDSelector *v1.Selector `json:"instanceIdSelector,omitempty" tf:"-"`

	// Specifies the region in which to create the resource.
	// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`
}

type BigkeyAnalysisObservation struct {

	// Indicates the creation time of the big key analysis. The format is yyyy-mm-dd hh:mm:ss.
	// The value is in UTC format.
	// Indicates the creation time of the big key analysis.
	CreatedAt *string `json:"createdAt,omitempty" tf:"created_at,omitempty"`

	// Indicates the time when the big key analysis ended. The format is yyyy-mm-dd hh:mm:ss.
	// The value is in UTC format.
	// Indicates the time when the big key analysis ended.
	FinishedAt *string `json:"finishedAt,omitempty" tf:"finished_at,omitempty"`

	// The resource ID.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Specifies the ID of the DCS instance.
	// Changing this parameter will create a new resource.
	// Specifies the ID of the DCS instance.
	InstanceID *string `json:"instanceId,omitempty" tf:"instance_id,omitempty"`

	// Indicates the record of big key.
	// The keys structure is documented below.
	Keys []KeysObservation `json:"keys,omitempty" tf:"keys,omitempty"`

	// Indicates the number of the big key.
	// Indicates the number of the big key.
	Num *float64 `json:"num,omitempty" tf:"num,omitempty"`

	// Specifies the region in which to create the resource.
	// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Indicates the mode of the big key analysis. The value can be:
	// Indicates the mode of the big key analysis.
	ScanType *string `json:"scanType,omitempty" tf:"scan_type,omitempty"`

	// Indicates the time when the big key analysis started. The format is yyyy-mm-dd hh:mm:ss.
	// The value is in UTC format.
	// Indicates the time when the big key analysis started.
	StartedAt *string `json:"startedAt,omitempty" tf:"started_at,omitempty"`

	// Indicates the analysis status. The value can be:
	// Indicates the status of the big key analysis.
	Status *string `json:"status,omitempty" tf:"status,omitempty"`
}

type BigkeyAnalysisParameters struct {

	// Specifies the ID of the DCS instance.
	// Changing this parameter will create a new resource.
	// Specifies the ID of the DCS instance.
	// +crossplane:generate:reference:type=github.com/huaweicloud/provider-huaweicloud/apis/dcs/v1alpha1.Instance
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	InstanceID *string `json:"instanceId,omitempty" tf:"instance_id,omitempty"`

	// Reference to a Instance in dcs to populate instanceId.
	// +kubebuilder:validation:Optional
	InstanceIDRef *v1.Reference `json:"instanceIdRef,omitempty" tf:"-"`

	// Selector for a Instance in dcs to populate instanceId.
	// +kubebuilder:validation:Optional
	InstanceIDSelector *v1.Selector `json:"instanceIdSelector,omitempty" tf:"-"`

	// Specifies the region in which to create the resource.
	// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`
}

type KeysInitParameters struct {
}

type KeysObservation struct {

	// Indicates the database where the big key is located.
	DB *float64 `json:"db,omitempty" tf:"db,omitempty"`

	// Indicates the name of the big key.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Indicates the shard where the big key is located.
	// This parameter is supported only when the instance type is cluster. The format is ip:port.
	Shard *string `json:"shard,omitempty" tf:"shard,omitempty"`

	// Indicates the size of the key value.
	Size *float64 `json:"size,omitempty" tf:"size,omitempty"`

	// Indicates the type of the big key. The value can be string, list, set, zset, hash.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// Indicates the unit of the big key. The value can be:
	Unit *string `json:"unit,omitempty" tf:"unit,omitempty"`
}

type KeysParameters struct {
}

// BigkeyAnalysisSpec defines the desired state of BigkeyAnalysis
type BigkeyAnalysisSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     BigkeyAnalysisParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider BigkeyAnalysisInitParameters `json:"initProvider,omitempty"`
}

// BigkeyAnalysisStatus defines the observed state of BigkeyAnalysis.
type BigkeyAnalysisStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        BigkeyAnalysisObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// BigkeyAnalysis is the Schema for the BigkeyAnalysiss API. ""
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,huaweicloud}
type BigkeyAnalysis struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              BigkeyAnalysisSpec   `json:"spec"`
	Status            BigkeyAnalysisStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// BigkeyAnalysisList contains a list of BigkeyAnalysiss
type BigkeyAnalysisList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []BigkeyAnalysis `json:"items"`
}

// Repository type metadata.
var (
	BigkeyAnalysis_Kind             = "BigkeyAnalysis"
	BigkeyAnalysis_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: BigkeyAnalysis_Kind}.String()
	BigkeyAnalysis_KindAPIVersion   = BigkeyAnalysis_Kind + "." + CRDGroupVersion.String()
	BigkeyAnalysis_GroupVersionKind = CRDGroupVersion.WithKind(BigkeyAnalysis_Kind)
)

func init() {
	SchemeBuilder.Register(&BigkeyAnalysis{}, &BigkeyAnalysisList{})
}
