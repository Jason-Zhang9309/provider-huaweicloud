// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type TopicInitParameters struct {

	// schema: Internal
	AccessPolicy *string `json:"accessPolicy,omitempty" tf:"access_policy,omitempty"`

	// Specifies the topic display name, which is presented as the name of the email
	// sender in an email message. The name can contains of 0 to 192 characters.
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// Specifies the enterprise project id of the SMN Topic, Value 0
	// indicates the default enterprise project. Changing this parameter will create a new resource.
	EnterpriseProjectID *string `json:"enterpriseProjectId,omitempty" tf:"enterprise_project_id,omitempty"`

	// Specifies the introduction of the topic,
	// this will be contained in the subscription invitation.
	Introduction *string `json:"introduction,omitempty" tf:"introduction,omitempty"`

	// Specifies the name of the topic to be created. The name can contains of 1 to 255
	// characters and must start with a letter or digit, and can only contain letters, digits, underscores (_), and hyphens (-).
	// Changing this parameter will create a new resource.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The region in which to create the SMN topic resource. If omitted, the
	// provider-level region will be used. Changing this parameter will create a new resource.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Specifies the services that can publish messages to this topic
	// separated by comma(,). If left empty, that means no service allowed.
	ServicesPublishAllowed *string `json:"servicesPublishAllowed,omitempty" tf:"services_publish_allowed,omitempty"`

	// Specifies the tags of the SMN topic, key/value pair format.
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// Specifies the users who can publish messages to this topic.
	// The value can be * which indicates all users or user account URNs separated by comma(,). The format of
	// user account URN is urn:csp:iam::domainId:root. domainId indicates the account ID of another user.
	// If left empty, that means only the topic creator can publish messages.
	UsersPublishAllowed *string `json:"usersPublishAllowed,omitempty" tf:"users_publish_allowed,omitempty"`
}

type TopicObservation struct {

	// schema: Internal
	AccessPolicy *string `json:"accessPolicy,omitempty" tf:"access_policy,omitempty"`

	// Time when the topic was created.
	CreateTime *string `json:"createTime,omitempty" tf:"create_time,omitempty"`

	// Specifies the topic display name, which is presented as the name of the email
	// sender in an email message. The name can contains of 0 to 192 characters.
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// Specifies the enterprise project id of the SMN Topic, Value 0
	// indicates the default enterprise project. Changing this parameter will create a new resource.
	EnterpriseProjectID *string `json:"enterpriseProjectId,omitempty" tf:"enterprise_project_id,omitempty"`

	// The resource ID. The value is the topic urn.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Specifies the introduction of the topic,
	// this will be contained in the subscription invitation.
	Introduction *string `json:"introduction,omitempty" tf:"introduction,omitempty"`

	// Specifies the name of the topic to be created. The name can contains of 1 to 255
	// characters and must start with a letter or digit, and can only contain letters, digits, underscores (_), and hyphens (-).
	// Changing this parameter will create a new resource.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Message pushing policy.
	PushPolicy *float64 `json:"pushPolicy,omitempty" tf:"push_policy,omitempty"`

	// The region in which to create the SMN topic resource. If omitted, the
	// provider-level region will be used. Changing this parameter will create a new resource.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Specifies the services that can publish messages to this topic
	// separated by comma(,). If left empty, that means no service allowed.
	ServicesPublishAllowed *string `json:"servicesPublishAllowed,omitempty" tf:"services_publish_allowed,omitempty"`

	// Specifies the tags of the SMN topic, key/value pair format.
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// Resource identifier of a topic, which is unique.
	TopicUrn *string `json:"topicUrn,omitempty" tf:"topic_urn,omitempty"`

	// Time when the topic was updated.
	UpdateTime *string `json:"updateTime,omitempty" tf:"update_time,omitempty"`

	// Specifies the users who can publish messages to this topic.
	// The value can be * which indicates all users or user account URNs separated by comma(,). The format of
	// user account URN is urn:csp:iam::domainId:root. domainId indicates the account ID of another user.
	// If left empty, that means only the topic creator can publish messages.
	UsersPublishAllowed *string `json:"usersPublishAllowed,omitempty" tf:"users_publish_allowed,omitempty"`
}

type TopicParameters struct {

	// schema: Internal
	// +kubebuilder:validation:Optional
	AccessPolicy *string `json:"accessPolicy,omitempty" tf:"access_policy,omitempty"`

	// Specifies the topic display name, which is presented as the name of the email
	// sender in an email message. The name can contains of 0 to 192 characters.
	// +kubebuilder:validation:Optional
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// Specifies the enterprise project id of the SMN Topic, Value 0
	// indicates the default enterprise project. Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	EnterpriseProjectID *string `json:"enterpriseProjectId,omitempty" tf:"enterprise_project_id,omitempty"`

	// Specifies the introduction of the topic,
	// this will be contained in the subscription invitation.
	// +kubebuilder:validation:Optional
	Introduction *string `json:"introduction,omitempty" tf:"introduction,omitempty"`

	// Specifies the name of the topic to be created. The name can contains of 1 to 255
	// characters and must start with a letter or digit, and can only contain letters, digits, underscores (_), and hyphens (-).
	// Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The region in which to create the SMN topic resource. If omitted, the
	// provider-level region will be used. Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Specifies the services that can publish messages to this topic
	// separated by comma(,). If left empty, that means no service allowed.
	// +kubebuilder:validation:Optional
	ServicesPublishAllowed *string `json:"servicesPublishAllowed,omitempty" tf:"services_publish_allowed,omitempty"`

	// Specifies the tags of the SMN topic, key/value pair format.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// Specifies the users who can publish messages to this topic.
	// The value can be * which indicates all users or user account URNs separated by comma(,). The format of
	// user account URN is urn:csp:iam::domainId:root. domainId indicates the account ID of another user.
	// If left empty, that means only the topic creator can publish messages.
	// +kubebuilder:validation:Optional
	UsersPublishAllowed *string `json:"usersPublishAllowed,omitempty" tf:"users_publish_allowed,omitempty"`
}

// TopicSpec defines the desired state of Topic
type TopicSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     TopicParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider TopicInitParameters `json:"initProvider,omitempty"`
}

// TopicStatus defines the observed state of Topic.
type TopicStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        TopicObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Topic is the Schema for the Topics API. ""
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,huaweicloud}
type Topic struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	Spec   TopicSpec   `json:"spec"`
	Status TopicStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// TopicList contains a list of Topics
type TopicList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Topic `json:"items"`
}

// Repository type metadata.
var (
	Topic_Kind             = "Topic"
	Topic_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Topic_Kind}.String()
	Topic_KindAPIVersion   = Topic_Kind + "." + CRDGroupVersion.String()
	Topic_GroupVersionKind = CRDGroupVersion.WithKind(Topic_Kind)
)

func init() {
	SchemeBuilder.Register(&Topic{}, &TopicList{})
}
