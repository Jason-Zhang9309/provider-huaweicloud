// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by angryjet. DO NOT EDIT.

package v1alpha1

import (
	"context"
	reference "github.com/crossplane/crossplane-runtime/pkg/reference"
	resource "github.com/crossplane/upjet/pkg/resource"
	errors "github.com/pkg/errors"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// ResolveReferences of this Logtank.
func (mg *Logtank) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.TopicUrn),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.TopicUrnRef,
		Selector:     mg.Spec.ForProvider.TopicUrnSelector,
		To: reference.To{
			List:    &TopicList{},
			Managed: &Topic{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.TopicUrn")
	}
	mg.Spec.ForProvider.TopicUrn = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.TopicUrnRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.TopicUrn),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.InitProvider.TopicUrnRef,
		Selector:     mg.Spec.InitProvider.TopicUrnSelector,
		To: reference.To{
			List:    &TopicList{},
			Managed: &Topic{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.TopicUrn")
	}
	mg.Spec.InitProvider.TopicUrn = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.TopicUrnRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this MessageDetection.
func (mg *MessageDetection) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.TopicUrn),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.TopicUrnRef,
		Selector:     mg.Spec.ForProvider.TopicUrnSelector,
		To: reference.To{
			List:    &TopicList{},
			Managed: &Topic{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.TopicUrn")
	}
	mg.Spec.ForProvider.TopicUrn = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.TopicUrnRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.TopicUrn),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.InitProvider.TopicUrnRef,
		Selector:     mg.Spec.InitProvider.TopicUrnSelector,
		To: reference.To{
			List:    &TopicList{},
			Managed: &Topic{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.TopicUrn")
	}
	mg.Spec.InitProvider.TopicUrn = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.TopicUrnRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this MessagePublish.
func (mg *MessagePublish) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.TopicUrn),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.TopicUrnRef,
		Selector:     mg.Spec.ForProvider.TopicUrnSelector,
		To: reference.To{
			List:    &TopicList{},
			Managed: &Topic{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.TopicUrn")
	}
	mg.Spec.ForProvider.TopicUrn = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.TopicUrnRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.TopicUrn),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.InitProvider.TopicUrnRef,
		Selector:     mg.Spec.InitProvider.TopicUrnSelector,
		To: reference.To{
			List:    &TopicList{},
			Managed: &Topic{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.TopicUrn")
	}
	mg.Spec.InitProvider.TopicUrn = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.TopicUrnRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this Subscription.
func (mg *Subscription) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.TopicUrn),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.TopicUrnRef,
		Selector:     mg.Spec.ForProvider.TopicUrnSelector,
		To: reference.To{
			List:    &TopicList{},
			Managed: &Topic{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.TopicUrn")
	}
	mg.Spec.ForProvider.TopicUrn = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.TopicUrnRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.TopicUrn),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.InitProvider.TopicUrnRef,
		Selector:     mg.Spec.InitProvider.TopicUrnSelector,
		To: reference.To{
			List:    &TopicList{},
			Managed: &Topic{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.TopicUrn")
	}
	mg.Spec.InitProvider.TopicUrn = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.TopicUrnRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this SubscriptionFilterPolicy.
func (mg *SubscriptionFilterPolicy) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.SubscriptionUrn),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.SubscriptionUrnRef,
		Selector:     mg.Spec.ForProvider.SubscriptionUrnSelector,
		To: reference.To{
			List:    &SubscriptionList{},
			Managed: &Subscription{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.SubscriptionUrn")
	}
	mg.Spec.ForProvider.SubscriptionUrn = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.SubscriptionUrnRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.SubscriptionUrn),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.InitProvider.SubscriptionUrnRef,
		Selector:     mg.Spec.InitProvider.SubscriptionUrnSelector,
		To: reference.To{
			List:    &SubscriptionList{},
			Managed: &Subscription{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.SubscriptionUrn")
	}
	mg.Spec.InitProvider.SubscriptionUrn = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.SubscriptionUrnRef = rsp.ResolvedReference

	return nil
}
