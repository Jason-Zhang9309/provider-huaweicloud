// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ExtensionInitParameters struct {

	// Specifies the client ID. This field is the tenant ID field in
	// the WeLink subscription and is obtained by the tenant from WeLink. This field is mandatory when protocol
	// is set to welink. Changing this parameter will create a new resource.
	ClientID *string `json:"clientId,omitempty" tf:"client_id,omitempty"`

	// Specifies the client secret. This field is the client secret
	// field obtained by the tenant from WeLink. This field is mandatory when protocol is set to welink.
	// Changing this parameter will create a new resource.
	ClientSecret *string `json:"clientSecret,omitempty" tf:"client_secret,omitempty"`

	// Specifies the keyword. When protocol is set to feishu,
	// either keyword or sign_secret must be specified. When you use keywords to configure a security policy
	// for the Lark or DingTalk chatbot on SMN, the keywords must have one of the keywords configured on the Lark
	// or DingTalk client. Changing this parameter will create a new resource.
	Keyword *string `json:"keyword,omitempty" tf:"keyword,omitempty"`

	// Specifies the key including signature. When protocol is set
	// to feishu or dingding, this field or keyword must be specified. The key configurations must be
	// the same as those on the Lark or DingTalk client. For example, if only key is configured on the Lark client,
	// enter the key field obtained from the Lark client. If only keyword is configured on the Lark client, skip this field.
	// Changing this parameter will create a new resource.
	SignSecret *string `json:"signSecret,omitempty" tf:"sign_secret,omitempty"`
}

type ExtensionObservation struct {

	// Specifies the client ID. This field is the tenant ID field in
	// the WeLink subscription and is obtained by the tenant from WeLink. This field is mandatory when protocol
	// is set to welink. Changing this parameter will create a new resource.
	ClientID *string `json:"clientId,omitempty" tf:"client_id,omitempty"`

	// Specifies the client secret. This field is the client secret
	// field obtained by the tenant from WeLink. This field is mandatory when protocol is set to welink.
	// Changing this parameter will create a new resource.
	ClientSecret *string `json:"clientSecret,omitempty" tf:"client_secret,omitempty"`

	// Specifies the keyword. When protocol is set to feishu,
	// either keyword or sign_secret must be specified. When you use keywords to configure a security policy
	// for the Lark or DingTalk chatbot on SMN, the keywords must have one of the keywords configured on the Lark
	// or DingTalk client. Changing this parameter will create a new resource.
	Keyword *string `json:"keyword,omitempty" tf:"keyword,omitempty"`

	// Specifies the key including signature. When protocol is set
	// to feishu or dingding, this field or keyword must be specified. The key configurations must be
	// the same as those on the Lark or DingTalk client. For example, if only key is configured on the Lark client,
	// enter the key field obtained from the Lark client. If only keyword is configured on the Lark client, skip this field.
	// Changing this parameter will create a new resource.
	SignSecret *string `json:"signSecret,omitempty" tf:"sign_secret,omitempty"`
}

type ExtensionParameters struct {

	// Specifies the client ID. This field is the tenant ID field in
	// the WeLink subscription and is obtained by the tenant from WeLink. This field is mandatory when protocol
	// is set to welink. Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	ClientID *string `json:"clientId,omitempty" tf:"client_id,omitempty"`

	// Specifies the client secret. This field is the client secret
	// field obtained by the tenant from WeLink. This field is mandatory when protocol is set to welink.
	// Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	ClientSecret *string `json:"clientSecret,omitempty" tf:"client_secret,omitempty"`

	// Specifies the keyword. When protocol is set to feishu,
	// either keyword or sign_secret must be specified. When you use keywords to configure a security policy
	// for the Lark or DingTalk chatbot on SMN, the keywords must have one of the keywords configured on the Lark
	// or DingTalk client. Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	Keyword *string `json:"keyword,omitempty" tf:"keyword,omitempty"`

	// Specifies the key including signature. When protocol is set
	// to feishu or dingding, this field or keyword must be specified. The key configurations must be
	// the same as those on the Lark or DingTalk client. For example, if only key is configured on the Lark client,
	// enter the key field obtained from the Lark client. If only keyword is configured on the Lark client, skip this field.
	// Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	SignSecret *string `json:"signSecret,omitempty" tf:"sign_secret,omitempty"`
}

type FilterPoliciesInitParameters struct {
}

type FilterPoliciesObservation struct {

	// The filter policy name.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The string array for exact match.
	StringEquals []*string `json:"stringEquals,omitempty" tf:"string_equals,omitempty"`
}

type FilterPoliciesParameters struct {
}

type SubscriptionInitParameters struct {

	// Message endpoint. Changing this parameter will create a new resource.
	Endpoint *string `json:"endpoint,omitempty" tf:"endpoint,omitempty"`

	// Specifies the extension configurations.
	// The extension structure is documented below.
	// Changing this parameter will create a new resource.
	Extension []ExtensionInitParameters `json:"extension,omitempty" tf:"extension,omitempty"`

	// Specifies the protocol of the message endpoint. Currently, email,
	// sms, http, https, functionstage, functiongraph, callnotify, wechat, dingding,
	// feishu and welink are supported. Changing this parameter will create a new resource.
	Protocol *string `json:"protocol,omitempty" tf:"protocol,omitempty"`

	// The region in which to create the SMN subscription resource. If omitted, the
	// provider-level region will be used. Changing this parameter will create a new resource.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Remark information. The remarks must be a UTF-8-coded character string
	// containing 128 bytes. Changing this parameter will create a new resource.
	Remark *string `json:"remark,omitempty" tf:"remark,omitempty"`

	// Specifies the resource identifier of a topic, which is unique.
	// Changing this parameter will create a new resource.
	// +crossplane:generate:reference:type=github.com/huaweicloud/provider-huaweicloud/apis/smn/v1alpha1.Topic
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	TopicUrn *string `json:"topicUrn,omitempty" tf:"topic_urn,omitempty"`

	// Reference to a Topic in smn to populate topicUrn.
	// +kubebuilder:validation:Optional
	TopicUrnRef *v1.Reference `json:"topicUrnRef,omitempty" tf:"-"`

	// Selector for a Topic in smn to populate topicUrn.
	// +kubebuilder:validation:Optional
	TopicUrnSelector *v1.Selector `json:"topicUrnSelector,omitempty" tf:"-"`
}

type SubscriptionObservation struct {

	// Message endpoint. Changing this parameter will create a new resource.
	Endpoint *string `json:"endpoint,omitempty" tf:"endpoint,omitempty"`

	// Specifies the extension configurations.
	// The extension structure is documented below.
	// Changing this parameter will create a new resource.
	Extension []ExtensionObservation `json:"extension,omitempty" tf:"extension,omitempty"`

	// The message filter policies of a subscriber.
	// The filter_policies structure is documented below.
	// The message filter policies of a subscriber.
	FilterPolicies []FilterPoliciesObservation `json:"filterPolicies,omitempty" tf:"filter_policies,omitempty"`

	// The resource ID. The value is the subscription urn.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Project ID of the topic creator.
	Owner *string `json:"owner,omitempty" tf:"owner,omitempty"`

	// Specifies the protocol of the message endpoint. Currently, email,
	// sms, http, https, functionstage, functiongraph, callnotify, wechat, dingding,
	// feishu and welink are supported. Changing this parameter will create a new resource.
	Protocol *string `json:"protocol,omitempty" tf:"protocol,omitempty"`

	// The region in which to create the SMN subscription resource. If omitted, the
	// provider-level region will be used. Changing this parameter will create a new resource.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Remark information. The remarks must be a UTF-8-coded character string
	// containing 128 bytes. Changing this parameter will create a new resource.
	Remark *string `json:"remark,omitempty" tf:"remark,omitempty"`

	// Subscription status.
	Status *float64 `json:"status,omitempty" tf:"status,omitempty"`

	// Resource identifier of a subscription, which is unique.
	SubscriptionUrn *string `json:"subscriptionUrn,omitempty" tf:"subscription_urn,omitempty"`

	// Specifies the resource identifier of a topic, which is unique.
	// Changing this parameter will create a new resource.
	TopicUrn *string `json:"topicUrn,omitempty" tf:"topic_urn,omitempty"`
}

type SubscriptionParameters struct {

	// Message endpoint. Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	Endpoint *string `json:"endpoint,omitempty" tf:"endpoint,omitempty"`

	// Specifies the extension configurations.
	// The extension structure is documented below.
	// Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	Extension []ExtensionParameters `json:"extension,omitempty" tf:"extension,omitempty"`

	// Specifies the protocol of the message endpoint. Currently, email,
	// sms, http, https, functionstage, functiongraph, callnotify, wechat, dingding,
	// feishu and welink are supported. Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	Protocol *string `json:"protocol,omitempty" tf:"protocol,omitempty"`

	// The region in which to create the SMN subscription resource. If omitted, the
	// provider-level region will be used. Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Remark information. The remarks must be a UTF-8-coded character string
	// containing 128 bytes. Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	Remark *string `json:"remark,omitempty" tf:"remark,omitempty"`

	// Specifies the resource identifier of a topic, which is unique.
	// Changing this parameter will create a new resource.
	// +crossplane:generate:reference:type=github.com/huaweicloud/provider-huaweicloud/apis/smn/v1alpha1.Topic
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	TopicUrn *string `json:"topicUrn,omitempty" tf:"topic_urn,omitempty"`

	// Reference to a Topic in smn to populate topicUrn.
	// +kubebuilder:validation:Optional
	TopicUrnRef *v1.Reference `json:"topicUrnRef,omitempty" tf:"-"`

	// Selector for a Topic in smn to populate topicUrn.
	// +kubebuilder:validation:Optional
	TopicUrnSelector *v1.Selector `json:"topicUrnSelector,omitempty" tf:"-"`
}

// SubscriptionSpec defines the desired state of Subscription
type SubscriptionSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     SubscriptionParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider SubscriptionInitParameters `json:"initProvider,omitempty"`
}

// SubscriptionStatus defines the observed state of Subscription.
type SubscriptionStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        SubscriptionObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Subscription is the Schema for the Subscriptions API. ""
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,huaweicloud}
type Subscription struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.endpoint) || (has(self.initProvider) && has(self.initProvider.endpoint))",message="spec.forProvider.endpoint is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.protocol) || (has(self.initProvider) && has(self.initProvider.protocol))",message="spec.forProvider.protocol is a required parameter"
	Spec   SubscriptionSpec   `json:"spec"`
	Status SubscriptionStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SubscriptionList contains a list of Subscriptions
type SubscriptionList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Subscription `json:"items"`
}

// Repository type metadata.
var (
	Subscription_Kind             = "Subscription"
	Subscription_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Subscription_Kind}.String()
	Subscription_KindAPIVersion   = Subscription_Kind + "." + CRDGroupVersion.String()
	Subscription_GroupVersionKind = CRDGroupVersion.WithKind(Subscription_Kind)
)

func init() {
	SchemeBuilder.Register(&Subscription{}, &SubscriptionList{})
}
