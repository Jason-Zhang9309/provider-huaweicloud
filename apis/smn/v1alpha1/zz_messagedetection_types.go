// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type MessageDetectionInitParameters struct {
	EnableForceNew *string `json:"enableForceNew,omitempty" tf:"enable_force_new,omitempty"`

	// Specifies the endpoint address to be detected.
	// The address must start with http:// or https:// and cannot be left blank.
	// Specifies the endpoint address to be detected.
	Endpoint *string `json:"endpoint,omitempty" tf:"endpoint,omitempty"`

	// Specifies the extended key/value for subscriptions over HTTP or HTTPS.
	// These key/value pairs will be carried as the request header when HTTP or HTTPS messages are sent.
	// The key/value must meet the following requirements:
	// Specifies the extended key/value for subscriptions over HTTP or HTTPS.
	// +mapType=granular
	Extension map[string]*string `json:"extension,omitempty" tf:"extension,omitempty"`

	// Specifies the protocol type. The value can be http or https.
	// Specifies the protocol type.
	Protocol *string `json:"protocol,omitempty" tf:"protocol,omitempty"`

	// Specifies the region in which to create the resource.
	// If omitted, the provider-level region will be used.
	// Changing this creates a new resource.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Specifies the resource identifier of a topic.
	// Specifies the resource identifier of a topic.
	// +crossplane:generate:reference:type=github.com/huaweicloud/provider-huaweicloud/apis/smn/v1alpha1.Topic
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	TopicUrn *string `json:"topicUrn,omitempty" tf:"topic_urn,omitempty"`

	// Reference to a Topic in smn to populate topicUrn.
	// +kubebuilder:validation:Optional
	TopicUrnRef *v1.Reference `json:"topicUrnRef,omitempty" tf:"-"`

	// Selector for a Topic in smn to populate topicUrn.
	// +kubebuilder:validation:Optional
	TopicUrnSelector *v1.Selector `json:"topicUrnSelector,omitempty" tf:"-"`
}

type MessageDetectionObservation struct {
	EnableForceNew *string `json:"enableForceNew,omitempty" tf:"enable_force_new,omitempty"`

	// Specifies the endpoint address to be detected.
	// The address must start with http:// or https:// and cannot be left blank.
	// Specifies the endpoint address to be detected.
	Endpoint *string `json:"endpoint,omitempty" tf:"endpoint,omitempty"`

	// Specifies the extended key/value for subscriptions over HTTP or HTTPS.
	// These key/value pairs will be carried as the request header when HTTP or HTTPS messages are sent.
	// The key/value must meet the following requirements:
	// Specifies the extended key/value for subscriptions over HTTP or HTTPS.
	// +mapType=granular
	Extension map[string]*string `json:"extension,omitempty" tf:"extension,omitempty"`

	// The resource ID.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Specifies the protocol type. The value can be http or https.
	// Specifies the protocol type.
	Protocol *string `json:"protocol,omitempty" tf:"protocol,omitempty"`

	// Specifies the region in which to create the resource.
	// If omitted, the provider-level region will be used.
	// Changing this creates a new resource.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// The message detection result.
	// The message detection result.
	Result *string `json:"result,omitempty" tf:"result,omitempty"`

	// Specifies the resource identifier of a topic.
	// Specifies the resource identifier of a topic.
	TopicUrn *string `json:"topicUrn,omitempty" tf:"topic_urn,omitempty"`
}

type MessageDetectionParameters struct {

	// +kubebuilder:validation:Optional
	EnableForceNew *string `json:"enableForceNew,omitempty" tf:"enable_force_new,omitempty"`

	// Specifies the endpoint address to be detected.
	// The address must start with http:// or https:// and cannot be left blank.
	// Specifies the endpoint address to be detected.
	// +kubebuilder:validation:Optional
	Endpoint *string `json:"endpoint,omitempty" tf:"endpoint,omitempty"`

	// Specifies the extended key/value for subscriptions over HTTP or HTTPS.
	// These key/value pairs will be carried as the request header when HTTP or HTTPS messages are sent.
	// The key/value must meet the following requirements:
	// Specifies the extended key/value for subscriptions over HTTP or HTTPS.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Extension map[string]*string `json:"extension,omitempty" tf:"extension,omitempty"`

	// Specifies the protocol type. The value can be http or https.
	// Specifies the protocol type.
	// +kubebuilder:validation:Optional
	Protocol *string `json:"protocol,omitempty" tf:"protocol,omitempty"`

	// Specifies the region in which to create the resource.
	// If omitted, the provider-level region will be used.
	// Changing this creates a new resource.
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Specifies the resource identifier of a topic.
	// Specifies the resource identifier of a topic.
	// +crossplane:generate:reference:type=github.com/huaweicloud/provider-huaweicloud/apis/smn/v1alpha1.Topic
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	TopicUrn *string `json:"topicUrn,omitempty" tf:"topic_urn,omitempty"`

	// Reference to a Topic in smn to populate topicUrn.
	// +kubebuilder:validation:Optional
	TopicUrnRef *v1.Reference `json:"topicUrnRef,omitempty" tf:"-"`

	// Selector for a Topic in smn to populate topicUrn.
	// +kubebuilder:validation:Optional
	TopicUrnSelector *v1.Selector `json:"topicUrnSelector,omitempty" tf:"-"`
}

// MessageDetectionSpec defines the desired state of MessageDetection
type MessageDetectionSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     MessageDetectionParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider MessageDetectionInitParameters `json:"initProvider,omitempty"`
}

// MessageDetectionStatus defines the observed state of MessageDetection.
type MessageDetectionStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        MessageDetectionObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// MessageDetection is the Schema for the MessageDetections API. Manages a SMN message detection resource within HuaweiCloud.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,huaweicloud}
type MessageDetection struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.endpoint) || (has(self.initProvider) && has(self.initProvider.endpoint))",message="spec.forProvider.endpoint is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.protocol) || (has(self.initProvider) && has(self.initProvider.protocol))",message="spec.forProvider.protocol is a required parameter"
	Spec   MessageDetectionSpec   `json:"spec"`
	Status MessageDetectionStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// MessageDetectionList contains a list of MessageDetections
type MessageDetectionList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []MessageDetection `json:"items"`
}

// Repository type metadata.
var (
	MessageDetection_Kind             = "MessageDetection"
	MessageDetection_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: MessageDetection_Kind}.String()
	MessageDetection_KindAPIVersion   = MessageDetection_Kind + "." + CRDGroupVersion.String()
	MessageDetection_GroupVersionKind = CRDGroupVersion.WithKind(MessageDetection_Kind)
)

func init() {
	SchemeBuilder.Register(&MessageDetection{}, &MessageDetectionList{})
}
