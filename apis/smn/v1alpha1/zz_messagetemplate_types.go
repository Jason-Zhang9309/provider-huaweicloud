// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type MessageTemplateInitParameters struct {

	// Specifies the template content, which supports plain text only.
	// The template content cannot be left blank or larger than 256 KB.
	// The fields within "{}" can be replaced based on the actual situation
	// when you use the template.
	// Specifies the template content, which supports plain text only.
	Content *string `json:"content,omitempty" tf:"content,omitempty"`

	// Specifies the message template name.
	// A template name starts with a letter or digit, consists of 1 to 64 characters,
	// and can contain only letters, digits,  hyphens (-), and underscores (_).
	// Specifies the message template name.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Specifies the protocol supported by the template. Value options:
	// Specifies the protocol supported by the template.
	Protocol *string `json:"protocol,omitempty" tf:"protocol,omitempty"`

	// Specifies the region in which to create the resource.
	// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`
}

type MessageTemplateObservation struct {

	// Specifies the template content, which supports plain text only.
	// The template content cannot be left blank or larger than 256 KB.
	// The fields within "{}" can be replaced based on the actual situation
	// when you use the template.
	// Specifies the template content, which supports plain text only.
	Content *string `json:"content,omitempty" tf:"content,omitempty"`

	// The resource ID.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Specifies the message template name.
	// A template name starts with a letter or digit, consists of 1 to 64 characters,
	// and can contain only letters, digits,  hyphens (-), and underscores (_).
	// Specifies the message template name.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Specifies the protocol supported by the template. Value options:
	// Specifies the protocol supported by the template.
	Protocol *string `json:"protocol,omitempty" tf:"protocol,omitempty"`

	// Specifies the region in which to create the resource.
	// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Indicates the variable list. The variable name will be quoted in braces ({}) in the template.
	// When you use a template to send messages, you can replace the variable with any content.
	// Indicates the variable list.
	TagNames []*string `json:"tagNames,omitempty" tf:"tag_names,omitempty"`
}

type MessageTemplateParameters struct {

	// Specifies the template content, which supports plain text only.
	// The template content cannot be left blank or larger than 256 KB.
	// The fields within "{}" can be replaced based on the actual situation
	// when you use the template.
	// Specifies the template content, which supports plain text only.
	// +kubebuilder:validation:Optional
	Content *string `json:"content,omitempty" tf:"content,omitempty"`

	// Specifies the message template name.
	// A template name starts with a letter or digit, consists of 1 to 64 characters,
	// and can contain only letters, digits,  hyphens (-), and underscores (_).
	// Specifies the message template name.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Specifies the protocol supported by the template. Value options:
	// Specifies the protocol supported by the template.
	// +kubebuilder:validation:Optional
	Protocol *string `json:"protocol,omitempty" tf:"protocol,omitempty"`

	// Specifies the region in which to create the resource.
	// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`
}

// MessageTemplateSpec defines the desired state of MessageTemplate
type MessageTemplateSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     MessageTemplateParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider MessageTemplateInitParameters `json:"initProvider,omitempty"`
}

// MessageTemplateStatus defines the observed state of MessageTemplate.
type MessageTemplateStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        MessageTemplateObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// MessageTemplate is the Schema for the MessageTemplates API. ""
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,huaweicloud}
type MessageTemplate struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.content) || (has(self.initProvider) && has(self.initProvider.content))",message="spec.forProvider.content is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.protocol) || (has(self.initProvider) && has(self.initProvider.protocol))",message="spec.forProvider.protocol is a required parameter"
	Spec   MessageTemplateSpec   `json:"spec"`
	Status MessageTemplateStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// MessageTemplateList contains a list of MessageTemplates
type MessageTemplateList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []MessageTemplate `json:"items"`
}

// Repository type metadata.
var (
	MessageTemplate_Kind             = "MessageTemplate"
	MessageTemplate_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: MessageTemplate_Kind}.String()
	MessageTemplate_KindAPIVersion   = MessageTemplate_Kind + "." + CRDGroupVersion.String()
	MessageTemplate_GroupVersionKind = CRDGroupVersion.WithKind(MessageTemplate_Kind)
)

func init() {
	SchemeBuilder.Register(&MessageTemplate{}, &MessageTemplateList{})
}
