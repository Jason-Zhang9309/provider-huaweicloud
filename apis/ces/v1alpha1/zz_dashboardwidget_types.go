// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type DashboardWidgetInitParameters struct {

	// Specifies the dashboard ID.
	// Specifies the dashboard ID.
	// +crossplane:generate:reference:type=github.com/huaweicloud/provider-huaweicloud/apis/ces/v1alpha1.Dashboard
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	DashboardID *string `json:"dashboardId,omitempty" tf:"dashboard_id,omitempty"`

	// Reference to a Dashboard in ces to populate dashboardId.
	// +kubebuilder:validation:Optional
	DashboardIDRef *v1.Reference `json:"dashboardIdRef,omitempty" tf:"-"`

	// Selector for a Dashboard in ces to populate dashboardId.
	// +kubebuilder:validation:Optional
	DashboardIDSelector *v1.Selector `json:"dashboardIdSelector,omitempty" tf:"-"`

	// Specifies the dashboard widget coordinates.
	// Specifies the dashboard widget coordinates.
	Location []LocationInitParameters `json:"location,omitempty" tf:"location,omitempty"`

	// Specifies how many metrics will be displayed on one widget.
	// The valid values are as follows:
	// Specifies how many metrics will be displayed on one widget.
	MetricDisplayMode *string `json:"metricDisplayMode,omitempty" tf:"metric_display_mode,omitempty"`

	// Specifies the metric list.
	// Specifies the metric list.
	Metrics []MetricsInitParameters `json:"metrics,omitempty" tf:"metrics,omitempty"`

	// Specifies additional information.
	// Specifies additional information
	Properties []PropertiesInitParameters `json:"properties,omitempty" tf:"properties,omitempty"`

	// Specifies the region in which to create the resource.
	// If omitted, the provider-level region will be used.
	// Changing this creates a new resource.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Specifies the dashboard widget title.
	// Specifies the dashboard widget title.
	Title *string `json:"title,omitempty" tf:"title,omitempty"`

	// Specifies the metric unit.
	// Specifies the metric unit.
	Unit *string `json:"unit,omitempty" tf:"unit,omitempty"`

	// Specifies the graph type.
	// The valid values are as follows:
	// Specifies the graph type.
	View *string `json:"view,omitempty" tf:"view,omitempty"`
}

type DashboardWidgetObservation struct {

	// When the dashboard widget was created.
	// When the dashboard widget was created.
	CreatedAt *string `json:"createdAt,omitempty" tf:"created_at,omitempty"`

	// Specifies the dashboard ID.
	// Specifies the dashboard ID.
	DashboardID *string `json:"dashboardId,omitempty" tf:"dashboard_id,omitempty"`

	// The resource ID.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Specifies the dashboard widget coordinates.
	// Specifies the dashboard widget coordinates.
	Location []LocationObservation `json:"location,omitempty" tf:"location,omitempty"`

	// Specifies how many metrics will be displayed on one widget.
	// The valid values are as follows:
	// Specifies how many metrics will be displayed on one widget.
	MetricDisplayMode *string `json:"metricDisplayMode,omitempty" tf:"metric_display_mode,omitempty"`

	// Specifies the metric list.
	// Specifies the metric list.
	Metrics []MetricsObservation `json:"metrics,omitempty" tf:"metrics,omitempty"`

	// Specifies additional information.
	// Specifies additional information
	Properties []PropertiesObservation `json:"properties,omitempty" tf:"properties,omitempty"`

	// Specifies the region in which to create the resource.
	// If omitted, the provider-level region will be used.
	// Changing this creates a new resource.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Specifies the dashboard widget title.
	// Specifies the dashboard widget title.
	Title *string `json:"title,omitempty" tf:"title,omitempty"`

	// Specifies the metric unit.
	// Specifies the metric unit.
	Unit *string `json:"unit,omitempty" tf:"unit,omitempty"`

	// Specifies the graph type.
	// The valid values are as follows:
	// Specifies the graph type.
	View *string `json:"view,omitempty" tf:"view,omitempty"`
}

type DashboardWidgetParameters struct {

	// Specifies the dashboard ID.
	// Specifies the dashboard ID.
	// +crossplane:generate:reference:type=github.com/huaweicloud/provider-huaweicloud/apis/ces/v1alpha1.Dashboard
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	DashboardID *string `json:"dashboardId,omitempty" tf:"dashboard_id,omitempty"`

	// Reference to a Dashboard in ces to populate dashboardId.
	// +kubebuilder:validation:Optional
	DashboardIDRef *v1.Reference `json:"dashboardIdRef,omitempty" tf:"-"`

	// Selector for a Dashboard in ces to populate dashboardId.
	// +kubebuilder:validation:Optional
	DashboardIDSelector *v1.Selector `json:"dashboardIdSelector,omitempty" tf:"-"`

	// Specifies the dashboard widget coordinates.
	// Specifies the dashboard widget coordinates.
	// +kubebuilder:validation:Optional
	Location []LocationParameters `json:"location,omitempty" tf:"location,omitempty"`

	// Specifies how many metrics will be displayed on one widget.
	// The valid values are as follows:
	// Specifies how many metrics will be displayed on one widget.
	// +kubebuilder:validation:Optional
	MetricDisplayMode *string `json:"metricDisplayMode,omitempty" tf:"metric_display_mode,omitempty"`

	// Specifies the metric list.
	// Specifies the metric list.
	// +kubebuilder:validation:Optional
	Metrics []MetricsParameters `json:"metrics,omitempty" tf:"metrics,omitempty"`

	// Specifies additional information.
	// Specifies additional information
	// +kubebuilder:validation:Optional
	Properties []PropertiesParameters `json:"properties,omitempty" tf:"properties,omitempty"`

	// Specifies the region in which to create the resource.
	// If omitted, the provider-level region will be used.
	// Changing this creates a new resource.
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Specifies the dashboard widget title.
	// Specifies the dashboard widget title.
	// +kubebuilder:validation:Optional
	Title *string `json:"title,omitempty" tf:"title,omitempty"`

	// Specifies the metric unit.
	// Specifies the metric unit.
	// +kubebuilder:validation:Optional
	Unit *string `json:"unit,omitempty" tf:"unit,omitempty"`

	// Specifies the graph type.
	// The valid values are as follows:
	// Specifies the graph type.
	// +kubebuilder:validation:Optional
	View *string `json:"view,omitempty" tf:"view,omitempty"`
}

type LocationInitParameters struct {

	// Specifies the dashboard widget height.
	// Specifies the dashboard widget height.
	Height *float64 `json:"height,omitempty" tf:"height,omitempty"`

	// Specifies the grids between the widget and the left side of the dashboard.
	// Specifies the grids between the widget and the left side of the dashboard.
	Left *float64 `json:"left,omitempty" tf:"left,omitempty"`

	// Specifies the grids between the widget and the top of the dashboard.
	// Specifies the grids between the widget and the top of the dashboard.
	Top *float64 `json:"top,omitempty" tf:"top,omitempty"`

	// Specifies the dashboard widget width.
	// Specifies the dashboard widget width.
	Width *float64 `json:"width,omitempty" tf:"width,omitempty"`
}

type LocationObservation struct {

	// Specifies the dashboard widget height.
	// Specifies the dashboard widget height.
	Height *float64 `json:"height,omitempty" tf:"height,omitempty"`

	// Specifies the grids between the widget and the left side of the dashboard.
	// Specifies the grids between the widget and the left side of the dashboard.
	Left *float64 `json:"left,omitempty" tf:"left,omitempty"`

	// Specifies the grids between the widget and the top of the dashboard.
	// Specifies the grids between the widget and the top of the dashboard.
	Top *float64 `json:"top,omitempty" tf:"top,omitempty"`

	// Specifies the dashboard widget width.
	// Specifies the dashboard widget width.
	Width *float64 `json:"width,omitempty" tf:"width,omitempty"`
}

type LocationParameters struct {

	// Specifies the dashboard widget height.
	// Specifies the dashboard widget height.
	// +kubebuilder:validation:Optional
	Height *float64 `json:"height" tf:"height,omitempty"`

	// Specifies the grids between the widget and the left side of the dashboard.
	// Specifies the grids between the widget and the left side of the dashboard.
	// +kubebuilder:validation:Optional
	Left *float64 `json:"left" tf:"left,omitempty"`

	// Specifies the grids between the widget and the top of the dashboard.
	// Specifies the grids between the widget and the top of the dashboard.
	// +kubebuilder:validation:Optional
	Top *float64 `json:"top" tf:"top,omitempty"`

	// Specifies the dashboard widget width.
	// Specifies the dashboard widget width.
	// +kubebuilder:validation:Optional
	Width *float64 `json:"width" tf:"width,omitempty"`
}

type MetricsDimensionsInitParameters struct {

	// Specifies the resource type.
	// The value can be all_instances (all resources) or specific_instances (specified resources).
	// Specifies the resource type.
	FilterType *string `json:"filterType,omitempty" tf:"filter_type,omitempty"`

	// Specifies the dimension name.
	// Specifies the dimension name.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Specifies the dimension value list.
	// Specifies the dimension value list.
	Values []*string `json:"values,omitempty" tf:"values,omitempty"`
}

type MetricsDimensionsObservation struct {

	// Specifies the resource type.
	// The value can be all_instances (all resources) or specific_instances (specified resources).
	// Specifies the resource type.
	FilterType *string `json:"filterType,omitempty" tf:"filter_type,omitempty"`

	// Specifies the dimension name.
	// Specifies the dimension name.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Specifies the dimension value list.
	// Specifies the dimension value list.
	Values []*string `json:"values,omitempty" tf:"values,omitempty"`
}

type MetricsDimensionsParameters struct {

	// Specifies the resource type.
	// The value can be all_instances (all resources) or specific_instances (specified resources).
	// Specifies the resource type.
	// +kubebuilder:validation:Optional
	FilterType *string `json:"filterType" tf:"filter_type,omitempty"`

	// Specifies the dimension name.
	// Specifies the dimension name.
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// Specifies the dimension value list.
	// Specifies the dimension value list.
	// +kubebuilder:validation:Optional
	Values []*string `json:"values,omitempty" tf:"values,omitempty"`
}

type MetricsInitParameters struct {

	// Specifies the alias list of metrics.
	// Specifies the alias list of metrics.
	Alias []*string `json:"alias,omitempty" tf:"alias,omitempty"`

	// Specifies the dimension list.
	// Specifies the dimension list.
	Dimensions []MetricsDimensionsInitParameters `json:"dimensions,omitempty" tf:"dimensions,omitempty"`

	// Specifies the metric name.
	// Specifies the metric name.
	MetricName *string `json:"metricName,omitempty" tf:"metric_name,omitempty"`

	// Specifies the cloud service dimension.
	// Specifies the cloud service dimension.
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`
}

type MetricsObservation struct {

	// Specifies the alias list of metrics.
	// Specifies the alias list of metrics.
	Alias []*string `json:"alias,omitempty" tf:"alias,omitempty"`

	// Specifies the dimension list.
	// Specifies the dimension list.
	Dimensions []MetricsDimensionsObservation `json:"dimensions,omitempty" tf:"dimensions,omitempty"`

	// Specifies the metric name.
	// Specifies the metric name.
	MetricName *string `json:"metricName,omitempty" tf:"metric_name,omitempty"`

	// Specifies the cloud service dimension.
	// Specifies the cloud service dimension.
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`
}

type MetricsParameters struct {

	// Specifies the alias list of metrics.
	// Specifies the alias list of metrics.
	// +kubebuilder:validation:Optional
	Alias []*string `json:"alias,omitempty" tf:"alias,omitempty"`

	// Specifies the dimension list.
	// Specifies the dimension list.
	// +kubebuilder:validation:Optional
	Dimensions []MetricsDimensionsParameters `json:"dimensions" tf:"dimensions,omitempty"`

	// Specifies the metric name.
	// Specifies the metric name.
	// +kubebuilder:validation:Optional
	MetricName *string `json:"metricName" tf:"metric_name,omitempty"`

	// Specifies the cloud service dimension.
	// Specifies the cloud service dimension.
	// +kubebuilder:validation:Optional
	Namespace *string `json:"namespace" tf:"namespace,omitempty"`
}

type PropertiesInitParameters struct {

	// Specifies how metric data is aggregated.
	// The value can only be topN.
	// Specifies how metric data is aggregated.
	Filter *string `json:"filter,omitempty" tf:"filter,omitempty"`

	// Specifies how top n resources by a metric are sorted on a dashboard widget.
	// The value can be asc or desc.
	// Specifies how top n resources by a metric are sorted on a dashboard widget.
	Order *string `json:"order,omitempty" tf:"order,omitempty"`

	// Specifies the top n resources sorted by a metric.
	// Specifies the top n resources sorted by a metric.
	TopN *float64 `json:"topN,omitempty" tf:"top_n,omitempty"`
}

type PropertiesObservation struct {

	// Specifies how metric data is aggregated.
	// The value can only be topN.
	// Specifies how metric data is aggregated.
	Filter *string `json:"filter,omitempty" tf:"filter,omitempty"`

	// Specifies how top n resources by a metric are sorted on a dashboard widget.
	// The value can be asc or desc.
	// Specifies how top n resources by a metric are sorted on a dashboard widget.
	Order *string `json:"order,omitempty" tf:"order,omitempty"`

	// Specifies the top n resources sorted by a metric.
	// Specifies the top n resources sorted by a metric.
	TopN *float64 `json:"topN,omitempty" tf:"top_n,omitempty"`
}

type PropertiesParameters struct {

	// Specifies how metric data is aggregated.
	// The value can only be topN.
	// Specifies how metric data is aggregated.
	// +kubebuilder:validation:Optional
	Filter *string `json:"filter,omitempty" tf:"filter,omitempty"`

	// Specifies how top n resources by a metric are sorted on a dashboard widget.
	// The value can be asc or desc.
	// Specifies how top n resources by a metric are sorted on a dashboard widget.
	// +kubebuilder:validation:Optional
	Order *string `json:"order,omitempty" tf:"order,omitempty"`

	// Specifies the top n resources sorted by a metric.
	// Specifies the top n resources sorted by a metric.
	// +kubebuilder:validation:Optional
	TopN *float64 `json:"topN" tf:"top_n,omitempty"`
}

// DashboardWidgetSpec defines the desired state of DashboardWidget
type DashboardWidgetSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     DashboardWidgetParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider DashboardWidgetInitParameters `json:"initProvider,omitempty"`
}

// DashboardWidgetStatus defines the observed state of DashboardWidget.
type DashboardWidgetStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        DashboardWidgetObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// DashboardWidget is the Schema for the DashboardWidgets API. Manages a CES dashboard widget resource within HuaweiCloud.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,huaweicloud}
type DashboardWidget struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.location) || (has(self.initProvider) && has(self.initProvider.location))",message="spec.forProvider.location is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.metricDisplayMode) || (has(self.initProvider) && has(self.initProvider.metricDisplayMode))",message="spec.forProvider.metricDisplayMode is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.metrics) || (has(self.initProvider) && has(self.initProvider.metrics))",message="spec.forProvider.metrics is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.title) || (has(self.initProvider) && has(self.initProvider.title))",message="spec.forProvider.title is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.view) || (has(self.initProvider) && has(self.initProvider.view))",message="spec.forProvider.view is a required parameter"
	Spec   DashboardWidgetSpec   `json:"spec"`
	Status DashboardWidgetStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DashboardWidgetList contains a list of DashboardWidgets
type DashboardWidgetList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DashboardWidget `json:"items"`
}

// Repository type metadata.
var (
	DashboardWidget_Kind             = "DashboardWidget"
	DashboardWidget_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: DashboardWidget_Kind}.String()
	DashboardWidget_KindAPIVersion   = DashboardWidget_Kind + "." + CRDGroupVersion.String()
	DashboardWidget_GroupVersionKind = CRDGroupVersion.WithKind(DashboardWidget_Kind)
)

func init() {
	SchemeBuilder.Register(&DashboardWidget{}, &DashboardWidgetList{})
}
