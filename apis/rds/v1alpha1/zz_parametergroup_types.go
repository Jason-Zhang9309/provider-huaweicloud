// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ConfigurationParametersInitParameters struct {
}

type ConfigurationParametersObservation struct {

	// The parameter group description. It contains a maximum of 256 characters and cannot
	// contain the following special characters:>!<"&'= the value is left blank by default.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The parameter group name. It contains a maximum of 64 characters.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Indicates whether the parameter is read-only.
	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	// Indicates whether a restart is required.
	RestartRequired *bool `json:"restartRequired,omitempty" tf:"restart_required,omitempty"`

	// Indicates the parameter type.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// Indicates the parameter value.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`

	// Indicates the parameter value range.
	ValueRange *string `json:"valueRange,omitempty" tf:"value_range,omitempty"`
}

type ConfigurationParametersParameters struct {
}

type DatastoreInitParameters struct {

	// The DB engine. Currently, MySQL, PostgreSQL, Microsoft SQL Server and MariaDB are supported.
	// The value is case-insensitive and can be mysql, postgresql, sqlserver, or mariadb.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// Specifies the database version.
	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type DatastoreObservation struct {

	// The DB engine. Currently, MySQL, PostgreSQL, Microsoft SQL Server and MariaDB are supported.
	// The value is case-insensitive and can be mysql, postgresql, sqlserver, or mariadb.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// Specifies the database version.
	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type DatastoreParameters struct {

	// The DB engine. Currently, MySQL, PostgreSQL, Microsoft SQL Server and MariaDB are supported.
	// The value is case-insensitive and can be mysql, postgresql, sqlserver, or mariadb.
	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`

	// Specifies the database version.
	// +kubebuilder:validation:Optional
	Version *string `json:"version" tf:"version,omitempty"`
}

type ParametergroupInitParameters struct {

	// Database object. The database object structure is documented below. Changing
	// this creates a new parameter group.
	Datastore []DatastoreInitParameters `json:"datastore,omitempty" tf:"datastore,omitempty"`

	// The parameter group description. It contains a maximum of 256 characters and cannot
	// contain the following special characters:>!<"&'= the value is left blank by default.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The parameter group name. It contains a maximum of 64 characters.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The region in which to create the RDS parameter group. If omitted, the
	// provider-level region will be used. Changing this creates a new parameter group.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Parameter group values key/value pairs defined by users based on the default parameter
	// groups.
	// +mapType=granular
	Values map[string]*string `json:"values,omitempty" tf:"values,omitempty"`
}

type ParametergroupObservation struct {

	// Indicates the parameter configuration defined by users based on the default parameters
	// groups.
	ConfigurationParameters []ConfigurationParametersObservation `json:"configurationParameters,omitempty" tf:"configuration_parameters,omitempty"`

	// The creation time, in UTC format.
	CreatedAt *string `json:"createdAt,omitempty" tf:"created_at,omitempty"`

	// Database object. The database object structure is documented below. Changing
	// this creates a new parameter group.
	Datastore []DatastoreObservation `json:"datastore,omitempty" tf:"datastore,omitempty"`

	// The parameter group description. It contains a maximum of 256 characters and cannot
	// contain the following special characters:>!<"&'= the value is left blank by default.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// ID of the parameter group.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The parameter group name. It contains a maximum of 64 characters.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The region in which to create the RDS parameter group. If omitted, the
	// provider-level region will be used. Changing this creates a new parameter group.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// The last update time, in UTC format.
	UpdatedAt *string `json:"updatedAt,omitempty" tf:"updated_at,omitempty"`

	// Parameter group values key/value pairs defined by users based on the default parameter
	// groups.
	// +mapType=granular
	Values map[string]*string `json:"values,omitempty" tf:"values,omitempty"`
}

type ParametergroupParameters struct {

	// Database object. The database object structure is documented below. Changing
	// this creates a new parameter group.
	// +kubebuilder:validation:Optional
	Datastore []DatastoreParameters `json:"datastore,omitempty" tf:"datastore,omitempty"`

	// The parameter group description. It contains a maximum of 256 characters and cannot
	// contain the following special characters:>!<"&'= the value is left blank by default.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The parameter group name. It contains a maximum of 64 characters.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The region in which to create the RDS parameter group. If omitted, the
	// provider-level region will be used. Changing this creates a new parameter group.
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Parameter group values key/value pairs defined by users based on the default parameter
	// groups.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Values map[string]*string `json:"values,omitempty" tf:"values,omitempty"`
}

// ParametergroupSpec defines the desired state of Parametergroup
type ParametergroupSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ParametergroupParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ParametergroupInitParameters `json:"initProvider,omitempty"`
}

// ParametergroupStatus defines the observed state of Parametergroup.
type ParametergroupStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ParametergroupObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Parametergroup is the Schema for the Parametergroups API. ""
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,huaweicloud}
type Parametergroup struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.datastore) || (has(self.initProvider) && has(self.initProvider.datastore))",message="spec.forProvider.datastore is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	Spec   ParametergroupSpec   `json:"spec"`
	Status ParametergroupStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ParametergroupList contains a list of Parametergroups
type ParametergroupList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Parametergroup `json:"items"`
}

// Repository type metadata.
var (
	Parametergroup_Kind             = "Parametergroup"
	Parametergroup_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Parametergroup_Kind}.String()
	Parametergroup_KindAPIVersion   = Parametergroup_Kind + "." + CRDGroupVersion.String()
	Parametergroup_GroupVersionKind = CRDGroupVersion.WithKind(Parametergroup_Kind)
)

func init() {
	SchemeBuilder.Register(&Parametergroup{}, &ParametergroupList{})
}
