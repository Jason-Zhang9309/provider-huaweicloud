// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AttributesInitParameters struct {
}

type AttributesObservation struct {

	// Indicates whether a user bypasses each row-level security policy.
	RolBypassRls *bool `json:"rolBypassRls,omitempty" tf:"rol_bypass_rls,omitempty"`

	// Indicates whether a user can log in to the database.
	RolCanLogin *bool `json:"rolCanLogin,omitempty" tf:"rol_can_login,omitempty"`

	// Indicates the maximum number of concurrent connections to a DB instance.
	RolConnLimit *float64 `json:"rolConnLimit,omitempty" tf:"rol_conn_limit,omitempty"`

	// Indicates whether a user can create a database.
	RolCreateDB *bool `json:"rolCreateDb,omitempty" tf:"rol_create_db,omitempty"`

	// Indicates whether a user can create other sub-users.
	RolCreateRole *bool `json:"rolCreateRole,omitempty" tf:"rol_create_role,omitempty"`

	// Indicates whether a user automatically inherits the permissions of the role to which the user belongs.
	RolInherit *bool `json:"rolInherit,omitempty" tf:"rol_inherit,omitempty"`

	// Indicates whether the user is a replication role.
	RolReplication *bool `json:"rolReplication,omitempty" tf:"rol_replication,omitempty"`

	// Indicates whether a user has the super-user permission.
	RolSuper *bool `json:"rolSuper,omitempty" tf:"rol_super,omitempty"`
}

type AttributesParameters struct {
}

type PgAccountInitParameters struct {

	// Specifies the remarks of the DB account. The parameter must be 1 to 512 characters.
	// Specifies the remarks of the DB account.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Specifies the ID of the RDS PostgreSQL instance.
	// Specifies the ID of the RDS PostgreSQL instance.
	InstanceID *string `json:"instanceId,omitempty" tf:"instance_id,omitempty"`

	// schema: Deprecated
	// +listType=set
	Memberof []*string `json:"memberof,omitempty" tf:"memberof,omitempty"`

	// Specifies the username of the DB account. The username contains 1 to 63
	// characters, including letters, digits, and underscores (_). It cannot start with pg or a digit and must be different
	// from system usernames. System users include rdsAdmin, rdsMetric, rdsBackup, rdsRepl, rdsProxy,
	// and rdsDdm.
	// Specifies the username of the DB account.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Specifies the password of the DB account. The value must be 8 to 32 characters long
	// and contain at least three types of the following characters: uppercase letters, lowercase letters, digits, and special
	// characters (~!@#%^*-_=+?,). The value cannot contain the username or the username spelled backwards.
	// Specifies the password of the DB account.
	PasswordSecretRef v1.SecretKeySelector `json:"passwordSecretRef" tf:"-"`

	// Specifies the region in which to create the resource.
	// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`
}

type PgAccountObservation struct {

	// Indicates the permission attributes of a user.
	// The attributes structure is documented below.
	// Indicates the permission attributes of the account.
	Attributes []AttributesObservation `json:"attributes,omitempty" tf:"attributes,omitempty"`

	// Specifies the remarks of the DB account. The parameter must be 1 to 512 characters.
	// Specifies the remarks of the DB account.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The resource ID of account which is formatted <instance_id>/<name>.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Specifies the ID of the RDS PostgreSQL instance.
	// Specifies the ID of the RDS PostgreSQL instance.
	InstanceID *string `json:"instanceId,omitempty" tf:"instance_id,omitempty"`

	// schema: Deprecated
	// +listType=set
	Memberof []*string `json:"memberof,omitempty" tf:"memberof,omitempty"`

	// Specifies the username of the DB account. The username contains 1 to 63
	// characters, including letters, digits, and underscores (_). It cannot start with pg or a digit and must be different
	// from system usernames. System users include rdsAdmin, rdsMetric, rdsBackup, rdsRepl, rdsProxy,
	// and rdsDdm.
	// Specifies the username of the DB account.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Specifies the region in which to create the resource.
	// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`
}

type PgAccountParameters struct {

	// Specifies the remarks of the DB account. The parameter must be 1 to 512 characters.
	// Specifies the remarks of the DB account.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Specifies the ID of the RDS PostgreSQL instance.
	// Specifies the ID of the RDS PostgreSQL instance.
	// +kubebuilder:validation:Optional
	InstanceID *string `json:"instanceId,omitempty" tf:"instance_id,omitempty"`

	// schema: Deprecated
	// +kubebuilder:validation:Optional
	// +listType=set
	Memberof []*string `json:"memberof,omitempty" tf:"memberof,omitempty"`

	// Specifies the username of the DB account. The username contains 1 to 63
	// characters, including letters, digits, and underscores (_). It cannot start with pg or a digit and must be different
	// from system usernames. System users include rdsAdmin, rdsMetric, rdsBackup, rdsRepl, rdsProxy,
	// and rdsDdm.
	// Specifies the username of the DB account.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Specifies the password of the DB account. The value must be 8 to 32 characters long
	// and contain at least three types of the following characters: uppercase letters, lowercase letters, digits, and special
	// characters (~!@#%^*-_=+?,). The value cannot contain the username or the username spelled backwards.
	// Specifies the password of the DB account.
	// +kubebuilder:validation:Optional
	PasswordSecretRef v1.SecretKeySelector `json:"passwordSecretRef" tf:"-"`

	// Specifies the region in which to create the resource.
	// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`
}

// PgAccountSpec defines the desired state of PgAccount
type PgAccountSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     PgAccountParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider PgAccountInitParameters `json:"initProvider,omitempty"`
}

// PgAccountStatus defines the observed state of PgAccount.
type PgAccountStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        PgAccountObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// PgAccount is the Schema for the PgAccounts API. ""
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,huaweicloud}
type PgAccount struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.instanceId) || (has(self.initProvider) && has(self.initProvider.instanceId))",message="spec.forProvider.instanceId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.passwordSecretRef)",message="spec.forProvider.passwordSecretRef is a required parameter"
	Spec   PgAccountSpec   `json:"spec"`
	Status PgAccountStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// PgAccountList contains a list of PgAccounts
type PgAccountList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []PgAccount `json:"items"`
}

// Repository type metadata.
var (
	PgAccount_Kind             = "PgAccount"
	PgAccount_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: PgAccount_Kind}.String()
	PgAccount_KindAPIVersion   = PgAccount_Kind + "." + CRDGroupVersion.String()
	PgAccount_GroupVersionKind = CRDGroupVersion.WithKind(PgAccount_Kind)
)

func init() {
	SchemeBuilder.Register(&PgAccount{}, &PgAccountList{})
}
