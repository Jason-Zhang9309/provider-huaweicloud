// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type PgSQLLimitInitParameters struct {

	// Specifies the name of the database.
	// Specifies the name of the database.
	DBName *string `json:"dbName,omitempty" tf:"db_name,omitempty"`

	// Specifies the ID of RDS PostgreSQL instance.
	// Specifies the ID of the RDS PostgreSQL instance.
	// +crossplane:generate:reference:type=github.com/huaweicloud/provider-huaweicloud/apis/rds/v1alpha1.Instance
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	InstanceID *string `json:"instanceId,omitempty" tf:"instance_id,omitempty"`

	// Reference to a Instance in rds to populate instanceId.
	// +kubebuilder:validation:Optional
	InstanceIDRef *v1.Reference `json:"instanceIdRef,omitempty" tf:"-"`

	// Selector for a Instance in rds to populate instanceId.
	// +kubebuilder:validation:Optional
	InstanceIDSelector *v1.Selector `json:"instanceIdSelector,omitempty" tf:"-"`

	// Specifies the number of SQL statements executed simultaneously.
	// Value ranges from 0 to 50000. 0 means no limit.
	// Specifies the number of SQL statements executed simultaneously
	MaxConcurrency *float64 `json:"maxConcurrency,omitempty" tf:"max_concurrency,omitempty"`

	// Specifies the max waiting time in seconds.
	// Specifies the max waiting time in seconds.
	MaxWaiting *float64 `json:"maxWaiting,omitempty" tf:"max_waiting,omitempty"`

	// Specifies the query ID. Value ranges: -9223372036854775808~9223372036854775807.
	// Specifies the query ID
	QueryID *string `json:"queryId,omitempty" tf:"query_id,omitempty"`

	// Specifies the text form of SQL statement.
	// Specifies the text form of SQL statement.
	QueryString *string `json:"queryString,omitempty" tf:"query_string,omitempty"`

	// The region in which to create the rds PostgreSQL SQL limit resource. If omitted,
	// the provider-level region will be used. Changing this creates a new resource.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Specifies the query order for names that are not schema qualified.
	// Defaults to public,
	// Specifies the query order for names that are not schema qualified.
	SearchPath *string `json:"searchPath,omitempty" tf:"search_path,omitempty"`

	// Specifies the SQL limit switch. Value options: open, close.
	// Specifies the SQL limit switch.
	Switch *string `json:"switch,omitempty" tf:"switch,omitempty"`
}

type PgSQLLimitObservation struct {

	// Specifies the name of the database.
	// Specifies the name of the database.
	DBName *string `json:"dbName,omitempty" tf:"db_name,omitempty"`

	// Indicates the resource ID. The format is <instance_id>/<db_name>/<sql_limit_id>.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Specifies the ID of RDS PostgreSQL instance.
	// Specifies the ID of the RDS PostgreSQL instance.
	InstanceID *string `json:"instanceId,omitempty" tf:"instance_id,omitempty"`

	// Indicates whether the SQL limit is effective.
	// Indicates whether the SQL limit is effective.
	IsEffective *bool `json:"isEffective,omitempty" tf:"is_effective,omitempty"`

	// Specifies the number of SQL statements executed simultaneously.
	// Value ranges from 0 to 50000. 0 means no limit.
	// Specifies the number of SQL statements executed simultaneously
	MaxConcurrency *float64 `json:"maxConcurrency,omitempty" tf:"max_concurrency,omitempty"`

	// Specifies the max waiting time in seconds.
	// Specifies the max waiting time in seconds.
	MaxWaiting *float64 `json:"maxWaiting,omitempty" tf:"max_waiting,omitempty"`

	// Specifies the query ID. Value ranges: -9223372036854775808~9223372036854775807.
	// Specifies the query ID
	QueryID *string `json:"queryId,omitempty" tf:"query_id,omitempty"`

	// Specifies the text form of SQL statement.
	// Specifies the text form of SQL statement.
	QueryString *string `json:"queryString,omitempty" tf:"query_string,omitempty"`

	// The region in which to create the rds PostgreSQL SQL limit resource. If omitted,
	// the provider-level region will be used. Changing this creates a new resource.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Indicates the ID of SQL limit.
	// Indicates the ID of SQL limit.
	SQLLimitID *string `json:"sqlLimitId,omitempty" tf:"sql_limit_id,omitempty"`

	// Specifies the query order for names that are not schema qualified.
	// Defaults to public,
	// Specifies the query order for names that are not schema qualified.
	SearchPath *string `json:"searchPath,omitempty" tf:"search_path,omitempty"`

	// Specifies the SQL limit switch. Value options: open, close.
	// Specifies the SQL limit switch.
	Switch *string `json:"switch,omitempty" tf:"switch,omitempty"`
}

type PgSQLLimitParameters struct {

	// Specifies the name of the database.
	// Specifies the name of the database.
	// +kubebuilder:validation:Optional
	DBName *string `json:"dbName,omitempty" tf:"db_name,omitempty"`

	// Specifies the ID of RDS PostgreSQL instance.
	// Specifies the ID of the RDS PostgreSQL instance.
	// +crossplane:generate:reference:type=github.com/huaweicloud/provider-huaweicloud/apis/rds/v1alpha1.Instance
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	InstanceID *string `json:"instanceId,omitempty" tf:"instance_id,omitempty"`

	// Reference to a Instance in rds to populate instanceId.
	// +kubebuilder:validation:Optional
	InstanceIDRef *v1.Reference `json:"instanceIdRef,omitempty" tf:"-"`

	// Selector for a Instance in rds to populate instanceId.
	// +kubebuilder:validation:Optional
	InstanceIDSelector *v1.Selector `json:"instanceIdSelector,omitempty" tf:"-"`

	// Specifies the number of SQL statements executed simultaneously.
	// Value ranges from 0 to 50000. 0 means no limit.
	// Specifies the number of SQL statements executed simultaneously
	// +kubebuilder:validation:Optional
	MaxConcurrency *float64 `json:"maxConcurrency,omitempty" tf:"max_concurrency,omitempty"`

	// Specifies the max waiting time in seconds.
	// Specifies the max waiting time in seconds.
	// +kubebuilder:validation:Optional
	MaxWaiting *float64 `json:"maxWaiting,omitempty" tf:"max_waiting,omitempty"`

	// Specifies the query ID. Value ranges: -9223372036854775808~9223372036854775807.
	// Specifies the query ID
	// +kubebuilder:validation:Optional
	QueryID *string `json:"queryId,omitempty" tf:"query_id,omitempty"`

	// Specifies the text form of SQL statement.
	// Specifies the text form of SQL statement.
	// +kubebuilder:validation:Optional
	QueryString *string `json:"queryString,omitempty" tf:"query_string,omitempty"`

	// The region in which to create the rds PostgreSQL SQL limit resource. If omitted,
	// the provider-level region will be used. Changing this creates a new resource.
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Specifies the query order for names that are not schema qualified.
	// Defaults to public,
	// Specifies the query order for names that are not schema qualified.
	// +kubebuilder:validation:Optional
	SearchPath *string `json:"searchPath,omitempty" tf:"search_path,omitempty"`

	// Specifies the SQL limit switch. Value options: open, close.
	// Specifies the SQL limit switch.
	// +kubebuilder:validation:Optional
	Switch *string `json:"switch,omitempty" tf:"switch,omitempty"`
}

// PgSQLLimitSpec defines the desired state of PgSQLLimit
type PgSQLLimitSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     PgSQLLimitParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider PgSQLLimitInitParameters `json:"initProvider,omitempty"`
}

// PgSQLLimitStatus defines the observed state of PgSQLLimit.
type PgSQLLimitStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        PgSQLLimitObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// PgSQLLimit is the Schema for the PgSQLLimits API. Manage an RDS PostgreSQL SQL limit resource within HuaweiCloud.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,huaweicloud}
type PgSQLLimit struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.dbName) || (has(self.initProvider) && has(self.initProvider.dbName))",message="spec.forProvider.dbName is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.maxConcurrency) || (has(self.initProvider) && has(self.initProvider.maxConcurrency))",message="spec.forProvider.maxConcurrency is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.maxWaiting) || (has(self.initProvider) && has(self.initProvider.maxWaiting))",message="spec.forProvider.maxWaiting is a required parameter"
	Spec   PgSQLLimitSpec   `json:"spec"`
	Status PgSQLLimitStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// PgSQLLimitList contains a list of PgSQLLimits
type PgSQLLimitList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []PgSQLLimit `json:"items"`
}

// Repository type metadata.
var (
	PgSQLLimit_Kind             = "PgSQLLimit"
	PgSQLLimit_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: PgSQLLimit_Kind}.String()
	PgSQLLimit_KindAPIVersion   = PgSQLLimit_Kind + "." + CRDGroupVersion.String()
	PgSQLLimit_GroupVersionKind = CRDGroupVersion.WithKind(PgSQLLimit_Kind)
)

func init() {
	SchemeBuilder.Register(&PgSQLLimit{}, &PgSQLLimitList{})
}
