// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type SqlserverAccountInitParameters struct {

	// Specifies the ID of the RDS SQLServer instance.
	// Specifies the ID of the RDS SQLServer instance.
	InstanceID *string `json:"instanceId,omitempty" tf:"instance_id,omitempty"`

	// Specifies the username of the DB account. The username consists of 1 to 128
	// characters and must be different from system usernames. System users include rdsadmin, rdsuser, rdsbackup,
	// and rdsmirror.
	// Specifies the username of the DB account.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Specifies the password of the DB account. It consists of 8 to 128 characters and
	// contains at least three types of the following characters: uppercase letters, lowercase letters, digits, and special
	// characters.
	// Specifies the password of the DB account.
	PasswordSecretRef v1.SecretKeySelector `json:"passwordSecretRef" tf:"-"`

	// Specifies the region in which to create the resource.
	// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`
}

type SqlserverAccountObservation struct {

	// The resource ID of account which is formatted <instance_id>/<name>.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Specifies the ID of the RDS SQLServer instance.
	// Specifies the ID of the RDS SQLServer instance.
	InstanceID *string `json:"instanceId,omitempty" tf:"instance_id,omitempty"`

	// Specifies the username of the DB account. The username consists of 1 to 128
	// characters and must be different from system usernames. System users include rdsadmin, rdsuser, rdsbackup,
	// and rdsmirror.
	// Specifies the username of the DB account.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Specifies the region in which to create the resource.
	// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Indicates the DB user status. Its value can be any of the following:
	// Indicates the DB user status.
	State *string `json:"state,omitempty" tf:"state,omitempty"`
}

type SqlserverAccountParameters struct {

	// Specifies the ID of the RDS SQLServer instance.
	// Specifies the ID of the RDS SQLServer instance.
	// +kubebuilder:validation:Optional
	InstanceID *string `json:"instanceId,omitempty" tf:"instance_id,omitempty"`

	// Specifies the username of the DB account. The username consists of 1 to 128
	// characters and must be different from system usernames. System users include rdsadmin, rdsuser, rdsbackup,
	// and rdsmirror.
	// Specifies the username of the DB account.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Specifies the password of the DB account. It consists of 8 to 128 characters and
	// contains at least three types of the following characters: uppercase letters, lowercase letters, digits, and special
	// characters.
	// Specifies the password of the DB account.
	// +kubebuilder:validation:Optional
	PasswordSecretRef v1.SecretKeySelector `json:"passwordSecretRef" tf:"-"`

	// Specifies the region in which to create the resource.
	// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`
}

// SqlserverAccountSpec defines the desired state of SqlserverAccount
type SqlserverAccountSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     SqlserverAccountParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider SqlserverAccountInitParameters `json:"initProvider,omitempty"`
}

// SqlserverAccountStatus defines the observed state of SqlserverAccount.
type SqlserverAccountStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        SqlserverAccountObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// SqlserverAccount is the Schema for the SqlserverAccounts API. ""
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,huaweicloud}
type SqlserverAccount struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.instanceId) || (has(self.initProvider) && has(self.initProvider.instanceId))",message="spec.forProvider.instanceId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.passwordSecretRef)",message="spec.forProvider.passwordSecretRef is a required parameter"
	Spec   SqlserverAccountSpec   `json:"spec"`
	Status SqlserverAccountStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SqlserverAccountList contains a list of SqlserverAccounts
type SqlserverAccountList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SqlserverAccount `json:"items"`
}

// Repository type metadata.
var (
	SqlserverAccount_Kind             = "SqlserverAccount"
	SqlserverAccount_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: SqlserverAccount_Kind}.String()
	SqlserverAccount_KindAPIVersion   = SqlserverAccount_Kind + "." + CRDGroupVersion.String()
	SqlserverAccount_GroupVersionKind = CRDGroupVersion.WithKind(SqlserverAccount_Kind)
)

func init() {
	SchemeBuilder.Register(&SqlserverAccount{}, &SqlserverAccountList{})
}
