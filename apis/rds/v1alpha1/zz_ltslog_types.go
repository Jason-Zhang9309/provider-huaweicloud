// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type LtsLogInitParameters struct {

	// Specifies the engine of the RDS instance.
	// Value options: mysql, postgresql, sqlserver. Changing this creates a new resource.
	// Specifies the engine of the RDS instance.
	Engine *string `json:"engine,omitempty" tf:"engine,omitempty"`

	// Specifies the ID of the RDS instance.
	// Changing this creates a new resource.
	// Specifies the ID of the RDS instance.
	InstanceID *string `json:"instanceId,omitempty" tf:"instance_id,omitempty"`

	// Specifies the type of the LTS log.
	// Value options: error_log, slow_log, audit_log. Changing this creates a new resource.
	// Specifies the type of the LTS log.
	LogType *string `json:"logType,omitempty" tf:"log_type,omitempty"`

	// Specifies the ID of the LTS log group.
	// Specifies the ID of the LTS log group.
	LtsGroupID *string `json:"ltsGroupId,omitempty" tf:"lts_group_id,omitempty"`

	// Specifies the ID of the LTS log stream.
	// Specifies the ID of the LTS log stream.
	LtsStreamID *string `json:"ltsStreamId,omitempty" tf:"lts_stream_id,omitempty"`

	// Specifies the region in which to create the resource.
	// If omitted, the provider-level region will be used. Changing this creates a new resource.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`
}

type LtsLogObservation struct {

	// Specifies the engine of the RDS instance.
	// Value options: mysql, postgresql, sqlserver. Changing this creates a new resource.
	// Specifies the engine of the RDS instance.
	Engine *string `json:"engine,omitempty" tf:"engine,omitempty"`

	// The resource ID in format of <instance_id>/<log_type>.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Specifies the ID of the RDS instance.
	// Changing this creates a new resource.
	// Specifies the ID of the RDS instance.
	InstanceID *string `json:"instanceId,omitempty" tf:"instance_id,omitempty"`

	// Specifies the type of the LTS log.
	// Value options: error_log, slow_log, audit_log. Changing this creates a new resource.
	// Specifies the type of the LTS log.
	LogType *string `json:"logType,omitempty" tf:"log_type,omitempty"`

	// Specifies the ID of the LTS log group.
	// Specifies the ID of the LTS log group.
	LtsGroupID *string `json:"ltsGroupId,omitempty" tf:"lts_group_id,omitempty"`

	// Specifies the ID of the LTS log stream.
	// Specifies the ID of the LTS log stream.
	LtsStreamID *string `json:"ltsStreamId,omitempty" tf:"lts_stream_id,omitempty"`

	// Specifies the region in which to create the resource.
	// If omitted, the provider-level region will be used. Changing this creates a new resource.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`
}

type LtsLogParameters struct {

	// Specifies the engine of the RDS instance.
	// Value options: mysql, postgresql, sqlserver. Changing this creates a new resource.
	// Specifies the engine of the RDS instance.
	// +kubebuilder:validation:Optional
	Engine *string `json:"engine,omitempty" tf:"engine,omitempty"`

	// Specifies the ID of the RDS instance.
	// Changing this creates a new resource.
	// Specifies the ID of the RDS instance.
	// +kubebuilder:validation:Optional
	InstanceID *string `json:"instanceId,omitempty" tf:"instance_id,omitempty"`

	// Specifies the type of the LTS log.
	// Value options: error_log, slow_log, audit_log. Changing this creates a new resource.
	// Specifies the type of the LTS log.
	// +kubebuilder:validation:Optional
	LogType *string `json:"logType,omitempty" tf:"log_type,omitempty"`

	// Specifies the ID of the LTS log group.
	// Specifies the ID of the LTS log group.
	// +kubebuilder:validation:Optional
	LtsGroupID *string `json:"ltsGroupId,omitempty" tf:"lts_group_id,omitempty"`

	// Specifies the ID of the LTS log stream.
	// Specifies the ID of the LTS log stream.
	// +kubebuilder:validation:Optional
	LtsStreamID *string `json:"ltsStreamId,omitempty" tf:"lts_stream_id,omitempty"`

	// Specifies the region in which to create the resource.
	// If omitted, the provider-level region will be used. Changing this creates a new resource.
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`
}

// LtsLogSpec defines the desired state of LtsLog
type LtsLogSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     LtsLogParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider LtsLogInitParameters `json:"initProvider,omitempty"`
}

// LtsLogStatus defines the observed state of LtsLog.
type LtsLogStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        LtsLogObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// LtsLog is the Schema for the LtsLogs API. ""
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,huaweicloud}
type LtsLog struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.engine) || (has(self.initProvider) && has(self.initProvider.engine))",message="spec.forProvider.engine is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.instanceId) || (has(self.initProvider) && has(self.initProvider.instanceId))",message="spec.forProvider.instanceId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.logType) || (has(self.initProvider) && has(self.initProvider.logType))",message="spec.forProvider.logType is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.ltsGroupId) || (has(self.initProvider) && has(self.initProvider.ltsGroupId))",message="spec.forProvider.ltsGroupId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.ltsStreamId) || (has(self.initProvider) && has(self.initProvider.ltsStreamId))",message="spec.forProvider.ltsStreamId is a required parameter"
	Spec   LtsLogSpec   `json:"spec"`
	Status LtsLogStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// LtsLogList contains a list of LtsLogs
type LtsLogList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []LtsLog `json:"items"`
}

// Repository type metadata.
var (
	LtsLog_Kind             = "LtsLog"
	LtsLog_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: LtsLog_Kind}.String()
	LtsLog_KindAPIVersion   = LtsLog_Kind + "." + CRDGroupVersion.String()
	LtsLog_GroupVersionKind = CRDGroupVersion.WithKind(LtsLog_Kind)
)

func init() {
	SchemeBuilder.Register(&LtsLog{}, &LtsLogList{})
}
