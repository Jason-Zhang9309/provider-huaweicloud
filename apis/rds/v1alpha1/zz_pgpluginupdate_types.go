// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type PgPluginUpdateInitParameters struct {

	// Specifies the database name.
	// Specifies the database name.
	DatabaseName *string `json:"databaseName,omitempty" tf:"database_name,omitempty"`

	// Specifies the extension name.
	// Specifies the extension name.
	ExtensionName *string `json:"extensionName,omitempty" tf:"extension_name,omitempty"`

	// Specifies the ID of the RDS instance.
	// Specifies the ID of the RDS instance.
	// +crossplane:generate:reference:type=github.com/huaweicloud/provider-huaweicloud/apis/rds/v1alpha1.Instance
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	InstanceID *string `json:"instanceId,omitempty" tf:"instance_id,omitempty"`

	// Reference to a Instance in rds to populate instanceId.
	// +kubebuilder:validation:Optional
	InstanceIDRef *v1.Reference `json:"instanceIdRef,omitempty" tf:"-"`

	// Selector for a Instance in rds to populate instanceId.
	// +kubebuilder:validation:Optional
	InstanceIDSelector *v1.Selector `json:"instanceIdSelector,omitempty" tf:"-"`

	// Specifies the region in which to create the resource.
	// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`
}

type PgPluginUpdateObservation struct {

	// Specifies the database name.
	// Specifies the database name.
	DatabaseName *string `json:"databaseName,omitempty" tf:"database_name,omitempty"`

	// Specifies the extension name.
	// Specifies the extension name.
	ExtensionName *string `json:"extensionName,omitempty" tf:"extension_name,omitempty"`

	// The resource ID. The format is <instance_id>/<database_name>/<extension_name>.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Specifies the ID of the RDS instance.
	// Specifies the ID of the RDS instance.
	InstanceID *string `json:"instanceId,omitempty" tf:"instance_id,omitempty"`

	// Specifies the region in which to create the resource.
	// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`
}

type PgPluginUpdateParameters struct {

	// Specifies the database name.
	// Specifies the database name.
	// +kubebuilder:validation:Optional
	DatabaseName *string `json:"databaseName,omitempty" tf:"database_name,omitempty"`

	// Specifies the extension name.
	// Specifies the extension name.
	// +kubebuilder:validation:Optional
	ExtensionName *string `json:"extensionName,omitempty" tf:"extension_name,omitempty"`

	// Specifies the ID of the RDS instance.
	// Specifies the ID of the RDS instance.
	// +crossplane:generate:reference:type=github.com/huaweicloud/provider-huaweicloud/apis/rds/v1alpha1.Instance
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	InstanceID *string `json:"instanceId,omitempty" tf:"instance_id,omitempty"`

	// Reference to a Instance in rds to populate instanceId.
	// +kubebuilder:validation:Optional
	InstanceIDRef *v1.Reference `json:"instanceIdRef,omitempty" tf:"-"`

	// Selector for a Instance in rds to populate instanceId.
	// +kubebuilder:validation:Optional
	InstanceIDSelector *v1.Selector `json:"instanceIdSelector,omitempty" tf:"-"`

	// Specifies the region in which to create the resource.
	// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`
}

// PgPluginUpdateSpec defines the desired state of PgPluginUpdate
type PgPluginUpdateSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     PgPluginUpdateParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider PgPluginUpdateInitParameters `json:"initProvider,omitempty"`
}

// PgPluginUpdateStatus defines the observed state of PgPluginUpdate.
type PgPluginUpdateStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        PgPluginUpdateObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// PgPluginUpdate is the Schema for the PgPluginUpdates API. Manages an RDS plugin update resource within HuaweiCloud.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,huaweicloud}
type PgPluginUpdate struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.databaseName) || (has(self.initProvider) && has(self.initProvider.databaseName))",message="spec.forProvider.databaseName is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.extensionName) || (has(self.initProvider) && has(self.initProvider.extensionName))",message="spec.forProvider.extensionName is a required parameter"
	Spec   PgPluginUpdateSpec   `json:"spec"`
	Status PgPluginUpdateStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// PgPluginUpdateList contains a list of PgPluginUpdates
type PgPluginUpdateList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []PgPluginUpdate `json:"items"`
}

// Repository type metadata.
var (
	PgPluginUpdate_Kind             = "PgPluginUpdate"
	PgPluginUpdate_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: PgPluginUpdate_Kind}.String()
	PgPluginUpdate_KindAPIVersion   = PgPluginUpdate_Kind + "." + CRDGroupVersion.String()
	PgPluginUpdate_GroupVersionKind = CRDGroupVersion.WithKind(PgPluginUpdate_Kind)
)

func init() {
	SchemeBuilder.Register(&PgPluginUpdate{}, &PgPluginUpdateList{})
}
