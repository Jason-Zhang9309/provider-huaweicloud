// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AttachmentInitParameters struct {
}

type AttachmentObservation struct {

	// The device name.
	Device *string `json:"device,omitempty" tf:"device,omitempty"`

	// The ID of the attachment information.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The ID of the server to which the disk is attached.
	InstanceID *string `json:"instanceId,omitempty" tf:"instance_id,omitempty"`
}

type AttachmentParameters struct {
}

type VolumeInitParameters struct {
	AutoPay *string `json:"autoPay,omitempty" tf:"auto_pay,omitempty"`

	// Specifies whether auto renew is enabled.
	// Valid values are true and false.
	AutoRenew *string `json:"autoRenew,omitempty" tf:"auto_renew,omitempty"`

	// Specifies the availability zone for the disk. Changing this creates
	// a new disk.
	AvailabilityZone *string `json:"availabilityZone,omitempty" tf:"availability_zone,omitempty"`

	// Specifies the backup ID from which to create the disk. Changing this
	// creates a new disk.
	BackupID *string `json:"backupId,omitempty" tf:"backup_id,omitempty"`

	// Specifies the delete mode of snapshot. The default value is false. All snapshot
	// associated with the disk will also be deleted when the parameter is set to true.
	Cascade *bool `json:"cascade,omitempty" tf:"cascade,omitempty"`

	// Specifies the charging mode of the disk.
	// The valid values are as follows:
	ChargingMode *string `json:"chargingMode,omitempty" tf:"charging_mode,omitempty"`

	// Specifies the ID of the DSS storage pool accommodating the disk.
	DedicatedStorageID *string `json:"dedicatedStorageId,omitempty" tf:"dedicated_storage_id,omitempty"`

	// Specifies the disk description. The value can contain a maximum of 255 bytes.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Specifies the device type of disk to create. Valid options are VBD and
	// SCSI. Defaults to VBD. Changing this creates a new disk.
	DeviceType *string `json:"deviceType,omitempty" tf:"device_type,omitempty"`

	// Specifies the enterprise project id of the disk. Changing this
	// creates a new disk.
	EnterpriseProjectID *string `json:"enterpriseProjectId,omitempty" tf:"enterprise_project_id,omitempty"`

	// Specifies the image ID from which to create the disk. Changing this creates
	// a new disk.
	ImageID *string `json:"imageId,omitempty" tf:"image_id,omitempty"`

	// Specifies the IOPS(Input/Output Operations Per Second) for the volume.
	// The field is valid and required when volume_type is set to GPSSD2 or ESSD2.
	Iops *float64 `json:"iops,omitempty" tf:"iops,omitempty"`

	// Specifies the Encryption KMS ID to create the disk. Changing this creates a
	// new disk.
	KMSID *string `json:"kmsId,omitempty" tf:"kms_id,omitempty"`

	// Specifies whether the disk is shareable. The default value is false.
	// Changing this creates a new disk.
	Multiattach *bool `json:"multiattach,omitempty" tf:"multiattach,omitempty"`

	// Specifies the disk name. The value can contain a maximum of 255 bytes.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Specifies the charging period of the disk.
	// If period_unit is set to month, the value ranges from 1 to 9.
	// If period_unit is set to year, the valid value is 1.
	// This parameter is mandatory if charging_mode is set to prePaid.
	// Changing this creates a new disk.
	Period *float64 `json:"period,omitempty" tf:"period,omitempty"`

	// Specifies the charging period unit of the disk.
	// Valid values are month and year. This parameter is mandatory if charging_mode is set to prePaid.
	// Changing this creates a new disk.
	PeriodUnit *string `json:"periodUnit,omitempty" tf:"period_unit,omitempty"`

	// Specifies the region in which to create the disk. If omitted, the
	// provider-level region will be used. Changing this creates a new disk.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Specify the server ID to which the cloudvolume is to be mounted.
	// After specifying the value of this field, the cloudvolume will be automatically attached on the cloudserver.
	// The charging_mode of the created cloudvolume will be consistent with that of the cloudserver.
	// Currently, only ECS cloudservers are supported, and BMS bare metal cloudservers are not supported yet.
	// Changing this creates a new disk.
	// +crossplane:generate:reference:type=github.com/huaweicloud/provider-huaweicloud/apis/ecs/v1alpha1.Instance
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	ServerID *string `json:"serverId,omitempty" tf:"server_id,omitempty"`

	// Reference to a Instance in ecs to populate serverId.
	// +kubebuilder:validation:Optional
	ServerIDRef *v1.Reference `json:"serverIdRef,omitempty" tf:"-"`

	// Selector for a Instance in ecs to populate serverId.
	// +kubebuilder:validation:Optional
	ServerIDSelector *v1.Selector `json:"serverIdSelector,omitempty" tf:"-"`

	// Specifies the disk size, in GB. The valid value is range from:
	Size *float64 `json:"size,omitempty" tf:"size,omitempty"`

	// Specifies the snapshot ID from which to create the disk. Changing this
	// creates a new disk.
	// +crossplane:generate:reference:type=github.com/huaweicloud/provider-huaweicloud/apis/evs/v1alpha1.Snapshot
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	SnapshotID *string `json:"snapshotId,omitempty" tf:"snapshot_id,omitempty"`

	// Reference to a Snapshot in evs to populate snapshotId.
	// +kubebuilder:validation:Optional
	SnapshotIDRef *v1.Reference `json:"snapshotIdRef,omitempty" tf:"-"`

	// Selector for a Snapshot in evs to populate snapshotId.
	// +kubebuilder:validation:Optional
	SnapshotIDSelector *v1.Selector `json:"snapshotIdSelector,omitempty" tf:"-"`

	// Specifies the key/value pairs to associate with the disk.
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// Specifies the throughput for the volume. The Unit is MiB/s.
	// The field is valid and required when volume_type is set to GPSSD2.
	Throughput *float64 `json:"throughput,omitempty" tf:"throughput,omitempty"`

	// Specifies the disk type. Changing this creates a new disk.
	// Valid values are as follows:
	VolumeType *string `json:"volumeType,omitempty" tf:"volume_type,omitempty"`
}

type VolumeObservation struct {

	// If a disk is attached to an instance, this attribute will display the Attachment ID, Instance ID, and
	// the Device as the Instance sees it. The object structure is documented below.
	Attachment []AttachmentObservation `json:"attachment,omitempty" tf:"attachment,omitempty"`

	AutoPay *string `json:"autoPay,omitempty" tf:"auto_pay,omitempty"`

	// Specifies whether auto renew is enabled.
	// Valid values are true and false.
	AutoRenew *string `json:"autoRenew,omitempty" tf:"auto_renew,omitempty"`

	// Specifies the availability zone for the disk. Changing this creates
	// a new disk.
	AvailabilityZone *string `json:"availabilityZone,omitempty" tf:"availability_zone,omitempty"`

	// Specifies the backup ID from which to create the disk. Changing this
	// creates a new disk.
	BackupID *string `json:"backupId,omitempty" tf:"backup_id,omitempty"`

	// Specifies the delete mode of snapshot. The default value is false. All snapshot
	// associated with the disk will also be deleted when the parameter is set to true.
	Cascade *bool `json:"cascade,omitempty" tf:"cascade,omitempty"`

	// Specifies the charging mode of the disk.
	// The valid values are as follows:
	ChargingMode *string `json:"chargingMode,omitempty" tf:"charging_mode,omitempty"`

	// Specifies the ID of the DSS storage pool accommodating the disk.
	DedicatedStorageID *string `json:"dedicatedStorageId,omitempty" tf:"dedicated_storage_id,omitempty"`

	// The name of the DSS storage pool accommodating the disk.
	DedicatedStorageName *string `json:"dedicatedStorageName,omitempty" tf:"dedicated_storage_name,omitempty"`

	// Specifies the disk description. The value can contain a maximum of 255 bytes.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Specifies the device type of disk to create. Valid options are VBD and
	// SCSI. Defaults to VBD. Changing this creates a new disk.
	DeviceType *string `json:"deviceType,omitempty" tf:"device_type,omitempty"`

	// Specifies the enterprise project id of the disk. Changing this
	// creates a new disk.
	EnterpriseProjectID *string `json:"enterpriseProjectId,omitempty" tf:"enterprise_project_id,omitempty"`

	// A resource ID in UUID format.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Specifies the image ID from which to create the disk. Changing this creates
	// a new disk.
	ImageID *string `json:"imageId,omitempty" tf:"image_id,omitempty"`

	// Specifies the IOPS(Input/Output Operations Per Second) for the volume.
	// The field is valid and required when volume_type is set to GPSSD2 or ESSD2.
	Iops *float64 `json:"iops,omitempty" tf:"iops,omitempty"`

	// Specifies the Encryption KMS ID to create the disk. Changing this creates a
	// new disk.
	KMSID *string `json:"kmsId,omitempty" tf:"kms_id,omitempty"`

	// Specifies whether the disk is shareable. The default value is false.
	// Changing this creates a new disk.
	Multiattach *bool `json:"multiattach,omitempty" tf:"multiattach,omitempty"`

	// Specifies the disk name. The value can contain a maximum of 255 bytes.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Specifies the charging period of the disk.
	// If period_unit is set to month, the value ranges from 1 to 9.
	// If period_unit is set to year, the valid value is 1.
	// This parameter is mandatory if charging_mode is set to prePaid.
	// Changing this creates a new disk.
	Period *float64 `json:"period,omitempty" tf:"period,omitempty"`

	// Specifies the charging period unit of the disk.
	// Valid values are month and year. This parameter is mandatory if charging_mode is set to prePaid.
	// Changing this creates a new disk.
	PeriodUnit *string `json:"periodUnit,omitempty" tf:"period_unit,omitempty"`

	// Specifies the region in which to create the disk. If omitted, the
	// provider-level region will be used. Changing this creates a new disk.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Specify the server ID to which the cloudvolume is to be mounted.
	// After specifying the value of this field, the cloudvolume will be automatically attached on the cloudserver.
	// The charging_mode of the created cloudvolume will be consistent with that of the cloudserver.
	// Currently, only ECS cloudservers are supported, and BMS bare metal cloudservers are not supported yet.
	// Changing this creates a new disk.
	ServerID *string `json:"serverId,omitempty" tf:"server_id,omitempty"`

	// Specifies the disk size, in GB. The valid value is range from:
	Size *float64 `json:"size,omitempty" tf:"size,omitempty"`

	// Specifies the snapshot ID from which to create the disk. Changing this
	// creates a new disk.
	SnapshotID *string `json:"snapshotId,omitempty" tf:"snapshot_id,omitempty"`

	// Specifies the key/value pairs to associate with the disk.
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// Specifies the throughput for the volume. The Unit is MiB/s.
	// The field is valid and required when volume_type is set to GPSSD2.
	Throughput *float64 `json:"throughput,omitempty" tf:"throughput,omitempty"`

	// Specifies the disk type. Changing this creates a new disk.
	// Valid values are as follows:
	VolumeType *string `json:"volumeType,omitempty" tf:"volume_type,omitempty"`

	// The unique identifier used for mounting the EVS disk.
	Wwn *string `json:"wwn,omitempty" tf:"wwn,omitempty"`
}

type VolumeParameters struct {

	// +kubebuilder:validation:Optional
	AutoPay *string `json:"autoPay,omitempty" tf:"auto_pay,omitempty"`

	// Specifies whether auto renew is enabled.
	// Valid values are true and false.
	// +kubebuilder:validation:Optional
	AutoRenew *string `json:"autoRenew,omitempty" tf:"auto_renew,omitempty"`

	// Specifies the availability zone for the disk. Changing this creates
	// a new disk.
	// +kubebuilder:validation:Optional
	AvailabilityZone *string `json:"availabilityZone,omitempty" tf:"availability_zone,omitempty"`

	// Specifies the backup ID from which to create the disk. Changing this
	// creates a new disk.
	// +kubebuilder:validation:Optional
	BackupID *string `json:"backupId,omitempty" tf:"backup_id,omitempty"`

	// Specifies the delete mode of snapshot. The default value is false. All snapshot
	// associated with the disk will also be deleted when the parameter is set to true.
	// +kubebuilder:validation:Optional
	Cascade *bool `json:"cascade,omitempty" tf:"cascade,omitempty"`

	// Specifies the charging mode of the disk.
	// The valid values are as follows:
	// +kubebuilder:validation:Optional
	ChargingMode *string `json:"chargingMode,omitempty" tf:"charging_mode,omitempty"`

	// Specifies the ID of the DSS storage pool accommodating the disk.
	// +kubebuilder:validation:Optional
	DedicatedStorageID *string `json:"dedicatedStorageId,omitempty" tf:"dedicated_storage_id,omitempty"`

	// Specifies the disk description. The value can contain a maximum of 255 bytes.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Specifies the device type of disk to create. Valid options are VBD and
	// SCSI. Defaults to VBD. Changing this creates a new disk.
	// +kubebuilder:validation:Optional
	DeviceType *string `json:"deviceType,omitempty" tf:"device_type,omitempty"`

	// Specifies the enterprise project id of the disk. Changing this
	// creates a new disk.
	// +kubebuilder:validation:Optional
	EnterpriseProjectID *string `json:"enterpriseProjectId,omitempty" tf:"enterprise_project_id,omitempty"`

	// Specifies the image ID from which to create the disk. Changing this creates
	// a new disk.
	// +kubebuilder:validation:Optional
	ImageID *string `json:"imageId,omitempty" tf:"image_id,omitempty"`

	// Specifies the IOPS(Input/Output Operations Per Second) for the volume.
	// The field is valid and required when volume_type is set to GPSSD2 or ESSD2.
	// +kubebuilder:validation:Optional
	Iops *float64 `json:"iops,omitempty" tf:"iops,omitempty"`

	// Specifies the Encryption KMS ID to create the disk. Changing this creates a
	// new disk.
	// +kubebuilder:validation:Optional
	KMSID *string `json:"kmsId,omitempty" tf:"kms_id,omitempty"`

	// Specifies whether the disk is shareable. The default value is false.
	// Changing this creates a new disk.
	// +kubebuilder:validation:Optional
	Multiattach *bool `json:"multiattach,omitempty" tf:"multiattach,omitempty"`

	// Specifies the disk name. The value can contain a maximum of 255 bytes.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Specifies the charging period of the disk.
	// If period_unit is set to month, the value ranges from 1 to 9.
	// If period_unit is set to year, the valid value is 1.
	// This parameter is mandatory if charging_mode is set to prePaid.
	// Changing this creates a new disk.
	// +kubebuilder:validation:Optional
	Period *float64 `json:"period,omitempty" tf:"period,omitempty"`

	// Specifies the charging period unit of the disk.
	// Valid values are month and year. This parameter is mandatory if charging_mode is set to prePaid.
	// Changing this creates a new disk.
	// +kubebuilder:validation:Optional
	PeriodUnit *string `json:"periodUnit,omitempty" tf:"period_unit,omitempty"`

	// Specifies the region in which to create the disk. If omitted, the
	// provider-level region will be used. Changing this creates a new disk.
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Specify the server ID to which the cloudvolume is to be mounted.
	// After specifying the value of this field, the cloudvolume will be automatically attached on the cloudserver.
	// The charging_mode of the created cloudvolume will be consistent with that of the cloudserver.
	// Currently, only ECS cloudservers are supported, and BMS bare metal cloudservers are not supported yet.
	// Changing this creates a new disk.
	// +crossplane:generate:reference:type=github.com/huaweicloud/provider-huaweicloud/apis/ecs/v1alpha1.Instance
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	ServerID *string `json:"serverId,omitempty" tf:"server_id,omitempty"`

	// Reference to a Instance in ecs to populate serverId.
	// +kubebuilder:validation:Optional
	ServerIDRef *v1.Reference `json:"serverIdRef,omitempty" tf:"-"`

	// Selector for a Instance in ecs to populate serverId.
	// +kubebuilder:validation:Optional
	ServerIDSelector *v1.Selector `json:"serverIdSelector,omitempty" tf:"-"`

	// Specifies the disk size, in GB. The valid value is range from:
	// +kubebuilder:validation:Optional
	Size *float64 `json:"size,omitempty" tf:"size,omitempty"`

	// Specifies the snapshot ID from which to create the disk. Changing this
	// creates a new disk.
	// +crossplane:generate:reference:type=github.com/huaweicloud/provider-huaweicloud/apis/evs/v1alpha1.Snapshot
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	SnapshotID *string `json:"snapshotId,omitempty" tf:"snapshot_id,omitempty"`

	// Reference to a Snapshot in evs to populate snapshotId.
	// +kubebuilder:validation:Optional
	SnapshotIDRef *v1.Reference `json:"snapshotIdRef,omitempty" tf:"-"`

	// Selector for a Snapshot in evs to populate snapshotId.
	// +kubebuilder:validation:Optional
	SnapshotIDSelector *v1.Selector `json:"snapshotIdSelector,omitempty" tf:"-"`

	// Specifies the key/value pairs to associate with the disk.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// Specifies the throughput for the volume. The Unit is MiB/s.
	// The field is valid and required when volume_type is set to GPSSD2.
	// +kubebuilder:validation:Optional
	Throughput *float64 `json:"throughput,omitempty" tf:"throughput,omitempty"`

	// Specifies the disk type. Changing this creates a new disk.
	// Valid values are as follows:
	// +kubebuilder:validation:Optional
	VolumeType *string `json:"volumeType,omitempty" tf:"volume_type,omitempty"`
}

// VolumeSpec defines the desired state of Volume
type VolumeSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     VolumeParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider VolumeInitParameters `json:"initProvider,omitempty"`
}

// VolumeStatus defines the observed state of Volume.
type VolumeStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        VolumeObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Volume is the Schema for the Volumes API. ""
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,huaweicloud}
type Volume struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.availabilityZone) || (has(self.initProvider) && has(self.initProvider.availabilityZone))",message="spec.forProvider.availabilityZone is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.volumeType) || (has(self.initProvider) && has(self.initProvider.volumeType))",message="spec.forProvider.volumeType is a required parameter"
	Spec   VolumeSpec   `json:"spec"`
	Status VolumeStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// VolumeList contains a list of Volumes
type VolumeList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Volume `json:"items"`
}

// Repository type metadata.
var (
	Volume_Kind             = "Volume"
	Volume_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Volume_Kind}.String()
	Volume_KindAPIVersion   = Volume_Kind + "." + CRDGroupVersion.String()
	Volume_GroupVersionKind = CRDGroupVersion.WithKind(Volume_Kind)
)

func init() {
	SchemeBuilder.Register(&Volume{}, &VolumeList{})
}
