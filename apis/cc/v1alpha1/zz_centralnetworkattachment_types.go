// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type CentralNetworkAttachmentInitParameters struct {

	// The central network ID.
	// +crossplane:generate:reference:type=github.com/huaweicloud/provider-huaweicloud/apis/cc/v1alpha1.CentralNetwork
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	CentralNetworkID *string `json:"centralNetworkId,omitempty" tf:"central_network_id,omitempty"`

	// Reference to a CentralNetwork in cc to populate centralNetworkId.
	// +kubebuilder:validation:Optional
	CentralNetworkIDRef *v1.Reference `json:"centralNetworkIdRef,omitempty" tf:"-"`

	// Selector for a CentralNetwork in cc to populate centralNetworkId.
	// +kubebuilder:validation:Optional
	CentralNetworkIDSelector *v1.Selector `json:"centralNetworkIdSelector,omitempty" tf:"-"`

	// The central network plane ID.
	// The central network plane ID.
	CentralNetworkPlaneID *string `json:"centralNetworkPlaneId,omitempty" tf:"central_network_plane_id,omitempty"`

	// The description of the attachment.
	// The description of the attachment.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The enterprise router ID.
	// The enterprise router ID.
	EnterpriseRouterID *string `json:"enterpriseRouterId,omitempty" tf:"enterprise_router_id,omitempty"`

	// The project ID to which the enterprise router belongs.
	// The project ID to which the enterprise router belongs.
	EnterpriseRouterProjectID *string `json:"enterpriseRouterProjectId,omitempty" tf:"enterprise_router_project_id,omitempty"`

	// The region ID to which the enterprise router belongs.
	// The region ID to which the enterprise router belongs.
	EnterpriseRouterRegionID *string `json:"enterpriseRouterRegionId,omitempty" tf:"enterprise_router_region_id,omitempty"`

	// The global DC gateway ID.
	// The global DC gateway ID.
	GlobalDcGatewayID *string `json:"globalDcGatewayId,omitempty" tf:"global_dc_gateway_id,omitempty"`

	// The project ID to which the global DC gateway belongs.
	// The project ID to which the global DC gateway belongs.
	GlobalDcGatewayProjectID *string `json:"globalDcGatewayProjectId,omitempty" tf:"global_dc_gateway_project_id,omitempty"`

	// The region ID to which the global DC gateway belongs.
	// The region ID to which the global DC gateway belongs.
	GlobalDcGatewayRegionID *string `json:"globalDcGatewayRegionId,omitempty" tf:"global_dc_gateway_region_id,omitempty"`

	// The name of the attachment.
	// The name of the attachment.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Specifies the region in which to create the resource.
	// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`
}

type CentralNetworkAttachmentObservation struct {

	// The central network ID.
	CentralNetworkID *string `json:"centralNetworkId,omitempty" tf:"central_network_id,omitempty"`

	// The central network plane ID.
	// The central network plane ID.
	CentralNetworkPlaneID *string `json:"centralNetworkPlaneId,omitempty" tf:"central_network_plane_id,omitempty"`

	// The description of the attachment.
	// The description of the attachment.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The enterprise router ID.
	// The enterprise router ID.
	EnterpriseRouterID *string `json:"enterpriseRouterId,omitempty" tf:"enterprise_router_id,omitempty"`

	// The project ID to which the enterprise router belongs.
	// The project ID to which the enterprise router belongs.
	EnterpriseRouterProjectID *string `json:"enterpriseRouterProjectId,omitempty" tf:"enterprise_router_project_id,omitempty"`

	// The region ID to which the enterprise router belongs.
	// The region ID to which the enterprise router belongs.
	EnterpriseRouterRegionID *string `json:"enterpriseRouterRegionId,omitempty" tf:"enterprise_router_region_id,omitempty"`

	// The global DC gateway ID.
	// The global DC gateway ID.
	GlobalDcGatewayID *string `json:"globalDcGatewayId,omitempty" tf:"global_dc_gateway_id,omitempty"`

	// The project ID to which the global DC gateway belongs.
	// The project ID to which the global DC gateway belongs.
	GlobalDcGatewayProjectID *string `json:"globalDcGatewayProjectId,omitempty" tf:"global_dc_gateway_project_id,omitempty"`

	// The region ID to which the global DC gateway belongs.
	// The region ID to which the global DC gateway belongs.
	GlobalDcGatewayRegionID *string `json:"globalDcGatewayRegionId,omitempty" tf:"global_dc_gateway_region_id,omitempty"`

	// The resource ID.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The name of the attachment.
	// The name of the attachment.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Specifies the region in which to create the resource.
	// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Central network attachment status.
	// The valid values are as follows:
	// Central network attachment status.
	State *string `json:"state,omitempty" tf:"state,omitempty"`
}

type CentralNetworkAttachmentParameters struct {

	// The central network ID.
	// +crossplane:generate:reference:type=github.com/huaweicloud/provider-huaweicloud/apis/cc/v1alpha1.CentralNetwork
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	CentralNetworkID *string `json:"centralNetworkId,omitempty" tf:"central_network_id,omitempty"`

	// Reference to a CentralNetwork in cc to populate centralNetworkId.
	// +kubebuilder:validation:Optional
	CentralNetworkIDRef *v1.Reference `json:"centralNetworkIdRef,omitempty" tf:"-"`

	// Selector for a CentralNetwork in cc to populate centralNetworkId.
	// +kubebuilder:validation:Optional
	CentralNetworkIDSelector *v1.Selector `json:"centralNetworkIdSelector,omitempty" tf:"-"`

	// The central network plane ID.
	// The central network plane ID.
	// +kubebuilder:validation:Optional
	CentralNetworkPlaneID *string `json:"centralNetworkPlaneId,omitempty" tf:"central_network_plane_id,omitempty"`

	// The description of the attachment.
	// The description of the attachment.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The enterprise router ID.
	// The enterprise router ID.
	// +kubebuilder:validation:Optional
	EnterpriseRouterID *string `json:"enterpriseRouterId,omitempty" tf:"enterprise_router_id,omitempty"`

	// The project ID to which the enterprise router belongs.
	// The project ID to which the enterprise router belongs.
	// +kubebuilder:validation:Optional
	EnterpriseRouterProjectID *string `json:"enterpriseRouterProjectId,omitempty" tf:"enterprise_router_project_id,omitempty"`

	// The region ID to which the enterprise router belongs.
	// The region ID to which the enterprise router belongs.
	// +kubebuilder:validation:Optional
	EnterpriseRouterRegionID *string `json:"enterpriseRouterRegionId,omitempty" tf:"enterprise_router_region_id,omitempty"`

	// The global DC gateway ID.
	// The global DC gateway ID.
	// +kubebuilder:validation:Optional
	GlobalDcGatewayID *string `json:"globalDcGatewayId,omitempty" tf:"global_dc_gateway_id,omitempty"`

	// The project ID to which the global DC gateway belongs.
	// The project ID to which the global DC gateway belongs.
	// +kubebuilder:validation:Optional
	GlobalDcGatewayProjectID *string `json:"globalDcGatewayProjectId,omitempty" tf:"global_dc_gateway_project_id,omitempty"`

	// The region ID to which the global DC gateway belongs.
	// The region ID to which the global DC gateway belongs.
	// +kubebuilder:validation:Optional
	GlobalDcGatewayRegionID *string `json:"globalDcGatewayRegionId,omitempty" tf:"global_dc_gateway_region_id,omitempty"`

	// The name of the attachment.
	// The name of the attachment.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Specifies the region in which to create the resource.
	// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`
}

// CentralNetworkAttachmentSpec defines the desired state of CentralNetworkAttachment
type CentralNetworkAttachmentSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     CentralNetworkAttachmentParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider CentralNetworkAttachmentInitParameters `json:"initProvider,omitempty"`
}

// CentralNetworkAttachmentStatus defines the observed state of CentralNetworkAttachment.
type CentralNetworkAttachmentStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        CentralNetworkAttachmentObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// CentralNetworkAttachment is the Schema for the CentralNetworkAttachments API. ""
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,huaweicloud}
type CentralNetworkAttachment struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.enterpriseRouterId) || (has(self.initProvider) && has(self.initProvider.enterpriseRouterId))",message="spec.forProvider.enterpriseRouterId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.enterpriseRouterProjectId) || (has(self.initProvider) && has(self.initProvider.enterpriseRouterProjectId))",message="spec.forProvider.enterpriseRouterProjectId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.enterpriseRouterRegionId) || (has(self.initProvider) && has(self.initProvider.enterpriseRouterRegionId))",message="spec.forProvider.enterpriseRouterRegionId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.globalDcGatewayId) || (has(self.initProvider) && has(self.initProvider.globalDcGatewayId))",message="spec.forProvider.globalDcGatewayId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.globalDcGatewayProjectId) || (has(self.initProvider) && has(self.initProvider.globalDcGatewayProjectId))",message="spec.forProvider.globalDcGatewayProjectId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.globalDcGatewayRegionId) || (has(self.initProvider) && has(self.initProvider.globalDcGatewayRegionId))",message="spec.forProvider.globalDcGatewayRegionId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	Spec   CentralNetworkAttachmentSpec   `json:"spec"`
	Status CentralNetworkAttachmentStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// CentralNetworkAttachmentList contains a list of CentralNetworkAttachments
type CentralNetworkAttachmentList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []CentralNetworkAttachment `json:"items"`
}

// Repository type metadata.
var (
	CentralNetworkAttachment_Kind             = "CentralNetworkAttachment"
	CentralNetworkAttachment_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: CentralNetworkAttachment_Kind}.String()
	CentralNetworkAttachment_KindAPIVersion   = CentralNetworkAttachment_Kind + "." + CRDGroupVersion.String()
	CentralNetworkAttachment_GroupVersionKind = CRDGroupVersion.WithKind(CentralNetworkAttachment_Kind)
)

func init() {
	SchemeBuilder.Register(&CentralNetworkAttachment{}, &CentralNetworkAttachmentList{})
}
