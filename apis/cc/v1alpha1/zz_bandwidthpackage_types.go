// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type BandwidthPackageInitParameters struct {

	// Bandwidth in the bandwidth package.
	// Bandwidth in the bandwidth package.
	Bandwidth *float64 `json:"bandwidth,omitempty" tf:"bandwidth,omitempty"`

	// Billing mode of the bandwidth package.
	// The options are as follows:
	// Billing mode of the bandwidth package.
	BillingMode *string `json:"billingMode,omitempty" tf:"billing_mode,omitempty"`

	// Billing option of the bandwidth package.
	// Valid value is bandwidth.
	// Billing option of the bandwidth package.
	ChargeMode *string `json:"chargeMode,omitempty" tf:"charge_mode,omitempty"`

	// The description about the bandwidth package.
	// The description can contain a maximum of 85 characters.
	// The description about the bandwidth package.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// ID of the enterprise project that the bandwidth package
	// belongs to. Value 0 indicates the default enterprise project.
	// ID of the enterprise project that the bandwidth package belongs to.
	EnterpriseProjectID *string `json:"enterpriseProjectId,omitempty" tf:"enterprise_project_id,omitempty"`

	// Interflow mode of the bandwidth package.
	// Valid values are Area and Region, defaults to Area. Changing this parameter will create a new resource.
	// Interflow mode of the bandwidth package.
	InterflowMode *string `json:"interflowMode,omitempty" tf:"interflow_mode,omitempty"`

	// The local area ID.
	// Valid values are Chinese-Mainland, Asia-Pacific, Africa, Western-Latin-America,
	// Eastern-Latin-America and Northern-Latin-America.
	// The local area ID.
	LocalAreaID *string `json:"localAreaId,omitempty" tf:"local_area_id,omitempty"`

	// The bandwidth package name.
	// The name can contain a maximum of 64 characters.
	// The bandwidth package name.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Project ID.
	// If omitted, the provider-level project ID will be used.
	// Changing this parameter will create a new resource.
	// Project ID.
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// Specifies the region in which to create the resource.
	// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// The remote area ID.
	// Valid values are Chinese-Mainland, Asia-Pacific, Africa, Western-Latin-America,
	// Eastern-Latin-America and Northern-Latin-America.
	// The remote area ID.
	RemoteAreaID *string `json:"remoteAreaId,omitempty" tf:"remote_area_id,omitempty"`

	// ID of the resource that the bandwidth package is bound to.
	// ID of the resource that the bandwidth package is bound to.
	ResourceID *string `json:"resourceId,omitempty" tf:"resource_id,omitempty"`

	// Type of the resource that the bandwidth package is bound to.
	// Valid value is cloud_connection.
	// Type of the resource that the bandwidth package is bound to.
	ResourceType *string `json:"resourceType,omitempty" tf:"resource_type,omitempty"`

	// Specification code of the bandwidth package.
	// Changing this parameter will create a new resource.
	// If the value of interflow_mode is Area, the values are as follows:
	// Specification code of the bandwidth package.
	SpecCode *string `json:"specCode,omitempty" tf:"spec_code,omitempty"`

	// The key/value pairs to associate with the bandwidth package.
	// The key/value pairs to associate with the bandwidth package.
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

type BandwidthPackageObservation struct {

	// Bandwidth in the bandwidth package.
	// Bandwidth in the bandwidth package.
	Bandwidth *float64 `json:"bandwidth,omitempty" tf:"bandwidth,omitempty"`

	// Billing mode of the bandwidth package.
	// The options are as follows:
	// Billing mode of the bandwidth package.
	BillingMode *string `json:"billingMode,omitempty" tf:"billing_mode,omitempty"`

	// Billing option of the bandwidth package.
	// Valid value is bandwidth.
	// Billing option of the bandwidth package.
	ChargeMode *string `json:"chargeMode,omitempty" tf:"charge_mode,omitempty"`

	// The description about the bandwidth package.
	// The description can contain a maximum of 85 characters.
	// The description about the bandwidth package.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// ID of the enterprise project that the bandwidth package
	// belongs to. Value 0 indicates the default enterprise project.
	// ID of the enterprise project that the bandwidth package belongs to.
	EnterpriseProjectID *string `json:"enterpriseProjectId,omitempty" tf:"enterprise_project_id,omitempty"`

	// The resource ID.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Interflow mode of the bandwidth package.
	// Valid values are Area and Region, defaults to Area. Changing this parameter will create a new resource.
	// Interflow mode of the bandwidth package.
	InterflowMode *string `json:"interflowMode,omitempty" tf:"interflow_mode,omitempty"`

	// The local area ID.
	// Valid values are Chinese-Mainland, Asia-Pacific, Africa, Western-Latin-America,
	// Eastern-Latin-America and Northern-Latin-America.
	// The local area ID.
	LocalAreaID *string `json:"localAreaId,omitempty" tf:"local_area_id,omitempty"`

	// The bandwidth package name.
	// The name can contain a maximum of 64 characters.
	// The bandwidth package name.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Project ID.
	// If omitted, the provider-level project ID will be used.
	// Changing this parameter will create a new resource.
	// Project ID.
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// Specifies the region in which to create the resource.
	// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// The remote area ID.
	// Valid values are Chinese-Mainland, Asia-Pacific, Africa, Western-Latin-America,
	// Eastern-Latin-America and Northern-Latin-America.
	// The remote area ID.
	RemoteAreaID *string `json:"remoteAreaId,omitempty" tf:"remote_area_id,omitempty"`

	// ID of the resource that the bandwidth package is bound to.
	// ID of the resource that the bandwidth package is bound to.
	ResourceID *string `json:"resourceId,omitempty" tf:"resource_id,omitempty"`

	// Type of the resource that the bandwidth package is bound to.
	// Valid value is cloud_connection.
	// Type of the resource that the bandwidth package is bound to.
	ResourceType *string `json:"resourceType,omitempty" tf:"resource_type,omitempty"`

	// Specification code of the bandwidth package.
	// Changing this parameter will create a new resource.
	// If the value of interflow_mode is Area, the values are as follows:
	// Specification code of the bandwidth package.
	SpecCode *string `json:"specCode,omitempty" tf:"spec_code,omitempty"`

	// Bandwidth package status.
	// The valid value are as follows:
	// Bandwidth package status.
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// The key/value pairs to associate with the bandwidth package.
	// The key/value pairs to associate with the bandwidth package.
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

type BandwidthPackageParameters struct {

	// Bandwidth in the bandwidth package.
	// Bandwidth in the bandwidth package.
	// +kubebuilder:validation:Optional
	Bandwidth *float64 `json:"bandwidth,omitempty" tf:"bandwidth,omitempty"`

	// Billing mode of the bandwidth package.
	// The options are as follows:
	// Billing mode of the bandwidth package.
	// +kubebuilder:validation:Optional
	BillingMode *string `json:"billingMode,omitempty" tf:"billing_mode,omitempty"`

	// Billing option of the bandwidth package.
	// Valid value is bandwidth.
	// Billing option of the bandwidth package.
	// +kubebuilder:validation:Optional
	ChargeMode *string `json:"chargeMode,omitempty" tf:"charge_mode,omitempty"`

	// The description about the bandwidth package.
	// The description can contain a maximum of 85 characters.
	// The description about the bandwidth package.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// ID of the enterprise project that the bandwidth package
	// belongs to. Value 0 indicates the default enterprise project.
	// ID of the enterprise project that the bandwidth package belongs to.
	// +kubebuilder:validation:Optional
	EnterpriseProjectID *string `json:"enterpriseProjectId,omitempty" tf:"enterprise_project_id,omitempty"`

	// Interflow mode of the bandwidth package.
	// Valid values are Area and Region, defaults to Area. Changing this parameter will create a new resource.
	// Interflow mode of the bandwidth package.
	// +kubebuilder:validation:Optional
	InterflowMode *string `json:"interflowMode,omitempty" tf:"interflow_mode,omitempty"`

	// The local area ID.
	// Valid values are Chinese-Mainland, Asia-Pacific, Africa, Western-Latin-America,
	// Eastern-Latin-America and Northern-Latin-America.
	// The local area ID.
	// +kubebuilder:validation:Optional
	LocalAreaID *string `json:"localAreaId,omitempty" tf:"local_area_id,omitempty"`

	// The bandwidth package name.
	// The name can contain a maximum of 64 characters.
	// The bandwidth package name.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Project ID.
	// If omitted, the provider-level project ID will be used.
	// Changing this parameter will create a new resource.
	// Project ID.
	// +kubebuilder:validation:Optional
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// Specifies the region in which to create the resource.
	// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// The remote area ID.
	// Valid values are Chinese-Mainland, Asia-Pacific, Africa, Western-Latin-America,
	// Eastern-Latin-America and Northern-Latin-America.
	// The remote area ID.
	// +kubebuilder:validation:Optional
	RemoteAreaID *string `json:"remoteAreaId,omitempty" tf:"remote_area_id,omitempty"`

	// ID of the resource that the bandwidth package is bound to.
	// ID of the resource that the bandwidth package is bound to.
	// +kubebuilder:validation:Optional
	ResourceID *string `json:"resourceId,omitempty" tf:"resource_id,omitempty"`

	// Type of the resource that the bandwidth package is bound to.
	// Valid value is cloud_connection.
	// Type of the resource that the bandwidth package is bound to.
	// +kubebuilder:validation:Optional
	ResourceType *string `json:"resourceType,omitempty" tf:"resource_type,omitempty"`

	// Specification code of the bandwidth package.
	// Changing this parameter will create a new resource.
	// If the value of interflow_mode is Area, the values are as follows:
	// Specification code of the bandwidth package.
	// +kubebuilder:validation:Optional
	SpecCode *string `json:"specCode,omitempty" tf:"spec_code,omitempty"`

	// The key/value pairs to associate with the bandwidth package.
	// The key/value pairs to associate with the bandwidth package.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

// BandwidthPackageSpec defines the desired state of BandwidthPackage
type BandwidthPackageSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     BandwidthPackageParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider BandwidthPackageInitParameters `json:"initProvider,omitempty"`
}

// BandwidthPackageStatus defines the observed state of BandwidthPackage.
type BandwidthPackageStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        BandwidthPackageObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// BandwidthPackage is the Schema for the BandwidthPackages API. ""
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,huaweicloud}
type BandwidthPackage struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.bandwidth) || (has(self.initProvider) && has(self.initProvider.bandwidth))",message="spec.forProvider.bandwidth is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.billingMode) || (has(self.initProvider) && has(self.initProvider.billingMode))",message="spec.forProvider.billingMode is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.chargeMode) || (has(self.initProvider) && has(self.initProvider.chargeMode))",message="spec.forProvider.chargeMode is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.localAreaId) || (has(self.initProvider) && has(self.initProvider.localAreaId))",message="spec.forProvider.localAreaId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.remoteAreaId) || (has(self.initProvider) && has(self.initProvider.remoteAreaId))",message="spec.forProvider.remoteAreaId is a required parameter"
	Spec   BandwidthPackageSpec   `json:"spec"`
	Status BandwidthPackageStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// BandwidthPackageList contains a list of BandwidthPackages
type BandwidthPackageList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []BandwidthPackage `json:"items"`
}

// Repository type metadata.
var (
	BandwidthPackage_Kind             = "BandwidthPackage"
	BandwidthPackage_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: BandwidthPackage_Kind}.String()
	BandwidthPackage_KindAPIVersion   = BandwidthPackage_Kind + "." + CRDGroupVersion.String()
	BandwidthPackage_GroupVersionKind = CRDGroupVersion.WithKind(BandwidthPackage_Kind)
)

func init() {
	SchemeBuilder.Register(&BandwidthPackage{}, &BandwidthPackageList{})
}
