// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by angryjet. DO NOT EDIT.

package v1alpha1

import (
	"context"
	reference "github.com/crossplane/crossplane-runtime/pkg/reference"
	resource "github.com/crossplane/upjet/pkg/resource"
	errors "github.com/pkg/errors"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// ResolveReferences of this CentralNetworkAttachment.
func (mg *CentralNetworkAttachment) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.CentralNetworkID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.CentralNetworkIDRef,
		Selector:     mg.Spec.ForProvider.CentralNetworkIDSelector,
		To: reference.To{
			List:    &CentralNetworkList{},
			Managed: &CentralNetwork{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.CentralNetworkID")
	}
	mg.Spec.ForProvider.CentralNetworkID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.CentralNetworkIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.CentralNetworkID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.InitProvider.CentralNetworkIDRef,
		Selector:     mg.Spec.InitProvider.CentralNetworkIDSelector,
		To: reference.To{
			List:    &CentralNetworkList{},
			Managed: &CentralNetwork{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.CentralNetworkID")
	}
	mg.Spec.InitProvider.CentralNetworkID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.CentralNetworkIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this CentralNetworkConnectionBandwidthAssociate.
func (mg *CentralNetworkConnectionBandwidthAssociate) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.CentralNetworkID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.CentralNetworkIDRef,
		Selector:     mg.Spec.ForProvider.CentralNetworkIDSelector,
		To: reference.To{
			List:    &CentralNetworkList{},
			Managed: &CentralNetwork{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.CentralNetworkID")
	}
	mg.Spec.ForProvider.CentralNetworkID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.CentralNetworkIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ConnectionID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.ConnectionIDRef,
		Selector:     mg.Spec.ForProvider.ConnectionIDSelector,
		To: reference.To{
			List:    &ConnectionList{},
			Managed: &Connection{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ConnectionID")
	}
	mg.Spec.ForProvider.ConnectionID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ConnectionIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.GlobalConnectionBandwidthID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.GlobalConnectionBandwidthIDRef,
		Selector:     mg.Spec.ForProvider.GlobalConnectionBandwidthIDSelector,
		To: reference.To{
			List:    &GlobalConnectionBandwidthList{},
			Managed: &GlobalConnectionBandwidth{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.GlobalConnectionBandwidthID")
	}
	mg.Spec.ForProvider.GlobalConnectionBandwidthID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.GlobalConnectionBandwidthIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.CentralNetworkID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.InitProvider.CentralNetworkIDRef,
		Selector:     mg.Spec.InitProvider.CentralNetworkIDSelector,
		To: reference.To{
			List:    &CentralNetworkList{},
			Managed: &CentralNetwork{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.CentralNetworkID")
	}
	mg.Spec.InitProvider.CentralNetworkID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.CentralNetworkIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ConnectionID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.InitProvider.ConnectionIDRef,
		Selector:     mg.Spec.InitProvider.ConnectionIDSelector,
		To: reference.To{
			List:    &ConnectionList{},
			Managed: &Connection{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.ConnectionID")
	}
	mg.Spec.InitProvider.ConnectionID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.ConnectionIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.GlobalConnectionBandwidthID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.InitProvider.GlobalConnectionBandwidthIDRef,
		Selector:     mg.Spec.InitProvider.GlobalConnectionBandwidthIDSelector,
		To: reference.To{
			List:    &GlobalConnectionBandwidthList{},
			Managed: &GlobalConnectionBandwidth{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.GlobalConnectionBandwidthID")
	}
	mg.Spec.InitProvider.GlobalConnectionBandwidthID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.GlobalConnectionBandwidthIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this CentralNetworkPolicy.
func (mg *CentralNetworkPolicy) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.CentralNetworkID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.CentralNetworkIDRef,
		Selector:     mg.Spec.ForProvider.CentralNetworkIDSelector,
		To: reference.To{
			List:    &CentralNetworkList{},
			Managed: &CentralNetwork{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.CentralNetworkID")
	}
	mg.Spec.ForProvider.CentralNetworkID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.CentralNetworkIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.CentralNetworkID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.InitProvider.CentralNetworkIDRef,
		Selector:     mg.Spec.InitProvider.CentralNetworkIDSelector,
		To: reference.To{
			List:    &CentralNetworkList{},
			Managed: &CentralNetwork{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.CentralNetworkID")
	}
	mg.Spec.InitProvider.CentralNetworkID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.CentralNetworkIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this CentralNetworkPolicyApply.
func (mg *CentralNetworkPolicyApply) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.CentralNetworkID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.CentralNetworkIDRef,
		Selector:     mg.Spec.ForProvider.CentralNetworkIDSelector,
		To: reference.To{
			List:    &CentralNetworkList{},
			Managed: &CentralNetwork{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.CentralNetworkID")
	}
	mg.Spec.ForProvider.CentralNetworkID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.CentralNetworkIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.PolicyID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.PolicyIDRef,
		Selector:     mg.Spec.ForProvider.PolicyIDSelector,
		To: reference.To{
			List:    &CentralNetworkPolicyList{},
			Managed: &CentralNetworkPolicy{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.PolicyID")
	}
	mg.Spec.ForProvider.PolicyID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.PolicyIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.CentralNetworkID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.InitProvider.CentralNetworkIDRef,
		Selector:     mg.Spec.InitProvider.CentralNetworkIDSelector,
		To: reference.To{
			List:    &CentralNetworkList{},
			Managed: &CentralNetwork{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.CentralNetworkID")
	}
	mg.Spec.InitProvider.CentralNetworkID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.CentralNetworkIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.PolicyID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.InitProvider.PolicyIDRef,
		Selector:     mg.Spec.InitProvider.PolicyIDSelector,
		To: reference.To{
			List:    &CentralNetworkPolicyList{},
			Managed: &CentralNetworkPolicy{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.PolicyID")
	}
	mg.Spec.InitProvider.PolicyID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.PolicyIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this GlobalConnectionBandwidthAssociate.
func (mg *GlobalConnectionBandwidthAssociate) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.GcbID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.GcbIDRef,
		Selector:     mg.Spec.ForProvider.GcbIDSelector,
		To: reference.To{
			List:    &GlobalConnectionBandwidthList{},
			Managed: &GlobalConnectionBandwidth{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.GcbID")
	}
	mg.Spec.ForProvider.GcbID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.GcbIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.GcbID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.InitProvider.GcbIDRef,
		Selector:     mg.Spec.InitProvider.GcbIDSelector,
		To: reference.To{
			List:    &GlobalConnectionBandwidthList{},
			Managed: &GlobalConnectionBandwidth{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.GcbID")
	}
	mg.Spec.InitProvider.GcbID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.GcbIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this InterRegionBandwidth.
func (mg *InterRegionBandwidth) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.BandwidthPackageID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.BandwidthPackageIDRef,
		Selector:     mg.Spec.ForProvider.BandwidthPackageIDSelector,
		To: reference.To{
			List:    &BandwidthPackageList{},
			Managed: &BandwidthPackage{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.BandwidthPackageID")
	}
	mg.Spec.ForProvider.BandwidthPackageID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.BandwidthPackageIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.BandwidthPackageID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.InitProvider.BandwidthPackageIDRef,
		Selector:     mg.Spec.InitProvider.BandwidthPackageIDSelector,
		To: reference.To{
			List:    &BandwidthPackageList{},
			Managed: &BandwidthPackage{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.BandwidthPackageID")
	}
	mg.Spec.InitProvider.BandwidthPackageID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.BandwidthPackageIDRef = rsp.ResolvedReference

	return nil
}
