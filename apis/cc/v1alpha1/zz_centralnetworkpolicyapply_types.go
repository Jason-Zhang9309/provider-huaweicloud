// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type CentralNetworkPolicyApplyInitParameters struct {

	// Central network ID.
	// Central network ID.
	// +crossplane:generate:reference:type=github.com/huaweicloud/provider-huaweicloud/apis/cc/v1alpha1.CentralNetwork
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	CentralNetworkID *string `json:"centralNetworkId,omitempty" tf:"central_network_id,omitempty"`

	// Reference to a CentralNetwork in cc to populate centralNetworkId.
	// +kubebuilder:validation:Optional
	CentralNetworkIDRef *v1.Reference `json:"centralNetworkIdRef,omitempty" tf:"-"`

	// Selector for a CentralNetwork in cc to populate centralNetworkId.
	// +kubebuilder:validation:Optional
	CentralNetworkIDSelector *v1.Selector `json:"centralNetworkIdSelector,omitempty" tf:"-"`

	// Policy ID.
	// Policy ID.
	// +crossplane:generate:reference:type=github.com/huaweicloud/provider-huaweicloud/apis/cc/v1alpha1.CentralNetworkPolicy
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	PolicyID *string `json:"policyId,omitempty" tf:"policy_id,omitempty"`

	// Reference to a CentralNetworkPolicy in cc to populate policyId.
	// +kubebuilder:validation:Optional
	PolicyIDRef *v1.Reference `json:"policyIdRef,omitempty" tf:"-"`

	// Selector for a CentralNetworkPolicy in cc to populate policyId.
	// +kubebuilder:validation:Optional
	PolicyIDSelector *v1.Selector `json:"policyIdSelector,omitempty" tf:"-"`

	// Specifies the region in which to create the resource.
	// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`
}

type CentralNetworkPolicyApplyObservation struct {

	// Central network ID.
	// Central network ID.
	CentralNetworkID *string `json:"centralNetworkId,omitempty" tf:"central_network_id,omitempty"`

	// The resource ID which equals the central_network_id.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Policy ID.
	// Policy ID.
	PolicyID *string `json:"policyId,omitempty" tf:"policy_id,omitempty"`

	// Specifies the region in which to create the resource.
	// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`
}

type CentralNetworkPolicyApplyParameters struct {

	// Central network ID.
	// Central network ID.
	// +crossplane:generate:reference:type=github.com/huaweicloud/provider-huaweicloud/apis/cc/v1alpha1.CentralNetwork
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	CentralNetworkID *string `json:"centralNetworkId,omitempty" tf:"central_network_id,omitempty"`

	// Reference to a CentralNetwork in cc to populate centralNetworkId.
	// +kubebuilder:validation:Optional
	CentralNetworkIDRef *v1.Reference `json:"centralNetworkIdRef,omitempty" tf:"-"`

	// Selector for a CentralNetwork in cc to populate centralNetworkId.
	// +kubebuilder:validation:Optional
	CentralNetworkIDSelector *v1.Selector `json:"centralNetworkIdSelector,omitempty" tf:"-"`

	// Policy ID.
	// Policy ID.
	// +crossplane:generate:reference:type=github.com/huaweicloud/provider-huaweicloud/apis/cc/v1alpha1.CentralNetworkPolicy
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	PolicyID *string `json:"policyId,omitempty" tf:"policy_id,omitempty"`

	// Reference to a CentralNetworkPolicy in cc to populate policyId.
	// +kubebuilder:validation:Optional
	PolicyIDRef *v1.Reference `json:"policyIdRef,omitempty" tf:"-"`

	// Selector for a CentralNetworkPolicy in cc to populate policyId.
	// +kubebuilder:validation:Optional
	PolicyIDSelector *v1.Selector `json:"policyIdSelector,omitempty" tf:"-"`

	// Specifies the region in which to create the resource.
	// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`
}

// CentralNetworkPolicyApplySpec defines the desired state of CentralNetworkPolicyApply
type CentralNetworkPolicyApplySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     CentralNetworkPolicyApplyParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider CentralNetworkPolicyApplyInitParameters `json:"initProvider,omitempty"`
}

// CentralNetworkPolicyApplyStatus defines the observed state of CentralNetworkPolicyApply.
type CentralNetworkPolicyApplyStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        CentralNetworkPolicyApplyObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// CentralNetworkPolicyApply is the Schema for the CentralNetworkPolicyApplys API. ""
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,huaweicloud}
type CentralNetworkPolicyApply struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              CentralNetworkPolicyApplySpec   `json:"spec"`
	Status            CentralNetworkPolicyApplyStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// CentralNetworkPolicyApplyList contains a list of CentralNetworkPolicyApplys
type CentralNetworkPolicyApplyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []CentralNetworkPolicyApply `json:"items"`
}

// Repository type metadata.
var (
	CentralNetworkPolicyApply_Kind             = "CentralNetworkPolicyApply"
	CentralNetworkPolicyApply_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: CentralNetworkPolicyApply_Kind}.String()
	CentralNetworkPolicyApply_KindAPIVersion   = CentralNetworkPolicyApply_Kind + "." + CRDGroupVersion.String()
	CentralNetworkPolicyApply_GroupVersionKind = CRDGroupVersion.WithKind(CentralNetworkPolicyApply_Kind)
)

func init() {
	SchemeBuilder.Register(&CentralNetworkPolicyApply{}, &CentralNetworkPolicyApplyList{})
}
