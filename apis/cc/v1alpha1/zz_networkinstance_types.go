// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type NetworkInstanceInitParameters struct {

	// List of routes advertised by the VPC or virtual gateway.
	// List of routes advertised by the VPC or virtual gateway.
	Cidrs []*string `json:"cidrs,omitempty" tf:"cidrs,omitempty"`

	// Cloud connection ID.
	// Cloud connection ID.
	CloudConnectionID *string `json:"cloudConnectionId,omitempty" tf:"cloud_connection_id,omitempty"`

	// The description about the network instance.
	// The description contain a maximum of 255 characters, and the angle brackets (< and >) are not allowed.
	// The description about the network instance.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Account ID of the VPC or virtual gateway.
	// Account ID of the VPC or virtual gateway.
	InstanceDomainID *string `json:"instanceDomainId,omitempty" tf:"instance_domain_id,omitempty"`

	// ID of the VPC or virtual gateway to be loaded to the cloud connection.
	// ID of the VPC or virtual gateway to be loaded to the cloud connection.
	InstanceID *string `json:"instanceId,omitempty" tf:"instance_id,omitempty"`

	// The network instance name.
	// The name can contain 1 to 64 characters, only English letters, Chinese characters, digits, hyphens (-),
	// underscores (_) and dots (.).
	// The network instance name.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Project ID of the VPC or virtual gateway.
	// Project ID of the VPC or virtual gateway.
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// Specifies the region in which to create the resource.
	// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Region ID of the VPC or virtual gateway.
	// Region ID of the VPC or virtual gateway.
	RegionID *string `json:"regionId,omitempty" tf:"region_id,omitempty"`

	// Type of the network instance to be loaded to the cloud connection.
	// The options are as follows:
	// Type of the network instance to be loaded to the cloud connection.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type NetworkInstanceObservation struct {

	// List of routes advertised by the VPC or virtual gateway.
	// List of routes advertised by the VPC or virtual gateway.
	Cidrs []*string `json:"cidrs,omitempty" tf:"cidrs,omitempty"`

	// Cloud connection ID.
	// Cloud connection ID.
	CloudConnectionID *string `json:"cloudConnectionId,omitempty" tf:"cloud_connection_id,omitempty"`

	// The description about the network instance.
	// The description contain a maximum of 255 characters, and the angle brackets (< and >) are not allowed.
	// The description about the network instance.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Account ID.
	// Account ID.
	DomainID *string `json:"domainId,omitempty" tf:"domain_id,omitempty"`

	// The resource ID.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Account ID of the VPC or virtual gateway.
	// Account ID of the VPC or virtual gateway.
	InstanceDomainID *string `json:"instanceDomainId,omitempty" tf:"instance_domain_id,omitempty"`

	// ID of the VPC or virtual gateway to be loaded to the cloud connection.
	// ID of the VPC or virtual gateway to be loaded to the cloud connection.
	InstanceID *string `json:"instanceId,omitempty" tf:"instance_id,omitempty"`

	// The network instance name.
	// The name can contain 1 to 64 characters, only English letters, Chinese characters, digits, hyphens (-),
	// underscores (_) and dots (.).
	// The network instance name.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Project ID of the VPC or virtual gateway.
	// Project ID of the VPC or virtual gateway.
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// Specifies the region in which to create the resource.
	// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Region ID of the VPC or virtual gateway.
	// Region ID of the VPC or virtual gateway.
	RegionID *string `json:"regionId,omitempty" tf:"region_id,omitempty"`

	// Network instance status.
	// The options are as follows:
	// Network instance status.
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// Type of the network instance to be loaded to the cloud connection.
	// The options are as follows:
	// Type of the network instance to be loaded to the cloud connection.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type NetworkInstanceParameters struct {

	// List of routes advertised by the VPC or virtual gateway.
	// List of routes advertised by the VPC or virtual gateway.
	// +kubebuilder:validation:Optional
	Cidrs []*string `json:"cidrs,omitempty" tf:"cidrs,omitempty"`

	// Cloud connection ID.
	// Cloud connection ID.
	// +kubebuilder:validation:Optional
	CloudConnectionID *string `json:"cloudConnectionId,omitempty" tf:"cloud_connection_id,omitempty"`

	// The description about the network instance.
	// The description contain a maximum of 255 characters, and the angle brackets (< and >) are not allowed.
	// The description about the network instance.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Account ID of the VPC or virtual gateway.
	// Account ID of the VPC or virtual gateway.
	// +kubebuilder:validation:Optional
	InstanceDomainID *string `json:"instanceDomainId,omitempty" tf:"instance_domain_id,omitempty"`

	// ID of the VPC or virtual gateway to be loaded to the cloud connection.
	// ID of the VPC or virtual gateway to be loaded to the cloud connection.
	// +kubebuilder:validation:Optional
	InstanceID *string `json:"instanceId,omitempty" tf:"instance_id,omitempty"`

	// The network instance name.
	// The name can contain 1 to 64 characters, only English letters, Chinese characters, digits, hyphens (-),
	// underscores (_) and dots (.).
	// The network instance name.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Project ID of the VPC or virtual gateway.
	// Project ID of the VPC or virtual gateway.
	// +kubebuilder:validation:Optional
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// Specifies the region in which to create the resource.
	// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Region ID of the VPC or virtual gateway.
	// Region ID of the VPC or virtual gateway.
	// +kubebuilder:validation:Optional
	RegionID *string `json:"regionId,omitempty" tf:"region_id,omitempty"`

	// Type of the network instance to be loaded to the cloud connection.
	// The options are as follows:
	// Type of the network instance to be loaded to the cloud connection.
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

// NetworkInstanceSpec defines the desired state of NetworkInstance
type NetworkInstanceSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     NetworkInstanceParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider NetworkInstanceInitParameters `json:"initProvider,omitempty"`
}

// NetworkInstanceStatus defines the observed state of NetworkInstance.
type NetworkInstanceStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        NetworkInstanceObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// NetworkInstance is the Schema for the NetworkInstances API. ""
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,huaweicloud}
type NetworkInstance struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.cidrs) || (has(self.initProvider) && has(self.initProvider.cidrs))",message="spec.forProvider.cidrs is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.cloudConnectionId) || (has(self.initProvider) && has(self.initProvider.cloudConnectionId))",message="spec.forProvider.cloudConnectionId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.instanceId) || (has(self.initProvider) && has(self.initProvider.instanceId))",message="spec.forProvider.instanceId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.projectId) || (has(self.initProvider) && has(self.initProvider.projectId))",message="spec.forProvider.projectId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.regionId) || (has(self.initProvider) && has(self.initProvider.regionId))",message="spec.forProvider.regionId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.type) || (has(self.initProvider) && has(self.initProvider.type))",message="spec.forProvider.type is a required parameter"
	Spec   NetworkInstanceSpec   `json:"spec"`
	Status NetworkInstanceStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// NetworkInstanceList contains a list of NetworkInstances
type NetworkInstanceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []NetworkInstance `json:"items"`
}

// Repository type metadata.
var (
	NetworkInstance_Kind             = "NetworkInstance"
	NetworkInstance_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: NetworkInstance_Kind}.String()
	NetworkInstance_KindAPIVersion   = NetworkInstance_Kind + "." + CRDGroupVersion.String()
	NetworkInstance_GroupVersionKind = CRDGroupVersion.WithKind(NetworkInstance_Kind)
)

func init() {
	SchemeBuilder.Register(&NetworkInstance{}, &NetworkInstanceList{})
}
