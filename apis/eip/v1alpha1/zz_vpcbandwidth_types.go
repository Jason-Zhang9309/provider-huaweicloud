// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type PublicipsInitParameters struct {
}

type PublicipsObservation struct {

	// ID of the Shared Bandwidth.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The IPv4 or IPv6 address.
	IPAddress *string `json:"ipAddress,omitempty" tf:"ip_address,omitempty"`

	// The IP version, either 4 or 6.
	IPVersion *float64 `json:"ipVersion,omitempty" tf:"ip_version,omitempty"`

	// The EIP type. Possible values are 5_bgp (dynamic BGP) and 5_sbgp (static BGP).
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type PublicipsParameters struct {
}

type VpcBandwidthInitParameters struct {

	// Specifies whether auto renew is enabled.
	// Valid values are true and false. Defaults to false.
	AutoRenew *string `json:"autoRenew,omitempty" tf:"auto_renew,omitempty"`

	// Specifies the bandwidth type.
	// Valid values are share and edgeshare. Default is share.
	BandwidthType *string `json:"bandwidthType,omitempty" tf:"bandwidth_type,omitempty"`

	// Specifies whether the billing is based on bandwidth or
	// 95th percentile bandwidth (enhanced). Possible values can be bandwidth and 95peak_plus.
	// The default value is bandwidth, and 95peak_plus is only valid for v4 and v5 Customer.
	ChargeMode *string `json:"chargeMode,omitempty" tf:"charge_mode,omitempty"`

	// Specifies the charging mode of the Shared Bandwidth.
	// The valid values are prePaid and postPaid, defaults to postPaid.
	ChargingMode *string `json:"chargingMode,omitempty" tf:"charging_mode,omitempty"`

	// Specifies the enterprise project id of the Shared Bandwidth.
	// Changing this creates a new bandwidth.
	EnterpriseProjectID *string `json:"enterpriseProjectId,omitempty" tf:"enterprise_project_id,omitempty"`

	// Specifies the bandwidth name. The value is a string of 1 to 64 characters that
	// can contain letters, digits, underscores (_), hyphens (-), and periods (.).
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Specifies the charging period of the Shared Bandwidth.
	Period *float64 `json:"period,omitempty" tf:"period,omitempty"`

	// Specifies the charging period unit of the Shared Bandwidth.
	// Valid values are month and year. This parameter is mandatory if charging_mode is set to prePaid.
	PeriodUnit *string `json:"periodUnit,omitempty" tf:"period_unit,omitempty"`

	// Specifies the site is center of border.
	// Valid values are center and the name of the border site. Default is center.
	PublicBorderGroup *string `json:"publicBorderGroup,omitempty" tf:"public_border_group,omitempty"`

	// Specifies the region in which to create the Shared Bandwidth.
	// If omitted, the provider-level region will be used. Changing this creates a new bandwidth.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Specifies the size of the Shared Bandwidth.
	// If charge_mode is bandwidth, the value ranges from 5 Mbit/s to 2000 Mbit/s.
	// If charge_mode is 95peak_plus, the value ranges from 300 Mbit/s to 2000 Mbit/s.
	Size *float64 `json:"size,omitempty" tf:"size,omitempty"`
}

type VpcBandwidthObservation struct {

	// Specifies whether auto renew is enabled.
	// Valid values are true and false. Defaults to false.
	AutoRenew *string `json:"autoRenew,omitempty" tf:"auto_renew,omitempty"`

	// Specifies the bandwidth type.
	// Valid values are share and edgeshare. Default is share.
	BandwidthType *string `json:"bandwidthType,omitempty" tf:"bandwidth_type,omitempty"`

	// Specifies whether the billing is based on bandwidth or
	// 95th percentile bandwidth (enhanced). Possible values can be bandwidth and 95peak_plus.
	// The default value is bandwidth, and 95peak_plus is only valid for v4 and v5 Customer.
	ChargeMode *string `json:"chargeMode,omitempty" tf:"charge_mode,omitempty"`

	// Specifies the charging mode of the Shared Bandwidth.
	// The valid values are prePaid and postPaid, defaults to postPaid.
	ChargingMode *string `json:"chargingMode,omitempty" tf:"charging_mode,omitempty"`

	// Indicates the bandwidth create time.
	CreatedAt *string `json:"createdAt,omitempty" tf:"created_at,omitempty"`

	// Specifies the enterprise project id of the Shared Bandwidth.
	// Changing this creates a new bandwidth.
	EnterpriseProjectID *string `json:"enterpriseProjectId,omitempty" tf:"enterprise_project_id,omitempty"`

	// ID of the Shared Bandwidth.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Specifies the bandwidth name. The value is a string of 1 to 64 characters that
	// can contain letters, digits, underscores (_), hyphens (-), and periods (.).
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Specifies the charging period of the Shared Bandwidth.
	Period *float64 `json:"period,omitempty" tf:"period,omitempty"`

	// Specifies the charging period unit of the Shared Bandwidth.
	// Valid values are month and year. This parameter is mandatory if charging_mode is set to prePaid.
	PeriodUnit *string `json:"periodUnit,omitempty" tf:"period_unit,omitempty"`

	// Specifies the site is center of border.
	// Valid values are center and the name of the border site. Default is center.
	PublicBorderGroup *string `json:"publicBorderGroup,omitempty" tf:"public_border_group,omitempty"`

	// An array of EIPs that use the bandwidth. The object includes the following:
	Publicips []PublicipsObservation `json:"publicips,omitempty" tf:"publicips,omitempty"`

	// Specifies the region in which to create the Shared Bandwidth.
	// If omitted, the provider-level region will be used. Changing this creates a new bandwidth.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Indicates whether the bandwidth is shared or dedicated.
	ShareType *string `json:"shareType,omitempty" tf:"share_type,omitempty"`

	// Specifies the size of the Shared Bandwidth.
	// If charge_mode is bandwidth, the value ranges from 5 Mbit/s to 2000 Mbit/s.
	// If charge_mode is 95peak_plus, the value ranges from 300 Mbit/s to 2000 Mbit/s.
	Size *float64 `json:"size,omitempty" tf:"size,omitempty"`

	// Indicates the bandwidth status.
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// Indicates the bandwidth update time.
	UpdatedAt *string `json:"updatedAt,omitempty" tf:"updated_at,omitempty"`
}

type VpcBandwidthParameters struct {

	// Specifies whether auto renew is enabled.
	// Valid values are true and false. Defaults to false.
	// +kubebuilder:validation:Optional
	AutoRenew *string `json:"autoRenew,omitempty" tf:"auto_renew,omitempty"`

	// Specifies the bandwidth type.
	// Valid values are share and edgeshare. Default is share.
	// +kubebuilder:validation:Optional
	BandwidthType *string `json:"bandwidthType,omitempty" tf:"bandwidth_type,omitempty"`

	// Specifies whether the billing is based on bandwidth or
	// 95th percentile bandwidth (enhanced). Possible values can be bandwidth and 95peak_plus.
	// The default value is bandwidth, and 95peak_plus is only valid for v4 and v5 Customer.
	// +kubebuilder:validation:Optional
	ChargeMode *string `json:"chargeMode,omitempty" tf:"charge_mode,omitempty"`

	// Specifies the charging mode of the Shared Bandwidth.
	// The valid values are prePaid and postPaid, defaults to postPaid.
	// +kubebuilder:validation:Optional
	ChargingMode *string `json:"chargingMode,omitempty" tf:"charging_mode,omitempty"`

	// Specifies the enterprise project id of the Shared Bandwidth.
	// Changing this creates a new bandwidth.
	// +kubebuilder:validation:Optional
	EnterpriseProjectID *string `json:"enterpriseProjectId,omitempty" tf:"enterprise_project_id,omitempty"`

	// Specifies the bandwidth name. The value is a string of 1 to 64 characters that
	// can contain letters, digits, underscores (_), hyphens (-), and periods (.).
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Specifies the charging period of the Shared Bandwidth.
	// +kubebuilder:validation:Optional
	Period *float64 `json:"period,omitempty" tf:"period,omitempty"`

	// Specifies the charging period unit of the Shared Bandwidth.
	// Valid values are month and year. This parameter is mandatory if charging_mode is set to prePaid.
	// +kubebuilder:validation:Optional
	PeriodUnit *string `json:"periodUnit,omitempty" tf:"period_unit,omitempty"`

	// Specifies the site is center of border.
	// Valid values are center and the name of the border site. Default is center.
	// +kubebuilder:validation:Optional
	PublicBorderGroup *string `json:"publicBorderGroup,omitempty" tf:"public_border_group,omitempty"`

	// Specifies the region in which to create the Shared Bandwidth.
	// If omitted, the provider-level region will be used. Changing this creates a new bandwidth.
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Specifies the size of the Shared Bandwidth.
	// If charge_mode is bandwidth, the value ranges from 5 Mbit/s to 2000 Mbit/s.
	// If charge_mode is 95peak_plus, the value ranges from 300 Mbit/s to 2000 Mbit/s.
	// +kubebuilder:validation:Optional
	Size *float64 `json:"size,omitempty" tf:"size,omitempty"`
}

// VpcBandwidthSpec defines the desired state of VpcBandwidth
type VpcBandwidthSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     VpcBandwidthParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider VpcBandwidthInitParameters `json:"initProvider,omitempty"`
}

// VpcBandwidthStatus defines the observed state of VpcBandwidth.
type VpcBandwidthStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        VpcBandwidthObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// VpcBandwidth is the Schema for the VpcBandwidths API. ""
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,huaweicloud}
type VpcBandwidth struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.size) || (has(self.initProvider) && has(self.initProvider.size))",message="spec.forProvider.size is a required parameter"
	Spec   VpcBandwidthSpec   `json:"spec"`
	Status VpcBandwidthStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// VpcBandwidthList contains a list of VpcBandwidths
type VpcBandwidthList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []VpcBandwidth `json:"items"`
}

// Repository type metadata.
var (
	VpcBandwidth_Kind             = "VpcBandwidth"
	VpcBandwidth_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: VpcBandwidth_Kind}.String()
	VpcBandwidth_KindAPIVersion   = VpcBandwidth_Kind + "." + CRDGroupVersion.String()
	VpcBandwidth_GroupVersionKind = CRDGroupVersion.WithKind(VpcBandwidth_Kind)
)

func init() {
	SchemeBuilder.Register(&VpcBandwidth{}, &VpcBandwidthList{})
}
