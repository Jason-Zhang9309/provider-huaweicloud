// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type BandwidthInitParameters struct {

	// Specifies whether the bandwidth is billed by traffic or by bandwidth
	// size. The value can be traffic or bandwidth. If the charging_mode is prePaid, only bandwidth is valid.
	// Whether the bandwidth is billed by traffic or by bandwidth size.
	ChargeMode *string `json:"chargeMode,omitempty" tf:"charge_mode,omitempty"`

	// The shared bandwidth ID.
	// This parameter is mandatory when share_type is set to WHOLE. Changing this will create a new resource.
	// The shared bandwidth ID.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Specifies the bandwidth name.
	// The name can contain 1 to 64 characters, including letters, digits, underscores (_), hyphens (-), and periods (.).
	// This parameter is mandatory when share_type is set to PER.
	// The dedicated bandwidth name.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Specifies whether the bandwidth is dedicated or shared.
	// Changing this will create a new resource. Possible values are as follows:
	// Whether the bandwidth is dedicated or shared.
	ShareType *string `json:"shareType,omitempty" tf:"share_type,omitempty"`

	// The bandwidth size.
	// The value ranges from 1 to 300 Mbit/s. This parameter is mandatory when share_type is set to PER.
	// The dedicated bandwidth size.
	Size *float64 `json:"size,omitempty" tf:"size,omitempty"`
}

type BandwidthObservation struct {

	// Specifies whether the bandwidth is billed by traffic or by bandwidth
	// size. The value can be traffic or bandwidth. If the charging_mode is prePaid, only bandwidth is valid.
	// Whether the bandwidth is billed by traffic or by bandwidth size.
	ChargeMode *string `json:"chargeMode,omitempty" tf:"charge_mode,omitempty"`

	// The shared bandwidth ID.
	// This parameter is mandatory when share_type is set to WHOLE. Changing this will create a new resource.
	// The shared bandwidth ID.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Specifies the bandwidth name.
	// The name can contain 1 to 64 characters, including letters, digits, underscores (_), hyphens (-), and periods (.).
	// This parameter is mandatory when share_type is set to PER.
	// The dedicated bandwidth name.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Specifies whether the bandwidth is dedicated or shared.
	// Changing this will create a new resource. Possible values are as follows:
	// Whether the bandwidth is dedicated or shared.
	ShareType *string `json:"shareType,omitempty" tf:"share_type,omitempty"`

	// The bandwidth size.
	// The value ranges from 1 to 300 Mbit/s. This parameter is mandatory when share_type is set to PER.
	// The dedicated bandwidth size.
	Size *float64 `json:"size,omitempty" tf:"size,omitempty"`
}

type BandwidthParameters struct {

	// Specifies whether the bandwidth is billed by traffic or by bandwidth
	// size. The value can be traffic or bandwidth. If the charging_mode is prePaid, only bandwidth is valid.
	// Whether the bandwidth is billed by traffic or by bandwidth size.
	// +kubebuilder:validation:Optional
	ChargeMode *string `json:"chargeMode,omitempty" tf:"charge_mode,omitempty"`

	// The shared bandwidth ID.
	// This parameter is mandatory when share_type is set to WHOLE. Changing this will create a new resource.
	// The shared bandwidth ID.
	// +kubebuilder:validation:Optional
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Specifies the bandwidth name.
	// The name can contain 1 to 64 characters, including letters, digits, underscores (_), hyphens (-), and periods (.).
	// This parameter is mandatory when share_type is set to PER.
	// The dedicated bandwidth name.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Specifies whether the bandwidth is dedicated or shared.
	// Changing this will create a new resource. Possible values are as follows:
	// Whether the bandwidth is dedicated or shared.
	// +kubebuilder:validation:Optional
	ShareType *string `json:"shareType" tf:"share_type,omitempty"`

	// The bandwidth size.
	// The value ranges from 1 to 300 Mbit/s. This parameter is mandatory when share_type is set to PER.
	// The dedicated bandwidth size.
	// +kubebuilder:validation:Optional
	Size *float64 `json:"size,omitempty" tf:"size,omitempty"`
}

type PublicipInitParameters struct {

	// Specifies the EIP address to be assigned.
	// The value must be a valid IPv4 address in the available IP address range.
	// The system automatically assigns an EIP if you do not specify it. Changing this will create a new resource.
	// The EIP address to be assigned.
	IPAddress *string `json:"ipAddress,omitempty" tf:"ip_address,omitempty"`

	// Specifies the IP version, either 4 (default) or 6.
	// The IP version.
	IPVersion *float64 `json:"ipVersion,omitempty" tf:"ip_version,omitempty"`

	// The port ID which the EIP associated with.
	// schema: Deprecated
	PortID *string `json:"portId,omitempty" tf:"port_id,omitempty"`

	// Specifies the EIP type. Possible values are 5_bgp (dynamic BGP)
	// and 5_sbgp (static BGP), the default value is 5_bgp. Changing this will create a new resource.
	// The EIP type.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type PublicipObservation struct {

	// Specifies the EIP address to be assigned.
	// The value must be a valid IPv4 address in the available IP address range.
	// The system automatically assigns an EIP if you do not specify it. Changing this will create a new resource.
	// The EIP address to be assigned.
	IPAddress *string `json:"ipAddress,omitempty" tf:"ip_address,omitempty"`

	// Specifies the IP version, either 4 (default) or 6.
	// The IP version.
	IPVersion *float64 `json:"ipVersion,omitempty" tf:"ip_version,omitempty"`

	// The port ID which the EIP associated with.
	// schema: Deprecated
	PortID *string `json:"portId,omitempty" tf:"port_id,omitempty"`

	// Specifies the EIP type. Possible values are 5_bgp (dynamic BGP)
	// and 5_sbgp (static BGP), the default value is 5_bgp. Changing this will create a new resource.
	// The EIP type.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type PublicipParameters struct {

	// Specifies the EIP address to be assigned.
	// The value must be a valid IPv4 address in the available IP address range.
	// The system automatically assigns an EIP if you do not specify it. Changing this will create a new resource.
	// The EIP address to be assigned.
	// +kubebuilder:validation:Optional
	IPAddress *string `json:"ipAddress,omitempty" tf:"ip_address,omitempty"`

	// Specifies the IP version, either 4 (default) or 6.
	// The IP version.
	// +kubebuilder:validation:Optional
	IPVersion *float64 `json:"ipVersion,omitempty" tf:"ip_version,omitempty"`

	// The port ID which the EIP associated with.
	// schema: Deprecated
	// +kubebuilder:validation:Optional
	PortID *string `json:"portId,omitempty" tf:"port_id,omitempty"`

	// Specifies the EIP type. Possible values are 5_bgp (dynamic BGP)
	// and 5_sbgp (static BGP), the default value is 5_bgp. Changing this will create a new resource.
	// The EIP type.
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type VpcEipInitParameters struct {
	AutoPay *string `json:"autoPay,omitempty" tf:"auto_pay,omitempty"`

	// Specifies whether auto renew is enabled.
	// Valid values are true and false. Defaults to false.
	AutoRenew *string `json:"autoRenew,omitempty" tf:"auto_renew,omitempty"`

	// Specifies the bandwidth configuration.
	// The object structure is documented below.
	// The bandwidth configuration.
	Bandwidth []BandwidthInitParameters `json:"bandwidth,omitempty" tf:"bandwidth,omitempty"`

	// Specifies the charging mode of the EIP.
	// The valid values are prePaid and postPaid, defaults to postPaid.
	ChargingMode *string `json:"chargingMode,omitempty" tf:"charging_mode,omitempty"`

	// Specifies the enterprise project ID to which the EIP belongs.
	// The enterprise project ID to which the EIP belongs.
	EnterpriseProjectID *string `json:"enterpriseProjectId,omitempty" tf:"enterprise_project_id,omitempty"`

	// Specifies the name of the EIP.
	// The name can contain 1 to 64 characters, including English letters, Chinese characters, digits, underscores (_),
	// hyphens (-), and periods (.).
	// The name of the EIP.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Specifies the charging period of the EIP.
	Period *float64 `json:"period,omitempty" tf:"period,omitempty"`

	// Specifies the charging period unit of the EIP.
	// Valid values are month and year. This parameter is mandatory if charging_mode is set to prePaid.
	PeriodUnit *string `json:"periodUnit,omitempty" tf:"period_unit,omitempty"`

	// Specifies the EIP configuration.
	// The object structure is documented below.
	// The EIP configuration.
	Publicip []PublicipInitParameters `json:"publicip,omitempty" tf:"publicip,omitempty"`

	// Specifies the region in which to create the EIP resource.
	// If omitted, the provider-level region will be used. Changing this will create a new resource.
	// The region in which to create the EIP resource.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Specifies the key/value pairs to associate with the EIP.
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

type VpcEipObservation struct {

	// The IPv4 address of the EIP.
	Address *string `json:"address,omitempty" tf:"address,omitempty"`

	// The associate id of EIP.
	AssociateID *string `json:"associateId,omitempty" tf:"associate_id,omitempty"`

	// The associate type of EIP. Values are PORT, NATGW, ELB, ELBV1 and VPN.
	AssociateType *string `json:"associateType,omitempty" tf:"associate_type,omitempty"`

	AutoPay *string `json:"autoPay,omitempty" tf:"auto_pay,omitempty"`

	// Specifies whether auto renew is enabled.
	// Valid values are true and false. Defaults to false.
	AutoRenew *string `json:"autoRenew,omitempty" tf:"auto_renew,omitempty"`

	// Specifies the bandwidth configuration.
	// The object structure is documented below.
	// The bandwidth configuration.
	Bandwidth []BandwidthObservation `json:"bandwidth,omitempty" tf:"bandwidth,omitempty"`

	// Specifies the charging mode of the EIP.
	// The valid values are prePaid and postPaid, defaults to postPaid.
	ChargingMode *string `json:"chargingMode,omitempty" tf:"charging_mode,omitempty"`

	// The create time of EIP.
	CreatedAt *string `json:"createdAt,omitempty" tf:"created_at,omitempty"`

	// Specifies the enterprise project ID to which the EIP belongs.
	// The enterprise project ID to which the EIP belongs.
	EnterpriseProjectID *string `json:"enterpriseProjectId,omitempty" tf:"enterprise_project_id,omitempty"`

	// The resource ID in UUID format.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The IPv6 address of the EIP.
	IPv6Address *string `json:"ipv6Address,omitempty" tf:"ipv6_address,omitempty"`

	// The instance id to which the port belongs. Return when associate_type is PORT.
	InstanceID *string `json:"instanceId,omitempty" tf:"instance_id,omitempty"`

	// The instance type to which the port belongs. Return when associate_type is PORT.
	InstanceType *string `json:"instanceType,omitempty" tf:"instance_type,omitempty"`

	// Specifies the name of the EIP.
	// The name can contain 1 to 64 characters, including English letters, Chinese characters, digits, underscores (_),
	// hyphens (-), and periods (.).
	// The name of the EIP.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Specifies the charging period of the EIP.
	Period *float64 `json:"period,omitempty" tf:"period,omitempty"`

	// Specifies the charging period unit of the EIP.
	// Valid values are month and year. This parameter is mandatory if charging_mode is set to prePaid.
	PeriodUnit *string `json:"periodUnit,omitempty" tf:"period_unit,omitempty"`

	// The port ID which the EIP associated with.
	PortID *string `json:"portId,omitempty" tf:"port_id,omitempty"`

	// The private IP address bound to the EIP.
	PrivateIP *string `json:"privateIp,omitempty" tf:"private_ip,omitempty"`

	// Specifies the EIP configuration.
	// The object structure is documented below.
	// The EIP configuration.
	Publicip []PublicipObservation `json:"publicip,omitempty" tf:"publicip,omitempty"`

	// Specifies the region in which to create the EIP resource.
	// If omitted, the provider-level region will be used. Changing this will create a new resource.
	// The region in which to create the EIP resource.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// The status of EIP.
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// Specifies the key/value pairs to associate with the EIP.
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// The update time of EIP.
	UpdatedAt *string `json:"updatedAt,omitempty" tf:"updated_at,omitempty"`
}

type VpcEipParameters struct {

	// +kubebuilder:validation:Optional
	AutoPay *string `json:"autoPay,omitempty" tf:"auto_pay,omitempty"`

	// Specifies whether auto renew is enabled.
	// Valid values are true and false. Defaults to false.
	// +kubebuilder:validation:Optional
	AutoRenew *string `json:"autoRenew,omitempty" tf:"auto_renew,omitempty"`

	// Specifies the bandwidth configuration.
	// The object structure is documented below.
	// The bandwidth configuration.
	// +kubebuilder:validation:Optional
	Bandwidth []BandwidthParameters `json:"bandwidth,omitempty" tf:"bandwidth,omitempty"`

	// Specifies the charging mode of the EIP.
	// The valid values are prePaid and postPaid, defaults to postPaid.
	// +kubebuilder:validation:Optional
	ChargingMode *string `json:"chargingMode,omitempty" tf:"charging_mode,omitempty"`

	// Specifies the enterprise project ID to which the EIP belongs.
	// The enterprise project ID to which the EIP belongs.
	// +kubebuilder:validation:Optional
	EnterpriseProjectID *string `json:"enterpriseProjectId,omitempty" tf:"enterprise_project_id,omitempty"`

	// Specifies the name of the EIP.
	// The name can contain 1 to 64 characters, including English letters, Chinese characters, digits, underscores (_),
	// hyphens (-), and periods (.).
	// The name of the EIP.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Specifies the charging period of the EIP.
	// +kubebuilder:validation:Optional
	Period *float64 `json:"period,omitempty" tf:"period,omitempty"`

	// Specifies the charging period unit of the EIP.
	// Valid values are month and year. This parameter is mandatory if charging_mode is set to prePaid.
	// +kubebuilder:validation:Optional
	PeriodUnit *string `json:"periodUnit,omitempty" tf:"period_unit,omitempty"`

	// Specifies the EIP configuration.
	// The object structure is documented below.
	// The EIP configuration.
	// +kubebuilder:validation:Optional
	Publicip []PublicipParameters `json:"publicip,omitempty" tf:"publicip,omitempty"`

	// Specifies the region in which to create the EIP resource.
	// If omitted, the provider-level region will be used. Changing this will create a new resource.
	// The region in which to create the EIP resource.
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Specifies the key/value pairs to associate with the EIP.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

// VpcEipSpec defines the desired state of VpcEip
type VpcEipSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     VpcEipParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider VpcEipInitParameters `json:"initProvider,omitempty"`
}

// VpcEipStatus defines the observed state of VpcEip.
type VpcEipStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        VpcEipObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// VpcEip is the Schema for the VpcEips API. ""
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,huaweicloud}
type VpcEip struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.bandwidth) || (has(self.initProvider) && has(self.initProvider.bandwidth))",message="spec.forProvider.bandwidth is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.publicip) || (has(self.initProvider) && has(self.initProvider.publicip))",message="spec.forProvider.publicip is a required parameter"
	Spec   VpcEipSpec   `json:"spec"`
	Status VpcEipStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// VpcEipList contains a list of VpcEips
type VpcEipList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []VpcEip `json:"items"`
}

// Repository type metadata.
var (
	VpcEip_Kind             = "VpcEip"
	VpcEip_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: VpcEip_Kind}.String()
	VpcEip_KindAPIVersion   = VpcEip_Kind + "." + CRDGroupVersion.String()
	VpcEip_GroupVersionKind = CRDGroupVersion.WithKind(VpcEip_Kind)
)

func init() {
	SchemeBuilder.Register(&VpcEip{}, &VpcEipList{})
}
