// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type PrivateDnatRuleInitParameters struct {

	// Specifies the network interface ID of the transit IP for private NAT.
	// Exactly one of backend_interface_id and backend_private_ip must be set.
	// The network interface ID of the transit IP for private NAT.
	BackendInterfaceID *string `json:"backendInterfaceId,omitempty" tf:"backend_interface_id,omitempty"`

	// Specifies the private IP address of the backend instance.
	// The private IP address of the backend instance.
	BackendPrivateIP *string `json:"backendPrivateIp,omitempty" tf:"backend_private_ip,omitempty"`

	// Specifies the description of the DNAT rule, which contain maximum of 255
	// characters, and angle brackets (< and >) are not allowed.
	// The description of the DNAT rule.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Specifies the private NAT gateway ID to which the DNAT rule belongs.
	// Changing this will create a new resource.
	// The private NAT gateway ID to which the DNAT rule belongs.
	// +crossplane:generate:reference:type=github.com/huaweicloud/provider-huaweicloud/apis/nat/v1alpha1.PrivateGateway
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	GatewayID *string `json:"gatewayId,omitempty" tf:"gateway_id,omitempty"`

	// Reference to a PrivateGateway in nat to populate gatewayId.
	// +kubebuilder:validation:Optional
	GatewayIDRef *v1.Reference `json:"gatewayIdRef,omitempty" tf:"-"`

	// Selector for a PrivateGateway in nat to populate gatewayId.
	// +kubebuilder:validation:Optional
	GatewayIDSelector *v1.Selector `json:"gatewayIdSelector,omitempty" tf:"-"`

	// Specifies the port of the backend instance.
	// The port of the backend instance.
	InternalServicePort *float64 `json:"internalServicePort,omitempty" tf:"internal_service_port,omitempty"`

	// Specifies the protocol type.
	// The valid values are tcp, udp and any. Defaults to any.
	// The protocol type.
	Protocol *string `json:"protocol,omitempty" tf:"protocol,omitempty"`

	// Specifies the region where the DNAT rule is located.
	// If omitted, the provider-level region will be used. Changing this will create a new resource.
	// The region where the DNAT rule is located.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Specifies the ID of the transit IP for private NAT.
	// The ID of the transit IP for private NAT.
	// +crossplane:generate:reference:type=github.com/huaweicloud/provider-huaweicloud/apis/nat/v1alpha1.PrivateTransitIP
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	TransitIPID *string `json:"transitIpId,omitempty" tf:"transit_ip_id,omitempty"`

	// Reference to a PrivateTransitIP in nat to populate transitIpId.
	// +kubebuilder:validation:Optional
	TransitIPIDRef *v1.Reference `json:"transitIpIdRef,omitempty" tf:"-"`

	// Selector for a PrivateTransitIP in nat to populate transitIpId.
	// +kubebuilder:validation:Optional
	TransitIPIDSelector *v1.Selector `json:"transitIpIdSelector,omitempty" tf:"-"`

	// Specifies the port of the transit IP.
	// The port of the transit IP.
	TransitServicePort *float64 `json:"transitServicePort,omitempty" tf:"transit_service_port,omitempty"`
}

type PrivateDnatRuleObservation struct {

	// Specifies the network interface ID of the transit IP for private NAT.
	// Exactly one of backend_interface_id and backend_private_ip must be set.
	// The network interface ID of the transit IP for private NAT.
	BackendInterfaceID *string `json:"backendInterfaceId,omitempty" tf:"backend_interface_id,omitempty"`

	// Specifies the private IP address of the backend instance.
	// The private IP address of the backend instance.
	BackendPrivateIP *string `json:"backendPrivateIp,omitempty" tf:"backend_private_ip,omitempty"`

	// The type of backend instance.
	// The valid values are as follows:
	// The type of backend instance.
	BackendType *string `json:"backendType,omitempty" tf:"backend_type,omitempty"`

	// The creation time of the DNAT rule.
	// The creation time of the DNAT rule.
	CreatedAt *string `json:"createdAt,omitempty" tf:"created_at,omitempty"`

	// Specifies the description of the DNAT rule, which contain maximum of 255
	// characters, and angle brackets (< and >) are not allowed.
	// The description of the DNAT rule.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The ID of the enterprise project to which the private DNAT rule belongs.
	// The ID of the enterprise project to which the private DNAT rule belongs.
	EnterpriseProjectID *string `json:"enterpriseProjectId,omitempty" tf:"enterprise_project_id,omitempty"`

	// Specifies the private NAT gateway ID to which the DNAT rule belongs.
	// Changing this will create a new resource.
	// The private NAT gateway ID to which the DNAT rule belongs.
	GatewayID *string `json:"gatewayId,omitempty" tf:"gateway_id,omitempty"`

	// The resource ID in UUID format.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Specifies the port of the backend instance.
	// The port of the backend instance.
	InternalServicePort *float64 `json:"internalServicePort,omitempty" tf:"internal_service_port,omitempty"`

	// Specifies the protocol type.
	// The valid values are tcp, udp and any. Defaults to any.
	// The protocol type.
	Protocol *string `json:"protocol,omitempty" tf:"protocol,omitempty"`

	// Specifies the region where the DNAT rule is located.
	// If omitted, the provider-level region will be used. Changing this will create a new resource.
	// The region where the DNAT rule is located.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Specifies the ID of the transit IP for private NAT.
	// The ID of the transit IP for private NAT.
	TransitIPID *string `json:"transitIpId,omitempty" tf:"transit_ip_id,omitempty"`

	// Specifies the port of the transit IP.
	// The port of the transit IP.
	TransitServicePort *float64 `json:"transitServicePort,omitempty" tf:"transit_service_port,omitempty"`

	// The latest update time of the DNAT rule.
	// The latest update time of the DNAT rule.
	UpdatedAt *string `json:"updatedAt,omitempty" tf:"updated_at,omitempty"`
}

type PrivateDnatRuleParameters struct {

	// Specifies the network interface ID of the transit IP for private NAT.
	// Exactly one of backend_interface_id and backend_private_ip must be set.
	// The network interface ID of the transit IP for private NAT.
	// +kubebuilder:validation:Optional
	BackendInterfaceID *string `json:"backendInterfaceId,omitempty" tf:"backend_interface_id,omitempty"`

	// Specifies the private IP address of the backend instance.
	// The private IP address of the backend instance.
	// +kubebuilder:validation:Optional
	BackendPrivateIP *string `json:"backendPrivateIp,omitempty" tf:"backend_private_ip,omitempty"`

	// Specifies the description of the DNAT rule, which contain maximum of 255
	// characters, and angle brackets (< and >) are not allowed.
	// The description of the DNAT rule.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Specifies the private NAT gateway ID to which the DNAT rule belongs.
	// Changing this will create a new resource.
	// The private NAT gateway ID to which the DNAT rule belongs.
	// +crossplane:generate:reference:type=github.com/huaweicloud/provider-huaweicloud/apis/nat/v1alpha1.PrivateGateway
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	GatewayID *string `json:"gatewayId,omitempty" tf:"gateway_id,omitempty"`

	// Reference to a PrivateGateway in nat to populate gatewayId.
	// +kubebuilder:validation:Optional
	GatewayIDRef *v1.Reference `json:"gatewayIdRef,omitempty" tf:"-"`

	// Selector for a PrivateGateway in nat to populate gatewayId.
	// +kubebuilder:validation:Optional
	GatewayIDSelector *v1.Selector `json:"gatewayIdSelector,omitempty" tf:"-"`

	// Specifies the port of the backend instance.
	// The port of the backend instance.
	// +kubebuilder:validation:Optional
	InternalServicePort *float64 `json:"internalServicePort,omitempty" tf:"internal_service_port,omitempty"`

	// Specifies the protocol type.
	// The valid values are tcp, udp and any. Defaults to any.
	// The protocol type.
	// +kubebuilder:validation:Optional
	Protocol *string `json:"protocol,omitempty" tf:"protocol,omitempty"`

	// Specifies the region where the DNAT rule is located.
	// If omitted, the provider-level region will be used. Changing this will create a new resource.
	// The region where the DNAT rule is located.
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Specifies the ID of the transit IP for private NAT.
	// The ID of the transit IP for private NAT.
	// +crossplane:generate:reference:type=github.com/huaweicloud/provider-huaweicloud/apis/nat/v1alpha1.PrivateTransitIP
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	TransitIPID *string `json:"transitIpId,omitempty" tf:"transit_ip_id,omitempty"`

	// Reference to a PrivateTransitIP in nat to populate transitIpId.
	// +kubebuilder:validation:Optional
	TransitIPIDRef *v1.Reference `json:"transitIpIdRef,omitempty" tf:"-"`

	// Selector for a PrivateTransitIP in nat to populate transitIpId.
	// +kubebuilder:validation:Optional
	TransitIPIDSelector *v1.Selector `json:"transitIpIdSelector,omitempty" tf:"-"`

	// Specifies the port of the transit IP.
	// The port of the transit IP.
	// +kubebuilder:validation:Optional
	TransitServicePort *float64 `json:"transitServicePort,omitempty" tf:"transit_service_port,omitempty"`
}

// PrivateDnatRuleSpec defines the desired state of PrivateDnatRule
type PrivateDnatRuleSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     PrivateDnatRuleParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider PrivateDnatRuleInitParameters `json:"initProvider,omitempty"`
}

// PrivateDnatRuleStatus defines the observed state of PrivateDnatRule.
type PrivateDnatRuleStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        PrivateDnatRuleObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// PrivateDnatRule is the Schema for the PrivateDnatRules API. ""
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,huaweicloud}
type PrivateDnatRule struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              PrivateDnatRuleSpec   `json:"spec"`
	Status            PrivateDnatRuleStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// PrivateDnatRuleList contains a list of PrivateDnatRules
type PrivateDnatRuleList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []PrivateDnatRule `json:"items"`
}

// Repository type metadata.
var (
	PrivateDnatRule_Kind             = "PrivateDnatRule"
	PrivateDnatRule_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: PrivateDnatRule_Kind}.String()
	PrivateDnatRule_KindAPIVersion   = PrivateDnatRule_Kind + "." + CRDGroupVersion.String()
	PrivateDnatRule_GroupVersionKind = CRDGroupVersion.WithKind(PrivateDnatRule_Kind)
)

func init() {
	SchemeBuilder.Register(&PrivateDnatRule{}, &PrivateDnatRuleList{})
}
