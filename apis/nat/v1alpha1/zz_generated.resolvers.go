// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by angryjet. DO NOT EDIT.

package v1alpha1

import (
	"context"
	reference "github.com/crossplane/crossplane-runtime/pkg/reference"
	resource "github.com/crossplane/upjet/pkg/resource"
	v1alpha1 "github.com/huaweicloud/provider-huaweicloud/apis/eip/v1alpha1"
	v1alpha11 "github.com/huaweicloud/provider-huaweicloud/apis/vpc/v1alpha1"
	errors "github.com/pkg/errors"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// ResolveReferences of this DnatRule.
func (mg *DnatRule) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.FloatingIPID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.FloatingIPIDRef,
		Selector:     mg.Spec.ForProvider.FloatingIPIDSelector,
		To: reference.To{
			List:    &v1alpha1.VpcEipList{},
			Managed: &v1alpha1.VpcEip{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.FloatingIPID")
	}
	mg.Spec.ForProvider.FloatingIPID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.FloatingIPIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.GlobalEIPID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.GlobalEIPIDRef,
		Selector:     mg.Spec.ForProvider.GlobalEIPIDSelector,
		To: reference.To{
			List:    &v1alpha1.GlobalEipList{},
			Managed: &v1alpha1.GlobalEip{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.GlobalEIPID")
	}
	mg.Spec.ForProvider.GlobalEIPID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.GlobalEIPIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.NATGatewayID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.NATGatewayIDRef,
		Selector:     mg.Spec.ForProvider.NATGatewayIDSelector,
		To: reference.To{
			List:    &GatewayList{},
			Managed: &Gateway{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.NATGatewayID")
	}
	mg.Spec.ForProvider.NATGatewayID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.NATGatewayIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.FloatingIPID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.InitProvider.FloatingIPIDRef,
		Selector:     mg.Spec.InitProvider.FloatingIPIDSelector,
		To: reference.To{
			List:    &v1alpha1.VpcEipList{},
			Managed: &v1alpha1.VpcEip{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.FloatingIPID")
	}
	mg.Spec.InitProvider.FloatingIPID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.FloatingIPIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.GlobalEIPID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.InitProvider.GlobalEIPIDRef,
		Selector:     mg.Spec.InitProvider.GlobalEIPIDSelector,
		To: reference.To{
			List:    &v1alpha1.GlobalEipList{},
			Managed: &v1alpha1.GlobalEip{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.GlobalEIPID")
	}
	mg.Spec.InitProvider.GlobalEIPID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.GlobalEIPIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.NATGatewayID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.InitProvider.NATGatewayIDRef,
		Selector:     mg.Spec.InitProvider.NATGatewayIDSelector,
		To: reference.To{
			List:    &GatewayList{},
			Managed: &Gateway{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.NATGatewayID")
	}
	mg.Spec.InitProvider.NATGatewayID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.NATGatewayIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this Gateway.
func (mg *Gateway) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.SubnetID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.SubnetIDRef,
		Selector:     mg.Spec.ForProvider.SubnetIDSelector,
		To: reference.To{
			List:    &v1alpha11.SubnetList{},
			Managed: &v1alpha11.Subnet{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.SubnetID")
	}
	mg.Spec.ForProvider.SubnetID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.SubnetIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.VPCID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.VPCIDRef,
		Selector:     mg.Spec.ForProvider.VPCIDSelector,
		To: reference.To{
			List:    &v1alpha11.VPCList{},
			Managed: &v1alpha11.VPC{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.VPCID")
	}
	mg.Spec.ForProvider.VPCID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.VPCIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.SubnetID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.InitProvider.SubnetIDRef,
		Selector:     mg.Spec.InitProvider.SubnetIDSelector,
		To: reference.To{
			List:    &v1alpha11.SubnetList{},
			Managed: &v1alpha11.Subnet{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.SubnetID")
	}
	mg.Spec.InitProvider.SubnetID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.SubnetIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.VPCID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.InitProvider.VPCIDRef,
		Selector:     mg.Spec.InitProvider.VPCIDSelector,
		To: reference.To{
			List:    &v1alpha11.VPCList{},
			Managed: &v1alpha11.VPC{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.VPCID")
	}
	mg.Spec.InitProvider.VPCID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.VPCIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this PrivateDnatRule.
func (mg *PrivateDnatRule) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.GatewayID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.GatewayIDRef,
		Selector:     mg.Spec.ForProvider.GatewayIDSelector,
		To: reference.To{
			List:    &PrivateGatewayList{},
			Managed: &PrivateGateway{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.GatewayID")
	}
	mg.Spec.ForProvider.GatewayID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.GatewayIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.TransitIPID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.TransitIPIDRef,
		Selector:     mg.Spec.ForProvider.TransitIPIDSelector,
		To: reference.To{
			List:    &PrivateTransitIPList{},
			Managed: &PrivateTransitIP{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.TransitIPID")
	}
	mg.Spec.ForProvider.TransitIPID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.TransitIPIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.GatewayID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.InitProvider.GatewayIDRef,
		Selector:     mg.Spec.InitProvider.GatewayIDSelector,
		To: reference.To{
			List:    &PrivateGatewayList{},
			Managed: &PrivateGateway{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.GatewayID")
	}
	mg.Spec.InitProvider.GatewayID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.GatewayIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.TransitIPID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.InitProvider.TransitIPIDRef,
		Selector:     mg.Spec.InitProvider.TransitIPIDSelector,
		To: reference.To{
			List:    &PrivateTransitIPList{},
			Managed: &PrivateTransitIP{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.TransitIPID")
	}
	mg.Spec.InitProvider.TransitIPID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.TransitIPIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this PrivateGateway.
func (mg *PrivateGateway) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.SubnetID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.SubnetIDRef,
		Selector:     mg.Spec.ForProvider.SubnetIDSelector,
		To: reference.To{
			List:    &v1alpha11.SubnetList{},
			Managed: &v1alpha11.Subnet{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.SubnetID")
	}
	mg.Spec.ForProvider.SubnetID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.SubnetIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.SubnetID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.InitProvider.SubnetIDRef,
		Selector:     mg.Spec.InitProvider.SubnetIDSelector,
		To: reference.To{
			List:    &v1alpha11.SubnetList{},
			Managed: &v1alpha11.Subnet{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.SubnetID")
	}
	mg.Spec.InitProvider.SubnetID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.SubnetIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this PrivateSnatRule.
func (mg *PrivateSnatRule) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.GatewayID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.GatewayIDRef,
		Selector:     mg.Spec.ForProvider.GatewayIDSelector,
		To: reference.To{
			List:    &PrivateGatewayList{},
			Managed: &PrivateGateway{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.GatewayID")
	}
	mg.Spec.ForProvider.GatewayID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.GatewayIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.SubnetID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.SubnetIDRef,
		Selector:     mg.Spec.ForProvider.SubnetIDSelector,
		To: reference.To{
			List:    &v1alpha11.SubnetList{},
			Managed: &v1alpha11.Subnet{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.SubnetID")
	}
	mg.Spec.ForProvider.SubnetID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.SubnetIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.TransitIPID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.TransitIPIDRef,
		Selector:     mg.Spec.ForProvider.TransitIPIDSelector,
		To: reference.To{
			List:    &PrivateTransitIPList{},
			Managed: &PrivateTransitIP{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.TransitIPID")
	}
	mg.Spec.ForProvider.TransitIPID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.TransitIPIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.GatewayID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.InitProvider.GatewayIDRef,
		Selector:     mg.Spec.InitProvider.GatewayIDSelector,
		To: reference.To{
			List:    &PrivateGatewayList{},
			Managed: &PrivateGateway{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.GatewayID")
	}
	mg.Spec.InitProvider.GatewayID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.GatewayIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.SubnetID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.InitProvider.SubnetIDRef,
		Selector:     mg.Spec.InitProvider.SubnetIDSelector,
		To: reference.To{
			List:    &v1alpha11.SubnetList{},
			Managed: &v1alpha11.Subnet{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.SubnetID")
	}
	mg.Spec.InitProvider.SubnetID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.SubnetIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.TransitIPID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.InitProvider.TransitIPIDRef,
		Selector:     mg.Spec.InitProvider.TransitIPIDSelector,
		To: reference.To{
			List:    &PrivateTransitIPList{},
			Managed: &PrivateTransitIP{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.TransitIPID")
	}
	mg.Spec.InitProvider.TransitIPID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.TransitIPIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this PrivateTransitIP.
func (mg *PrivateTransitIP) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.SubnetID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.SubnetIDRef,
		Selector:     mg.Spec.ForProvider.SubnetIDSelector,
		To: reference.To{
			List:    &v1alpha11.SubnetList{},
			Managed: &v1alpha11.Subnet{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.SubnetID")
	}
	mg.Spec.ForProvider.SubnetID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.SubnetIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.SubnetID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.InitProvider.SubnetIDRef,
		Selector:     mg.Spec.InitProvider.SubnetIDSelector,
		To: reference.To{
			List:    &v1alpha11.SubnetList{},
			Managed: &v1alpha11.Subnet{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.SubnetID")
	}
	mg.Spec.InitProvider.SubnetID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.SubnetIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this SnatRule.
func (mg *SnatRule) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.FloatingIPID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.FloatingIPIDRef,
		Selector:     mg.Spec.ForProvider.FloatingIPIDSelector,
		To: reference.To{
			List:    &v1alpha1.VpcEipList{},
			Managed: &v1alpha1.VpcEip{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.FloatingIPID")
	}
	mg.Spec.ForProvider.FloatingIPID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.FloatingIPIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.GlobalEIPID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.GlobalEIPIDRef,
		Selector:     mg.Spec.ForProvider.GlobalEIPIDSelector,
		To: reference.To{
			List:    &v1alpha1.GlobalEipList{},
			Managed: &v1alpha1.GlobalEip{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.GlobalEIPID")
	}
	mg.Spec.ForProvider.GlobalEIPID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.GlobalEIPIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.NATGatewayID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.NATGatewayIDRef,
		Selector:     mg.Spec.ForProvider.NATGatewayIDSelector,
		To: reference.To{
			List:    &GatewayList{},
			Managed: &Gateway{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.NATGatewayID")
	}
	mg.Spec.ForProvider.NATGatewayID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.NATGatewayIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.SubnetID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.SubnetIDRef,
		Selector:     mg.Spec.ForProvider.SubnetIDSelector,
		To: reference.To{
			List:    &v1alpha11.SubnetList{},
			Managed: &v1alpha11.Subnet{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.SubnetID")
	}
	mg.Spec.ForProvider.SubnetID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.SubnetIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.FloatingIPID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.InitProvider.FloatingIPIDRef,
		Selector:     mg.Spec.InitProvider.FloatingIPIDSelector,
		To: reference.To{
			List:    &v1alpha1.VpcEipList{},
			Managed: &v1alpha1.VpcEip{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.FloatingIPID")
	}
	mg.Spec.InitProvider.FloatingIPID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.FloatingIPIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.GlobalEIPID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.InitProvider.GlobalEIPIDRef,
		Selector:     mg.Spec.InitProvider.GlobalEIPIDSelector,
		To: reference.To{
			List:    &v1alpha1.GlobalEipList{},
			Managed: &v1alpha1.GlobalEip{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.GlobalEIPID")
	}
	mg.Spec.InitProvider.GlobalEIPID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.GlobalEIPIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.NATGatewayID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.InitProvider.NATGatewayIDRef,
		Selector:     mg.Spec.InitProvider.NATGatewayIDSelector,
		To: reference.To{
			List:    &GatewayList{},
			Managed: &Gateway{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.NATGatewayID")
	}
	mg.Spec.InitProvider.NATGatewayID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.NATGatewayIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.SubnetID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.InitProvider.SubnetIDRef,
		Selector:     mg.Spec.InitProvider.SubnetIDSelector,
		To: reference.To{
			List:    &v1alpha11.SubnetList{},
			Managed: &v1alpha11.Subnet{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.SubnetID")
	}
	mg.Spec.InitProvider.SubnetID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.SubnetIDRef = rsp.ResolvedReference

	return nil
}
