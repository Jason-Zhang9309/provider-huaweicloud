// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type DnatRuleInitParameters struct {

	// Specifies the description of the DNAT rule.
	// The value is a string of no more than 255 characters, and angle brackets (<>) are not allowed.
	// The description of the DNAT rule.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Specifies port used by ECSs or BMSs to provide services for
	// external systems.
	// Exactly one of external_service_port and external_service_port_range must be set.
	// Required if internal_service_port is set.
	// The port range used by Floating IP provide services for external systems.
	ExternalServicePort *float64 `json:"externalServicePort,omitempty" tf:"external_service_port,omitempty"`

	// Specifies port range used by ECSs or BMSs to provide
	// services for external systems.
	// This parameter and internal_service_port_range are mapped 1:1 in sequence(, ranges must have the same length).
	// The valid value for range is 1~65535 and the port ranges can only be concatenated with the - character.
	// Required if internal_service_port_range is set.
	// The port range used by ECSs or BMSs to provide services for external systems.
	ExternalServicePortRange *string `json:"externalServicePortRange,omitempty" tf:"external_service_port_range,omitempty"`

	// Specifies the ID of the floating IP address.
	// The ID of the floating IP address.
	// +crossplane:generate:reference:type=github.com/huaweicloud/provider-huaweicloud/apis/eip/v1alpha1.VpcEip
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	FloatingIPID *string `json:"floatingIpId,omitempty" tf:"floating_ip_id,omitempty"`

	// Reference to a VpcEip in eip to populate floatingIpId.
	// +kubebuilder:validation:Optional
	FloatingIPIDRef *v1.Reference `json:"floatingIpIdRef,omitempty" tf:"-"`

	// Selector for a VpcEip in eip to populate floatingIpId.
	// +kubebuilder:validation:Optional
	FloatingIPIDSelector *v1.Selector `json:"floatingIpIdSelector,omitempty" tf:"-"`

	// Specifies the ID of the global EIP connected by the DNAT rule.
	// The ID of the global EIP connected by the DNAT rule.
	// +crossplane:generate:reference:type=github.com/huaweicloud/provider-huaweicloud/apis/eip/v1alpha1.GlobalEip
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	GlobalEIPID *string `json:"globalEipId,omitempty" tf:"global_eip_id,omitempty"`

	// Reference to a GlobalEip in eip to populate globalEipId.
	// +kubebuilder:validation:Optional
	GlobalEIPIDRef *v1.Reference `json:"globalEipIdRef,omitempty" tf:"-"`

	// Selector for a GlobalEip in eip to populate globalEipId.
	// +kubebuilder:validation:Optional
	GlobalEIPIDSelector *v1.Selector `json:"globalEipIdSelector,omitempty" tf:"-"`

	// Specifies port used by Floating IP provide services for external
	// systems.
	// Exactly one of internal_service_port and internal_service_port_range must be set.
	// The port used by Floating IP provide services for external systems.
	InternalServicePort *float64 `json:"internalServicePort,omitempty" tf:"internal_service_port,omitempty"`

	// Specifies port range used by Floating IP provide services
	// for external systems.
	// This parameter and external_service_port_range are mapped 1:1 in sequence(, ranges must have the same length).
	// The valid value for range is 1~65535 and the port ranges can only be concatenated with the - character.
	// The port used by ECSs or BMSs to provide services for external systems.
	InternalServicePortRange *string `json:"internalServicePortRange,omitempty" tf:"internal_service_port_range,omitempty"`

	// Specifies the ID of the NAT gateway to which the DNAT rule belongs.
	// Changing this will create a new resource.
	// The ID of the NAT gateway to which the DNAT rule belongs.
	// +crossplane:generate:reference:type=github.com/huaweicloud/provider-huaweicloud/apis/nat/v1alpha1.Gateway
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	NATGatewayID *string `json:"natGatewayId,omitempty" tf:"nat_gateway_id,omitempty"`

	// Reference to a Gateway in nat to populate natGatewayId.
	// +kubebuilder:validation:Optional
	NATGatewayIDRef *v1.Reference `json:"natGatewayIdRef,omitempty" tf:"-"`

	// Selector for a Gateway in nat to populate natGatewayId.
	// +kubebuilder:validation:Optional
	NATGatewayIDSelector *v1.Selector `json:"natGatewayIdSelector,omitempty" tf:"-"`

	// Specifies the port ID of network. This parameter is mandatory in VPC scenario.
	// Use huaweicloud_networking_port to get the port if just know a fixed IP addresses
	// on the port.
	// The port ID of network.
	PortID *string `json:"portId,omitempty" tf:"port_id,omitempty"`

	// Specifies the private IP address of a user. This parameter is mandatory in
	// Direct Connect scenario.
	// The private IP address of a user.
	PrivateIP *string `json:"privateIp,omitempty" tf:"private_ip,omitempty"`

	// Specifies the protocol type.
	// The valid values are tcp, udp, and any.
	// The protocol type.
	Protocol *string `json:"protocol,omitempty" tf:"protocol,omitempty"`

	// Specifies the region where the DNAT rule is located.
	// If omitted, the provider-level region will be used. Changing this will create a new resource.
	// The region where the DNAT rule is located.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`
}

type DnatRuleObservation struct {

	// The creation time of the DNAT rule.
	// The creation time of the DNAT rule.
	CreatedAt *string `json:"createdAt,omitempty" tf:"created_at,omitempty"`

	// Specifies the description of the DNAT rule.
	// The value is a string of no more than 255 characters, and angle brackets (<>) are not allowed.
	// The description of the DNAT rule.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Specifies port used by ECSs or BMSs to provide services for
	// external systems.
	// Exactly one of external_service_port and external_service_port_range must be set.
	// Required if internal_service_port is set.
	// The port range used by Floating IP provide services for external systems.
	ExternalServicePort *float64 `json:"externalServicePort,omitempty" tf:"external_service_port,omitempty"`

	// Specifies port range used by ECSs or BMSs to provide
	// services for external systems.
	// This parameter and internal_service_port_range are mapped 1:1 in sequence(, ranges must have the same length).
	// The valid value for range is 1~65535 and the port ranges can only be concatenated with the - character.
	// Required if internal_service_port_range is set.
	// The port range used by ECSs or BMSs to provide services for external systems.
	ExternalServicePortRange *string `json:"externalServicePortRange,omitempty" tf:"external_service_port_range,omitempty"`

	// The actual floating IP address.
	// The floating IP address of the DNAT rule.
	FloatingIPAddress *string `json:"floatingIpAddress,omitempty" tf:"floating_ip_address,omitempty"`

	// Specifies the ID of the floating IP address.
	// The ID of the floating IP address.
	FloatingIPID *string `json:"floatingIpId,omitempty" tf:"floating_ip_id,omitempty"`

	// The global EIP address connected by the DNAT rule.
	// The global EIP address connected by the DNAT rule.
	GlobalEIPAddress *string `json:"globalEipAddress,omitempty" tf:"global_eip_address,omitempty"`

	// Specifies the ID of the global EIP connected by the DNAT rule.
	// The ID of the global EIP connected by the DNAT rule.
	GlobalEIPID *string `json:"globalEipId,omitempty" tf:"global_eip_id,omitempty"`

	// The resource ID in UUID format.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Specifies port used by Floating IP provide services for external
	// systems.
	// Exactly one of internal_service_port and internal_service_port_range must be set.
	// The port used by Floating IP provide services for external systems.
	InternalServicePort *float64 `json:"internalServicePort,omitempty" tf:"internal_service_port,omitempty"`

	// Specifies port range used by Floating IP provide services
	// for external systems.
	// This parameter and external_service_port_range are mapped 1:1 in sequence(, ranges must have the same length).
	// The valid value for range is 1~65535 and the port ranges can only be concatenated with the - character.
	// The port used by ECSs or BMSs to provide services for external systems.
	InternalServicePortRange *string `json:"internalServicePortRange,omitempty" tf:"internal_service_port_range,omitempty"`

	// Specifies the ID of the NAT gateway to which the DNAT rule belongs.
	// Changing this will create a new resource.
	// The ID of the NAT gateway to which the DNAT rule belongs.
	NATGatewayID *string `json:"natGatewayId,omitempty" tf:"nat_gateway_id,omitempty"`

	// Specifies the port ID of network. This parameter is mandatory in VPC scenario.
	// Use huaweicloud_networking_port to get the port if just know a fixed IP addresses
	// on the port.
	// The port ID of network.
	PortID *string `json:"portId,omitempty" tf:"port_id,omitempty"`

	// Specifies the private IP address of a user. This parameter is mandatory in
	// Direct Connect scenario.
	// The private IP address of a user.
	PrivateIP *string `json:"privateIp,omitempty" tf:"private_ip,omitempty"`

	// Specifies the protocol type.
	// The valid values are tcp, udp, and any.
	// The protocol type.
	Protocol *string `json:"protocol,omitempty" tf:"protocol,omitempty"`

	// Specifies the region where the DNAT rule is located.
	// If omitted, the provider-level region will be used. Changing this will create a new resource.
	// The region where the DNAT rule is located.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// The current status of the DNAT rule.
	// The current status of the DNAT rule.
	Status *string `json:"status,omitempty" tf:"status,omitempty"`
}

type DnatRuleParameters struct {

	// Specifies the description of the DNAT rule.
	// The value is a string of no more than 255 characters, and angle brackets (<>) are not allowed.
	// The description of the DNAT rule.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Specifies port used by ECSs or BMSs to provide services for
	// external systems.
	// Exactly one of external_service_port and external_service_port_range must be set.
	// Required if internal_service_port is set.
	// The port range used by Floating IP provide services for external systems.
	// +kubebuilder:validation:Optional
	ExternalServicePort *float64 `json:"externalServicePort,omitempty" tf:"external_service_port,omitempty"`

	// Specifies port range used by ECSs or BMSs to provide
	// services for external systems.
	// This parameter and internal_service_port_range are mapped 1:1 in sequence(, ranges must have the same length).
	// The valid value for range is 1~65535 and the port ranges can only be concatenated with the - character.
	// Required if internal_service_port_range is set.
	// The port range used by ECSs or BMSs to provide services for external systems.
	// +kubebuilder:validation:Optional
	ExternalServicePortRange *string `json:"externalServicePortRange,omitempty" tf:"external_service_port_range,omitempty"`

	// Specifies the ID of the floating IP address.
	// The ID of the floating IP address.
	// +crossplane:generate:reference:type=github.com/huaweicloud/provider-huaweicloud/apis/eip/v1alpha1.VpcEip
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	FloatingIPID *string `json:"floatingIpId,omitempty" tf:"floating_ip_id,omitempty"`

	// Reference to a VpcEip in eip to populate floatingIpId.
	// +kubebuilder:validation:Optional
	FloatingIPIDRef *v1.Reference `json:"floatingIpIdRef,omitempty" tf:"-"`

	// Selector for a VpcEip in eip to populate floatingIpId.
	// +kubebuilder:validation:Optional
	FloatingIPIDSelector *v1.Selector `json:"floatingIpIdSelector,omitempty" tf:"-"`

	// Specifies the ID of the global EIP connected by the DNAT rule.
	// The ID of the global EIP connected by the DNAT rule.
	// +crossplane:generate:reference:type=github.com/huaweicloud/provider-huaweicloud/apis/eip/v1alpha1.GlobalEip
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	GlobalEIPID *string `json:"globalEipId,omitempty" tf:"global_eip_id,omitempty"`

	// Reference to a GlobalEip in eip to populate globalEipId.
	// +kubebuilder:validation:Optional
	GlobalEIPIDRef *v1.Reference `json:"globalEipIdRef,omitempty" tf:"-"`

	// Selector for a GlobalEip in eip to populate globalEipId.
	// +kubebuilder:validation:Optional
	GlobalEIPIDSelector *v1.Selector `json:"globalEipIdSelector,omitempty" tf:"-"`

	// Specifies port used by Floating IP provide services for external
	// systems.
	// Exactly one of internal_service_port and internal_service_port_range must be set.
	// The port used by Floating IP provide services for external systems.
	// +kubebuilder:validation:Optional
	InternalServicePort *float64 `json:"internalServicePort,omitempty" tf:"internal_service_port,omitempty"`

	// Specifies port range used by Floating IP provide services
	// for external systems.
	// This parameter and external_service_port_range are mapped 1:1 in sequence(, ranges must have the same length).
	// The valid value for range is 1~65535 and the port ranges can only be concatenated with the - character.
	// The port used by ECSs or BMSs to provide services for external systems.
	// +kubebuilder:validation:Optional
	InternalServicePortRange *string `json:"internalServicePortRange,omitempty" tf:"internal_service_port_range,omitempty"`

	// Specifies the ID of the NAT gateway to which the DNAT rule belongs.
	// Changing this will create a new resource.
	// The ID of the NAT gateway to which the DNAT rule belongs.
	// +crossplane:generate:reference:type=github.com/huaweicloud/provider-huaweicloud/apis/nat/v1alpha1.Gateway
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	NATGatewayID *string `json:"natGatewayId,omitempty" tf:"nat_gateway_id,omitempty"`

	// Reference to a Gateway in nat to populate natGatewayId.
	// +kubebuilder:validation:Optional
	NATGatewayIDRef *v1.Reference `json:"natGatewayIdRef,omitempty" tf:"-"`

	// Selector for a Gateway in nat to populate natGatewayId.
	// +kubebuilder:validation:Optional
	NATGatewayIDSelector *v1.Selector `json:"natGatewayIdSelector,omitempty" tf:"-"`

	// Specifies the port ID of network. This parameter is mandatory in VPC scenario.
	// Use huaweicloud_networking_port to get the port if just know a fixed IP addresses
	// on the port.
	// The port ID of network.
	// +kubebuilder:validation:Optional
	PortID *string `json:"portId,omitempty" tf:"port_id,omitempty"`

	// Specifies the private IP address of a user. This parameter is mandatory in
	// Direct Connect scenario.
	// The private IP address of a user.
	// +kubebuilder:validation:Optional
	PrivateIP *string `json:"privateIp,omitempty" tf:"private_ip,omitempty"`

	// Specifies the protocol type.
	// The valid values are tcp, udp, and any.
	// The protocol type.
	// +kubebuilder:validation:Optional
	Protocol *string `json:"protocol,omitempty" tf:"protocol,omitempty"`

	// Specifies the region where the DNAT rule is located.
	// If omitted, the provider-level region will be used. Changing this will create a new resource.
	// The region where the DNAT rule is located.
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`
}

// DnatRuleSpec defines the desired state of DnatRule
type DnatRuleSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     DnatRuleParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider DnatRuleInitParameters `json:"initProvider,omitempty"`
}

// DnatRuleStatus defines the observed state of DnatRule.
type DnatRuleStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        DnatRuleObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// DnatRule is the Schema for the DnatRules API. ""
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,huaweicloud}
type DnatRule struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.protocol) || (has(self.initProvider) && has(self.initProvider.protocol))",message="spec.forProvider.protocol is a required parameter"
	Spec   DnatRuleSpec   `json:"spec"`
	Status DnatRuleStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DnatRuleList contains a list of DnatRules
type DnatRuleList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DnatRule `json:"items"`
}

// Repository type metadata.
var (
	DnatRule_Kind             = "DnatRule"
	DnatRule_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: DnatRule_Kind}.String()
	DnatRule_KindAPIVersion   = DnatRule_Kind + "." + CRDGroupVersion.String()
	DnatRule_GroupVersionKind = CRDGroupVersion.WithKind(DnatRule_Kind)
)

func init() {
	SchemeBuilder.Register(&DnatRule{}, &DnatRuleList{})
}
